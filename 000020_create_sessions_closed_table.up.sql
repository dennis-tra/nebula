BEGIN;

-- The `sessions_closed` table keeps track of all finished sessions of peers.
CREATE TABLE sessions_closed
(
    -- A unique id that identifies this particular closed session
    -- The ID is not generated by default as it'll keep the ID from
    -- the sessions_active table.
    id                      INT,
    -- Reference to the remote peer ID.
    peer_id                 INT         NOT NULL,
    -- When was the peer successfully visited the first time
    first_successful_visit  TIMESTAMPTZ NOT NULL,
    -- When was the most recent successful dial to the peer above
    last_successful_visit   TIMESTAMPTZ NOT NULL,
    -- When did we first notice that this peer is not reachable.
    first_failed_visit      TIMESTAMPTZ NOT NULL,
    -- When did we first notice that this peer is not reachable.
    last_failed_visit       TIMESTAMPTZ NOT NULL,
    -- Number of successful visits in this session.
    successful_visits_count INTEGER     NOT NULL,
    -- Number of failed visits before closing this session.
    failed_visits_count     SMALLINT    NOT NULL,
    -- What's the reason why we closed this session.
    finish_reason           dial_error  NOT NULL,
    -- The duration that this peer was online due to multiple subsequent successful dials
    min_duration            INTERVAL    NOT NULL,
    -- The duration that from the first successful dial until the first failed dial
    max_duration            INTERVAL    NOT NULL,
    -- When was this session instance created
    created_at              TIMESTAMPTZ NOT NULL,

    -- The peer ID should always point to an existing peer in the DB
    CONSTRAINT fk_sessions_peer_id FOREIGN KEY (peer_id) REFERENCES peers (id) ON DELETE CASCADE,

    PRIMARY KEY (id, created_at)

) PARTITION BY RANGE (created_at);

CREATE INDEX idx_sessions_closed_peer_id ON sessions_closed (peer_id);

COMMIT;