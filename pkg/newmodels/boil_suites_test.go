// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AgentVersions", testAgentVersions)
	t.Run("Crawls", testCrawls)
}

func TestDelete(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsDelete)
	t.Run("Crawls", testCrawlsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsQueryDeleteAll)
	t.Run("Crawls", testCrawlsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsSliceDeleteAll)
	t.Run("Crawls", testCrawlsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsExists)
	t.Run("Crawls", testCrawlsExists)
}

func TestFind(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsFind)
	t.Run("Crawls", testCrawlsFind)
}

func TestBind(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsBind)
	t.Run("Crawls", testCrawlsBind)
}

func TestOne(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsOne)
	t.Run("Crawls", testCrawlsOne)
}

func TestAll(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsAll)
	t.Run("Crawls", testCrawlsAll)
}

func TestCount(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsCount)
	t.Run("Crawls", testCrawlsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsHooks)
	t.Run("Crawls", testCrawlsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsInsert)
	t.Run("AgentVersions", testAgentVersionsInsertWhitelist)
	t.Run("Crawls", testCrawlsInsert)
	t.Run("Crawls", testCrawlsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsReload)
	t.Run("Crawls", testCrawlsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsReloadAll)
	t.Run("Crawls", testCrawlsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsSelect)
	t.Run("Crawls", testCrawlsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsUpdate)
	t.Run("Crawls", testCrawlsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AgentVersions", testAgentVersionsSliceUpdateAll)
	t.Run("Crawls", testCrawlsSliceUpdateAll)
}
