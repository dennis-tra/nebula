// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CrawlProperty is an object representing the database table.
type CrawlProperty struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Count      int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CrawlID    int       `boil:"crawl_id" json:"crawl_id" toml:"crawl_id" yaml:"crawl_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PropertyID int       `boil:"property_id" json:"property_id" toml:"property_id" yaml:"property_id"`

	R *crawlPropertyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L crawlPropertyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CrawlPropertyColumns = struct {
	ID         string
	Count      string
	CrawlID    string
	CreatedAt  string
	UpdatedAt  string
	PropertyID string
}{
	ID:         "id",
	Count:      "count",
	CrawlID:    "crawl_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	PropertyID: "property_id",
}

var CrawlPropertyTableColumns = struct {
	ID         string
	Count      string
	CrawlID    string
	CreatedAt  string
	UpdatedAt  string
	PropertyID string
}{
	ID:         "crawl_properties.id",
	Count:      "crawl_properties.count",
	CrawlID:    "crawl_properties.crawl_id",
	CreatedAt:  "crawl_properties.created_at",
	UpdatedAt:  "crawl_properties.updated_at",
	PropertyID: "crawl_properties.property_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CrawlPropertyWhere = struct {
	ID         whereHelperint
	Count      whereHelperint
	CrawlID    whereHelperint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	PropertyID whereHelperint
}{
	ID:         whereHelperint{field: "\"crawl_properties\".\"id\""},
	Count:      whereHelperint{field: "\"crawl_properties\".\"count\""},
	CrawlID:    whereHelperint{field: "\"crawl_properties\".\"crawl_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"crawl_properties\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"crawl_properties\".\"updated_at\""},
	PropertyID: whereHelperint{field: "\"crawl_properties\".\"property_id\""},
}

// CrawlPropertyRels is where relationship names are stored.
var CrawlPropertyRels = struct {
	Property string
	Crawl    string
}{
	Property: "Property",
	Crawl:    "Crawl",
}

// crawlPropertyR is where relationships are stored.
type crawlPropertyR struct {
	Property *Property `boil:"Property" json:"Property" toml:"Property" yaml:"Property"`
	Crawl    *Crawl    `boil:"Crawl" json:"Crawl" toml:"Crawl" yaml:"Crawl"`
}

// NewStruct creates a new relationship struct
func (*crawlPropertyR) NewStruct() *crawlPropertyR {
	return &crawlPropertyR{}
}

// crawlPropertyL is where Load methods for each relationship are stored.
type crawlPropertyL struct{}

var (
	crawlPropertyAllColumns            = []string{"id", "count", "crawl_id", "created_at", "updated_at", "property_id"}
	crawlPropertyColumnsWithoutDefault = []string{"count", "created_at", "updated_at"}
	crawlPropertyColumnsWithDefault    = []string{"id", "crawl_id", "property_id"}
	crawlPropertyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CrawlPropertySlice is an alias for a slice of pointers to CrawlProperty.
	// This should almost always be used instead of []CrawlProperty.
	CrawlPropertySlice []*CrawlProperty
	// CrawlPropertyHook is the signature for custom CrawlProperty hook methods
	CrawlPropertyHook func(context.Context, boil.ContextExecutor, *CrawlProperty) error

	crawlPropertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	crawlPropertyType                 = reflect.TypeOf(&CrawlProperty{})
	crawlPropertyMapping              = queries.MakeStructMapping(crawlPropertyType)
	crawlPropertyPrimaryKeyMapping, _ = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, crawlPropertyPrimaryKeyColumns)
	crawlPropertyInsertCacheMut       sync.RWMutex
	crawlPropertyInsertCache          = make(map[string]insertCache)
	crawlPropertyUpdateCacheMut       sync.RWMutex
	crawlPropertyUpdateCache          = make(map[string]updateCache)
	crawlPropertyUpsertCacheMut       sync.RWMutex
	crawlPropertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var crawlPropertyBeforeInsertHooks []CrawlPropertyHook
var crawlPropertyBeforeUpdateHooks []CrawlPropertyHook
var crawlPropertyBeforeDeleteHooks []CrawlPropertyHook
var crawlPropertyBeforeUpsertHooks []CrawlPropertyHook

var crawlPropertyAfterInsertHooks []CrawlPropertyHook
var crawlPropertyAfterSelectHooks []CrawlPropertyHook
var crawlPropertyAfterUpdateHooks []CrawlPropertyHook
var crawlPropertyAfterDeleteHooks []CrawlPropertyHook
var crawlPropertyAfterUpsertHooks []CrawlPropertyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CrawlProperty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CrawlProperty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CrawlProperty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CrawlProperty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CrawlProperty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CrawlProperty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CrawlProperty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CrawlProperty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CrawlProperty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range crawlPropertyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCrawlPropertyHook registers your hook function for all future operations.
func AddCrawlPropertyHook(hookPoint boil.HookPoint, crawlPropertyHook CrawlPropertyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		crawlPropertyBeforeInsertHooks = append(crawlPropertyBeforeInsertHooks, crawlPropertyHook)
	case boil.BeforeUpdateHook:
		crawlPropertyBeforeUpdateHooks = append(crawlPropertyBeforeUpdateHooks, crawlPropertyHook)
	case boil.BeforeDeleteHook:
		crawlPropertyBeforeDeleteHooks = append(crawlPropertyBeforeDeleteHooks, crawlPropertyHook)
	case boil.BeforeUpsertHook:
		crawlPropertyBeforeUpsertHooks = append(crawlPropertyBeforeUpsertHooks, crawlPropertyHook)
	case boil.AfterInsertHook:
		crawlPropertyAfterInsertHooks = append(crawlPropertyAfterInsertHooks, crawlPropertyHook)
	case boil.AfterSelectHook:
		crawlPropertyAfterSelectHooks = append(crawlPropertyAfterSelectHooks, crawlPropertyHook)
	case boil.AfterUpdateHook:
		crawlPropertyAfterUpdateHooks = append(crawlPropertyAfterUpdateHooks, crawlPropertyHook)
	case boil.AfterDeleteHook:
		crawlPropertyAfterDeleteHooks = append(crawlPropertyAfterDeleteHooks, crawlPropertyHook)
	case boil.AfterUpsertHook:
		crawlPropertyAfterUpsertHooks = append(crawlPropertyAfterUpsertHooks, crawlPropertyHook)
	}
}

// One returns a single crawlProperty record from the query.
func (q crawlPropertyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CrawlProperty, error) {
	o := &CrawlProperty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for crawl_properties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CrawlProperty records from the query.
func (q crawlPropertyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CrawlPropertySlice, error) {
	var o []*CrawlProperty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CrawlProperty slice")
	}

	if len(crawlPropertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CrawlProperty records in the query.
func (q crawlPropertyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count crawl_properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q crawlPropertyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if crawl_properties exists")
	}

	return count > 0, nil
}

// Property pointed to by the foreign key.
func (o *CrawlProperty) Property(mods ...qm.QueryMod) propertyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PropertyID),
	}

	queryMods = append(queryMods, mods...)

	query := Properties(queryMods...)
	queries.SetFrom(query.Query, "\"properties\"")

	return query
}

// Crawl pointed to by the foreign key.
func (o *CrawlProperty) Crawl(mods ...qm.QueryMod) crawlQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CrawlID),
	}

	queryMods = append(queryMods, mods...)

	query := Crawls(queryMods...)
	queries.SetFrom(query.Query, "\"crawls\"")

	return query
}

// LoadProperty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (crawlPropertyL) LoadProperty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCrawlProperty interface{}, mods queries.Applicator) error {
	var slice []*CrawlProperty
	var object *CrawlProperty

	if singular {
		object = maybeCrawlProperty.(*CrawlProperty)
	} else {
		slice = *maybeCrawlProperty.(*[]*CrawlProperty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &crawlPropertyR{}
		}
		args = append(args, object.PropertyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &crawlPropertyR{}
			}

			for _, a := range args {
				if a == obj.PropertyID {
					continue Outer
				}
			}

			args = append(args, obj.PropertyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`properties`),
		qm.WhereIn(`properties.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Property")
	}

	var resultSlice []*Property
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Property")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for properties")
	}

	if len(crawlPropertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Property = foreign
		if foreign.R == nil {
			foreign.R = &propertyR{}
		}
		foreign.R.CrawlProperties = append(foreign.R.CrawlProperties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PropertyID == foreign.ID {
				local.R.Property = foreign
				if foreign.R == nil {
					foreign.R = &propertyR{}
				}
				foreign.R.CrawlProperties = append(foreign.R.CrawlProperties, local)
				break
			}
		}
	}

	return nil
}

// LoadCrawl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (crawlPropertyL) LoadCrawl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCrawlProperty interface{}, mods queries.Applicator) error {
	var slice []*CrawlProperty
	var object *CrawlProperty

	if singular {
		object = maybeCrawlProperty.(*CrawlProperty)
	} else {
		slice = *maybeCrawlProperty.(*[]*CrawlProperty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &crawlPropertyR{}
		}
		args = append(args, object.CrawlID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &crawlPropertyR{}
			}

			for _, a := range args {
				if a == obj.CrawlID {
					continue Outer
				}
			}

			args = append(args, obj.CrawlID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crawls`),
		qm.WhereIn(`crawls.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Crawl")
	}

	var resultSlice []*Crawl
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Crawl")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for crawls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crawls")
	}

	if len(crawlPropertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Crawl = foreign
		if foreign.R == nil {
			foreign.R = &crawlR{}
		}
		foreign.R.CrawlProperties = append(foreign.R.CrawlProperties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CrawlID == foreign.ID {
				local.R.Crawl = foreign
				if foreign.R == nil {
					foreign.R = &crawlR{}
				}
				foreign.R.CrawlProperties = append(foreign.R.CrawlProperties, local)
				break
			}
		}
	}

	return nil
}

// SetProperty of the crawlProperty to the related item.
// Sets o.R.Property to related.
// Adds o to related.R.CrawlProperties.
func (o *CrawlProperty) SetProperty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Property) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crawl_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"property_id"}),
		strmangle.WhereClause("\"", "\"", 2, crawlPropertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PropertyID = related.ID
	if o.R == nil {
		o.R = &crawlPropertyR{
			Property: related,
		}
	} else {
		o.R.Property = related
	}

	if related.R == nil {
		related.R = &propertyR{
			CrawlProperties: CrawlPropertySlice{o},
		}
	} else {
		related.R.CrawlProperties = append(related.R.CrawlProperties, o)
	}

	return nil
}

// SetCrawl of the crawlProperty to the related item.
// Sets o.R.Crawl to related.
// Adds o to related.R.CrawlProperties.
func (o *CrawlProperty) SetCrawl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Crawl) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crawl_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"crawl_id"}),
		strmangle.WhereClause("\"", "\"", 2, crawlPropertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CrawlID = related.ID
	if o.R == nil {
		o.R = &crawlPropertyR{
			Crawl: related,
		}
	} else {
		o.R.Crawl = related
	}

	if related.R == nil {
		related.R = &crawlR{
			CrawlProperties: CrawlPropertySlice{o},
		}
	} else {
		related.R.CrawlProperties = append(related.R.CrawlProperties, o)
	}

	return nil
}

// CrawlProperties retrieves all the records using an executor.
func CrawlProperties(mods ...qm.QueryMod) crawlPropertyQuery {
	mods = append(mods, qm.From("\"crawl_properties\""))
	return crawlPropertyQuery{NewQuery(mods...)}
}

// FindCrawlProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCrawlProperty(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CrawlProperty, error) {
	crawlPropertyObj := &CrawlProperty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"crawl_properties\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, crawlPropertyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from crawl_properties")
	}

	if err = crawlPropertyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return crawlPropertyObj, err
	}

	return crawlPropertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CrawlProperty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crawl_properties provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(crawlPropertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	crawlPropertyInsertCacheMut.RLock()
	cache, cached := crawlPropertyInsertCache[key]
	crawlPropertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			crawlPropertyAllColumns,
			crawlPropertyColumnsWithDefault,
			crawlPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"crawl_properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"crawl_properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into crawl_properties")
	}

	if !cached {
		crawlPropertyInsertCacheMut.Lock()
		crawlPropertyInsertCache[key] = cache
		crawlPropertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CrawlProperty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CrawlProperty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	crawlPropertyUpdateCacheMut.RLock()
	cache, cached := crawlPropertyUpdateCache[key]
	crawlPropertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			crawlPropertyAllColumns,
			crawlPropertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update crawl_properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"crawl_properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, crawlPropertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, append(wl, crawlPropertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update crawl_properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for crawl_properties")
	}

	if !cached {
		crawlPropertyUpdateCacheMut.Lock()
		crawlPropertyUpdateCache[key] = cache
		crawlPropertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q crawlPropertyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for crawl_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for crawl_properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CrawlPropertySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), crawlPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"crawl_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, crawlPropertyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in crawlProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all crawlProperty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CrawlProperty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crawl_properties provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(crawlPropertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	crawlPropertyUpsertCacheMut.RLock()
	cache, cached := crawlPropertyUpsertCache[key]
	crawlPropertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			crawlPropertyAllColumns,
			crawlPropertyColumnsWithDefault,
			crawlPropertyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			crawlPropertyAllColumns,
			crawlPropertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert crawl_properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(crawlPropertyPrimaryKeyColumns))
			copy(conflict, crawlPropertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"crawl_properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(crawlPropertyType, crawlPropertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert crawl_properties")
	}

	if !cached {
		crawlPropertyUpsertCacheMut.Lock()
		crawlPropertyUpsertCache[key] = cache
		crawlPropertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CrawlProperty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CrawlProperty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CrawlProperty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), crawlPropertyPrimaryKeyMapping)
	sql := "DELETE FROM \"crawl_properties\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from crawl_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for crawl_properties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q crawlPropertyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no crawlPropertyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from crawl_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crawl_properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CrawlPropertySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(crawlPropertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), crawlPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"crawl_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, crawlPropertyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from crawlProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crawl_properties")
	}

	if len(crawlPropertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CrawlProperty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCrawlProperty(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CrawlPropertySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CrawlPropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), crawlPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"crawl_properties\".* FROM \"crawl_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, crawlPropertyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CrawlPropertySlice")
	}

	*o = slice

	return nil
}

// CrawlPropertyExists checks if the CrawlProperty row exists.
func CrawlPropertyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"crawl_properties\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if crawl_properties exists")
	}

	return exists, nil
}
