// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SessionsClosed202210 is an object representing the database table.
type SessionsClosed202210 struct {
	ID                    int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID                int       `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	FirstSuccessfulVisit  time.Time `boil:"first_successful_visit" json:"first_successful_visit" toml:"first_successful_visit" yaml:"first_successful_visit"`
	LastSuccessfulVisit   time.Time `boil:"last_successful_visit" json:"last_successful_visit" toml:"last_successful_visit" yaml:"last_successful_visit"`
	NextVisitAttemptAt    null.Time `boil:"next_visit_attempt_at" json:"next_visit_attempt_at,omitempty" toml:"next_visit_attempt_at" yaml:"next_visit_attempt_at,omitempty"`
	FirstFailedVisit      time.Time `boil:"first_failed_visit" json:"first_failed_visit" toml:"first_failed_visit" yaml:"first_failed_visit"`
	LastFailedVisit       time.Time `boil:"last_failed_visit" json:"last_failed_visit" toml:"last_failed_visit" yaml:"last_failed_visit"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MinDuration           string    `boil:"min_duration" json:"min_duration" toml:"min_duration" yaml:"min_duration"`
	MaxDuration           string    `boil:"max_duration" json:"max_duration" toml:"max_duration" yaml:"max_duration"`
	SuccessfulVisitsCount int       `boil:"successful_visits_count" json:"successful_visits_count" toml:"successful_visits_count" yaml:"successful_visits_count"`
	State                 string    `boil:"state" json:"state" toml:"state" yaml:"state"`
	FailedVisitsCount     int16     `boil:"failed_visits_count" json:"failed_visits_count" toml:"failed_visits_count" yaml:"failed_visits_count"`
	RecoveredCount        int       `boil:"recovered_count" json:"recovered_count" toml:"recovered_count" yaml:"recovered_count"`
	FinishReason          string    `boil:"finish_reason" json:"finish_reason" toml:"finish_reason" yaml:"finish_reason"`

	R *sessionsClosed202210R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sessionsClosed202210L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SessionsClosed202210Columns = struct {
	ID                    string
	PeerID                string
	FirstSuccessfulVisit  string
	LastSuccessfulVisit   string
	NextVisitAttemptAt    string
	FirstFailedVisit      string
	LastFailedVisit       string
	UpdatedAt             string
	CreatedAt             string
	MinDuration           string
	MaxDuration           string
	SuccessfulVisitsCount string
	State                 string
	FailedVisitsCount     string
	RecoveredCount        string
	FinishReason          string
}{
	ID:                    "id",
	PeerID:                "peer_id",
	FirstSuccessfulVisit:  "first_successful_visit",
	LastSuccessfulVisit:   "last_successful_visit",
	NextVisitAttemptAt:    "next_visit_attempt_at",
	FirstFailedVisit:      "first_failed_visit",
	LastFailedVisit:       "last_failed_visit",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
	MinDuration:           "min_duration",
	MaxDuration:           "max_duration",
	SuccessfulVisitsCount: "successful_visits_count",
	State:                 "state",
	FailedVisitsCount:     "failed_visits_count",
	RecoveredCount:        "recovered_count",
	FinishReason:          "finish_reason",
}

var SessionsClosed202210TableColumns = struct {
	ID                    string
	PeerID                string
	FirstSuccessfulVisit  string
	LastSuccessfulVisit   string
	NextVisitAttemptAt    string
	FirstFailedVisit      string
	LastFailedVisit       string
	UpdatedAt             string
	CreatedAt             string
	MinDuration           string
	MaxDuration           string
	SuccessfulVisitsCount string
	State                 string
	FailedVisitsCount     string
	RecoveredCount        string
	FinishReason          string
}{
	ID:                    "sessions_closed_2022_10.id",
	PeerID:                "sessions_closed_2022_10.peer_id",
	FirstSuccessfulVisit:  "sessions_closed_2022_10.first_successful_visit",
	LastSuccessfulVisit:   "sessions_closed_2022_10.last_successful_visit",
	NextVisitAttemptAt:    "sessions_closed_2022_10.next_visit_attempt_at",
	FirstFailedVisit:      "sessions_closed_2022_10.first_failed_visit",
	LastFailedVisit:       "sessions_closed_2022_10.last_failed_visit",
	UpdatedAt:             "sessions_closed_2022_10.updated_at",
	CreatedAt:             "sessions_closed_2022_10.created_at",
	MinDuration:           "sessions_closed_2022_10.min_duration",
	MaxDuration:           "sessions_closed_2022_10.max_duration",
	SuccessfulVisitsCount: "sessions_closed_2022_10.successful_visits_count",
	State:                 "sessions_closed_2022_10.state",
	FailedVisitsCount:     "sessions_closed_2022_10.failed_visits_count",
	RecoveredCount:        "sessions_closed_2022_10.recovered_count",
	FinishReason:          "sessions_closed_2022_10.finish_reason",
}

// Generated where

var SessionsClosed202210Where = struct {
	ID                    whereHelperint
	PeerID                whereHelperint
	FirstSuccessfulVisit  whereHelpertime_Time
	LastSuccessfulVisit   whereHelpertime_Time
	NextVisitAttemptAt    whereHelpernull_Time
	FirstFailedVisit      whereHelpertime_Time
	LastFailedVisit       whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	MinDuration           whereHelperstring
	MaxDuration           whereHelperstring
	SuccessfulVisitsCount whereHelperint
	State                 whereHelperstring
	FailedVisitsCount     whereHelperint16
	RecoveredCount        whereHelperint
	FinishReason          whereHelperstring
}{
	ID:                    whereHelperint{field: "\"sessions_closed_2022_10\".\"id\""},
	PeerID:                whereHelperint{field: "\"sessions_closed_2022_10\".\"peer_id\""},
	FirstSuccessfulVisit:  whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"first_successful_visit\""},
	LastSuccessfulVisit:   whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"last_successful_visit\""},
	NextVisitAttemptAt:    whereHelpernull_Time{field: "\"sessions_closed_2022_10\".\"next_visit_attempt_at\""},
	FirstFailedVisit:      whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"first_failed_visit\""},
	LastFailedVisit:       whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"last_failed_visit\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"sessions_closed_2022_10\".\"created_at\""},
	MinDuration:           whereHelperstring{field: "\"sessions_closed_2022_10\".\"min_duration\""},
	MaxDuration:           whereHelperstring{field: "\"sessions_closed_2022_10\".\"max_duration\""},
	SuccessfulVisitsCount: whereHelperint{field: "\"sessions_closed_2022_10\".\"successful_visits_count\""},
	State:                 whereHelperstring{field: "\"sessions_closed_2022_10\".\"state\""},
	FailedVisitsCount:     whereHelperint16{field: "\"sessions_closed_2022_10\".\"failed_visits_count\""},
	RecoveredCount:        whereHelperint{field: "\"sessions_closed_2022_10\".\"recovered_count\""},
	FinishReason:          whereHelperstring{field: "\"sessions_closed_2022_10\".\"finish_reason\""},
}

// SessionsClosed202210Rels is where relationship names are stored.
var SessionsClosed202210Rels = struct {
	Peer string
}{
	Peer: "Peer",
}

// sessionsClosed202210R is where relationships are stored.
type sessionsClosed202210R struct {
	Peer *Peer `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
}

// NewStruct creates a new relationship struct
func (*sessionsClosed202210R) NewStruct() *sessionsClosed202210R {
	return &sessionsClosed202210R{}
}

func (r *sessionsClosed202210R) GetPeer() *Peer {
	if r == nil {
		return nil
	}
	return r.Peer
}

// sessionsClosed202210L is where Load methods for each relationship are stored.
type sessionsClosed202210L struct{}

var (
	sessionsClosed202210AllColumns            = []string{"id", "peer_id", "first_successful_visit", "last_successful_visit", "next_visit_attempt_at", "first_failed_visit", "last_failed_visit", "updated_at", "created_at", "min_duration", "max_duration", "successful_visits_count", "state", "failed_visits_count", "recovered_count", "finish_reason"}
	sessionsClosed202210ColumnsWithoutDefault = []string{"id", "peer_id", "first_successful_visit", "last_successful_visit", "first_failed_visit", "last_failed_visit", "updated_at", "created_at", "min_duration", "max_duration", "successful_visits_count", "state", "failed_visits_count", "recovered_count", "finish_reason"}
	sessionsClosed202210ColumnsWithDefault    = []string{"next_visit_attempt_at"}
	sessionsClosed202210PrimaryKeyColumns     = []string{"id", "state", "last_failed_visit"}
	sessionsClosed202210GeneratedColumns      = []string{}
)

type (
	// SessionsClosed202210Slice is an alias for a slice of pointers to SessionsClosed202210.
	// This should almost always be used instead of []SessionsClosed202210.
	SessionsClosed202210Slice []*SessionsClosed202210
	// SessionsClosed202210Hook is the signature for custom SessionsClosed202210 hook methods
	SessionsClosed202210Hook func(context.Context, boil.ContextExecutor, *SessionsClosed202210) error

	sessionsClosed202210Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sessionsClosed202210Type                 = reflect.TypeOf(&SessionsClosed202210{})
	sessionsClosed202210Mapping              = queries.MakeStructMapping(sessionsClosed202210Type)
	sessionsClosed202210PrimaryKeyMapping, _ = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, sessionsClosed202210PrimaryKeyColumns)
	sessionsClosed202210InsertCacheMut       sync.RWMutex
	sessionsClosed202210InsertCache          = make(map[string]insertCache)
	sessionsClosed202210UpdateCacheMut       sync.RWMutex
	sessionsClosed202210UpdateCache          = make(map[string]updateCache)
	sessionsClosed202210UpsertCacheMut       sync.RWMutex
	sessionsClosed202210UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sessionsClosed202210AfterSelectHooks []SessionsClosed202210Hook

var sessionsClosed202210BeforeInsertHooks []SessionsClosed202210Hook
var sessionsClosed202210AfterInsertHooks []SessionsClosed202210Hook

var sessionsClosed202210BeforeUpdateHooks []SessionsClosed202210Hook
var sessionsClosed202210AfterUpdateHooks []SessionsClosed202210Hook

var sessionsClosed202210BeforeDeleteHooks []SessionsClosed202210Hook
var sessionsClosed202210AfterDeleteHooks []SessionsClosed202210Hook

var sessionsClosed202210BeforeUpsertHooks []SessionsClosed202210Hook
var sessionsClosed202210AfterUpsertHooks []SessionsClosed202210Hook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SessionsClosed202210) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SessionsClosed202210) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SessionsClosed202210) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SessionsClosed202210) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SessionsClosed202210) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SessionsClosed202210) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SessionsClosed202210) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SessionsClosed202210) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SessionsClosed202210) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sessionsClosed202210AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSessionsClosed202210Hook registers your hook function for all future operations.
func AddSessionsClosed202210Hook(hookPoint boil.HookPoint, sessionsClosed202210Hook SessionsClosed202210Hook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sessionsClosed202210AfterSelectHooks = append(sessionsClosed202210AfterSelectHooks, sessionsClosed202210Hook)
	case boil.BeforeInsertHook:
		sessionsClosed202210BeforeInsertHooks = append(sessionsClosed202210BeforeInsertHooks, sessionsClosed202210Hook)
	case boil.AfterInsertHook:
		sessionsClosed202210AfterInsertHooks = append(sessionsClosed202210AfterInsertHooks, sessionsClosed202210Hook)
	case boil.BeforeUpdateHook:
		sessionsClosed202210BeforeUpdateHooks = append(sessionsClosed202210BeforeUpdateHooks, sessionsClosed202210Hook)
	case boil.AfterUpdateHook:
		sessionsClosed202210AfterUpdateHooks = append(sessionsClosed202210AfterUpdateHooks, sessionsClosed202210Hook)
	case boil.BeforeDeleteHook:
		sessionsClosed202210BeforeDeleteHooks = append(sessionsClosed202210BeforeDeleteHooks, sessionsClosed202210Hook)
	case boil.AfterDeleteHook:
		sessionsClosed202210AfterDeleteHooks = append(sessionsClosed202210AfterDeleteHooks, sessionsClosed202210Hook)
	case boil.BeforeUpsertHook:
		sessionsClosed202210BeforeUpsertHooks = append(sessionsClosed202210BeforeUpsertHooks, sessionsClosed202210Hook)
	case boil.AfterUpsertHook:
		sessionsClosed202210AfterUpsertHooks = append(sessionsClosed202210AfterUpsertHooks, sessionsClosed202210Hook)
	}
}

// One returns a single sessionsClosed202210 record from the query.
func (q sessionsClosed202210Query) One(ctx context.Context, exec boil.ContextExecutor) (*SessionsClosed202210, error) {
	o := &SessionsClosed202210{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sessions_closed_2022_10")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SessionsClosed202210 records from the query.
func (q sessionsClosed202210Query) All(ctx context.Context, exec boil.ContextExecutor) (SessionsClosed202210Slice, error) {
	var o []*SessionsClosed202210

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SessionsClosed202210 slice")
	}

	if len(sessionsClosed202210AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SessionsClosed202210 records in the query.
func (q sessionsClosed202210Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sessions_closed_2022_10 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sessionsClosed202210Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sessions_closed_2022_10 exists")
	}

	return count > 0, nil
}

// Peer pointed to by the foreign key.
func (o *SessionsClosed202210) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	return Peers(queryMods...)
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sessionsClosed202210L) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSessionsClosed202210 interface{}, mods queries.Applicator) error {
	var slice []*SessionsClosed202210
	var object *SessionsClosed202210

	if singular {
		var ok bool
		object, ok = maybeSessionsClosed202210.(*SessionsClosed202210)
		if !ok {
			object = new(SessionsClosed202210)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSessionsClosed202210)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSessionsClosed202210))
			}
		}
	} else {
		s, ok := maybeSessionsClosed202210.(*[]*SessionsClosed202210)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSessionsClosed202210)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSessionsClosed202210))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sessionsClosed202210R{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sessionsClosed202210R{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(sessionsClosed202210AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.SessionsClosed202210S = append(foreign.R.SessionsClosed202210S, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.SessionsClosed202210S = append(foreign.R.SessionsClosed202210S, local)
				break
			}
		}
	}

	return nil
}

// SetPeer of the sessionsClosed202210 to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.SessionsClosed202210S.
func (o *SessionsClosed202210) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sessions_closed_2022_10\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, sessionsClosed202210PrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.State, o.LastFailedVisit}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &sessionsClosed202210R{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			SessionsClosed202210S: SessionsClosed202210Slice{o},
		}
	} else {
		related.R.SessionsClosed202210S = append(related.R.SessionsClosed202210S, o)
	}

	return nil
}

// SessionsClosed202210S retrieves all the records using an executor.
func SessionsClosed202210S(mods ...qm.QueryMod) sessionsClosed202210Query {
	mods = append(mods, qm.From("\"sessions_closed_2022_10\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sessions_closed_2022_10\".*"})
	}

	return sessionsClosed202210Query{q}
}

// FindSessionsClosed202210 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSessionsClosed202210(ctx context.Context, exec boil.ContextExecutor, iD int, state string, lastFailedVisit time.Time, selectCols ...string) (*SessionsClosed202210, error) {
	sessionsClosed202210Obj := &SessionsClosed202210{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sessions_closed_2022_10\" where \"id\"=$1 AND \"state\"=$2 AND \"last_failed_visit\"=$3", sel,
	)

	q := queries.Raw(query, iD, state, lastFailedVisit)

	err := q.Bind(ctx, exec, sessionsClosed202210Obj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sessions_closed_2022_10")
	}

	if err = sessionsClosed202210Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return sessionsClosed202210Obj, err
	}

	return sessionsClosed202210Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SessionsClosed202210) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sessions_closed_2022_10 provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sessionsClosed202210ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sessionsClosed202210InsertCacheMut.RLock()
	cache, cached := sessionsClosed202210InsertCache[key]
	sessionsClosed202210InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sessionsClosed202210AllColumns,
			sessionsClosed202210ColumnsWithDefault,
			sessionsClosed202210ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sessions_closed_2022_10\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sessions_closed_2022_10\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sessions_closed_2022_10")
	}

	if !cached {
		sessionsClosed202210InsertCacheMut.Lock()
		sessionsClosed202210InsertCache[key] = cache
		sessionsClosed202210InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SessionsClosed202210.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SessionsClosed202210) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sessionsClosed202210UpdateCacheMut.RLock()
	cache, cached := sessionsClosed202210UpdateCache[key]
	sessionsClosed202210UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sessionsClosed202210AllColumns,
			sessionsClosed202210PrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sessions_closed_2022_10, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sessions_closed_2022_10\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sessionsClosed202210PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, append(wl, sessionsClosed202210PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sessions_closed_2022_10 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sessions_closed_2022_10")
	}

	if !cached {
		sessionsClosed202210UpdateCacheMut.Lock()
		sessionsClosed202210UpdateCache[key] = cache
		sessionsClosed202210UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sessionsClosed202210Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sessions_closed_2022_10")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sessions_closed_2022_10")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SessionsClosed202210Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sessionsClosed202210PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sessions_closed_2022_10\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sessionsClosed202210PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sessionsClosed202210 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sessionsClosed202210")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SessionsClosed202210) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sessions_closed_2022_10 provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sessionsClosed202210ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sessionsClosed202210UpsertCacheMut.RLock()
	cache, cached := sessionsClosed202210UpsertCache[key]
	sessionsClosed202210UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sessionsClosed202210AllColumns,
			sessionsClosed202210ColumnsWithDefault,
			sessionsClosed202210ColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sessionsClosed202210AllColumns,
			sessionsClosed202210PrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sessions_closed_2022_10, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sessionsClosed202210PrimaryKeyColumns))
			copy(conflict, sessionsClosed202210PrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sessions_closed_2022_10\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sessionsClosed202210Type, sessionsClosed202210Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sessions_closed_2022_10")
	}

	if !cached {
		sessionsClosed202210UpsertCacheMut.Lock()
		sessionsClosed202210UpsertCache[key] = cache
		sessionsClosed202210UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SessionsClosed202210 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SessionsClosed202210) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SessionsClosed202210 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sessionsClosed202210PrimaryKeyMapping)
	sql := "DELETE FROM \"sessions_closed_2022_10\" WHERE \"id\"=$1 AND \"state\"=$2 AND \"last_failed_visit\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sessions_closed_2022_10")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sessions_closed_2022_10")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sessionsClosed202210Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sessionsClosed202210Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sessions_closed_2022_10")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sessions_closed_2022_10")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SessionsClosed202210Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sessionsClosed202210BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sessionsClosed202210PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sessions_closed_2022_10\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sessionsClosed202210PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sessionsClosed202210 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sessions_closed_2022_10")
	}

	if len(sessionsClosed202210AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SessionsClosed202210) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSessionsClosed202210(ctx, exec, o.ID, o.State, o.LastFailedVisit)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SessionsClosed202210Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SessionsClosed202210Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sessionsClosed202210PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sessions_closed_2022_10\".* FROM \"sessions_closed_2022_10\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sessionsClosed202210PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SessionsClosed202210Slice")
	}

	*o = slice

	return nil
}

// SessionsClosed202210Exists checks if the SessionsClosed202210 row exists.
func SessionsClosed202210Exists(ctx context.Context, exec boil.ContextExecutor, iD int, state string, lastFailedVisit time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sessions_closed_2022_10\" where \"id\"=$1 AND \"state\"=$2 AND \"last_failed_visit\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, state, lastFailedVisit)
	}
	row := exec.QueryRowContext(ctx, sql, iD, state, lastFailedVisit)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sessions_closed_2022_10 exists")
	}

	return exists, nil
}
