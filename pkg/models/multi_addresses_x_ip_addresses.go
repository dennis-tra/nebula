// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MultiAddressesXIPAddress is an object representing the database table.
type MultiAddressesXIPAddress struct {
	MultiAddressID int       `boil:"multi_address_id" json:"multi_address_id" toml:"multi_address_id" yaml:"multi_address_id"`
	IPAddressID    int       `boil:"ip_address_id" json:"ip_address_id" toml:"ip_address_id" yaml:"ip_address_id"`
	ResolvedAt     time.Time `boil:"resolved_at" json:"resolved_at" toml:"resolved_at" yaml:"resolved_at"`

	R *multiAddressesXIPAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L multiAddressesXIPAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MultiAddressesXIPAddressColumns = struct {
	MultiAddressID string
	IPAddressID    string
	ResolvedAt     string
}{
	MultiAddressID: "multi_address_id",
	IPAddressID:    "ip_address_id",
	ResolvedAt:     "resolved_at",
}

var MultiAddressesXIPAddressTableColumns = struct {
	MultiAddressID string
	IPAddressID    string
	ResolvedAt     string
}{
	MultiAddressID: "multi_addresses_x_ip_addresses.multi_address_id",
	IPAddressID:    "multi_addresses_x_ip_addresses.ip_address_id",
	ResolvedAt:     "multi_addresses_x_ip_addresses.resolved_at",
}

// Generated where

var MultiAddressesXIPAddressWhere = struct {
	MultiAddressID whereHelperint
	IPAddressID    whereHelperint
	ResolvedAt     whereHelpertime_Time
}{
	MultiAddressID: whereHelperint{field: "\"multi_addresses_x_ip_addresses\".\"multi_address_id\""},
	IPAddressID:    whereHelperint{field: "\"multi_addresses_x_ip_addresses\".\"ip_address_id\""},
	ResolvedAt:     whereHelpertime_Time{field: "\"multi_addresses_x_ip_addresses\".\"resolved_at\""},
}

// MultiAddressesXIPAddressRels is where relationship names are stored.
var MultiAddressesXIPAddressRels = struct {
	IPAddress    string
	MultiAddress string
}{
	IPAddress:    "IPAddress",
	MultiAddress: "MultiAddress",
}

// multiAddressesXIPAddressR is where relationships are stored.
type multiAddressesXIPAddressR struct {
	IPAddress    *IPAddress    `boil:"IPAddress" json:"IPAddress" toml:"IPAddress" yaml:"IPAddress"`
	MultiAddress *MultiAddress `boil:"MultiAddress" json:"MultiAddress" toml:"MultiAddress" yaml:"MultiAddress"`
}

// NewStruct creates a new relationship struct
func (*multiAddressesXIPAddressR) NewStruct() *multiAddressesXIPAddressR {
	return &multiAddressesXIPAddressR{}
}

// multiAddressesXIPAddressL is where Load methods for each relationship are stored.
type multiAddressesXIPAddressL struct{}

var (
	multiAddressesXIPAddressAllColumns            = []string{"multi_address_id", "ip_address_id", "resolved_at"}
	multiAddressesXIPAddressColumnsWithoutDefault = []string{"resolved_at"}
	multiAddressesXIPAddressColumnsWithDefault    = []string{"multi_address_id", "ip_address_id"}
	multiAddressesXIPAddressPrimaryKeyColumns     = []string{"multi_address_id", "ip_address_id", "resolved_at"}
)

type (
	// MultiAddressesXIPAddressSlice is an alias for a slice of pointers to MultiAddressesXIPAddress.
	// This should almost always be used instead of []MultiAddressesXIPAddress.
	MultiAddressesXIPAddressSlice []*MultiAddressesXIPAddress
	// MultiAddressesXIPAddressHook is the signature for custom MultiAddressesXIPAddress hook methods
	MultiAddressesXIPAddressHook func(context.Context, boil.ContextExecutor, *MultiAddressesXIPAddress) error

	multiAddressesXIPAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	multiAddressesXIPAddressType                 = reflect.TypeOf(&MultiAddressesXIPAddress{})
	multiAddressesXIPAddressMapping              = queries.MakeStructMapping(multiAddressesXIPAddressType)
	multiAddressesXIPAddressPrimaryKeyMapping, _ = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, multiAddressesXIPAddressPrimaryKeyColumns)
	multiAddressesXIPAddressInsertCacheMut       sync.RWMutex
	multiAddressesXIPAddressInsertCache          = make(map[string]insertCache)
	multiAddressesXIPAddressUpdateCacheMut       sync.RWMutex
	multiAddressesXIPAddressUpdateCache          = make(map[string]updateCache)
	multiAddressesXIPAddressUpsertCacheMut       sync.RWMutex
	multiAddressesXIPAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var multiAddressesXIPAddressBeforeInsertHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressBeforeUpdateHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressBeforeDeleteHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressBeforeUpsertHooks []MultiAddressesXIPAddressHook

var multiAddressesXIPAddressAfterInsertHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressAfterSelectHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressAfterUpdateHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressAfterDeleteHooks []MultiAddressesXIPAddressHook
var multiAddressesXIPAddressAfterUpsertHooks []MultiAddressesXIPAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MultiAddressesXIPAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MultiAddressesXIPAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MultiAddressesXIPAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MultiAddressesXIPAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MultiAddressesXIPAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MultiAddressesXIPAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MultiAddressesXIPAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MultiAddressesXIPAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MultiAddressesXIPAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesXIPAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMultiAddressesXIPAddressHook registers your hook function for all future operations.
func AddMultiAddressesXIPAddressHook(hookPoint boil.HookPoint, multiAddressesXIPAddressHook MultiAddressesXIPAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		multiAddressesXIPAddressBeforeInsertHooks = append(multiAddressesXIPAddressBeforeInsertHooks, multiAddressesXIPAddressHook)
	case boil.BeforeUpdateHook:
		multiAddressesXIPAddressBeforeUpdateHooks = append(multiAddressesXIPAddressBeforeUpdateHooks, multiAddressesXIPAddressHook)
	case boil.BeforeDeleteHook:
		multiAddressesXIPAddressBeforeDeleteHooks = append(multiAddressesXIPAddressBeforeDeleteHooks, multiAddressesXIPAddressHook)
	case boil.BeforeUpsertHook:
		multiAddressesXIPAddressBeforeUpsertHooks = append(multiAddressesXIPAddressBeforeUpsertHooks, multiAddressesXIPAddressHook)
	case boil.AfterInsertHook:
		multiAddressesXIPAddressAfterInsertHooks = append(multiAddressesXIPAddressAfterInsertHooks, multiAddressesXIPAddressHook)
	case boil.AfterSelectHook:
		multiAddressesXIPAddressAfterSelectHooks = append(multiAddressesXIPAddressAfterSelectHooks, multiAddressesXIPAddressHook)
	case boil.AfterUpdateHook:
		multiAddressesXIPAddressAfterUpdateHooks = append(multiAddressesXIPAddressAfterUpdateHooks, multiAddressesXIPAddressHook)
	case boil.AfterDeleteHook:
		multiAddressesXIPAddressAfterDeleteHooks = append(multiAddressesXIPAddressAfterDeleteHooks, multiAddressesXIPAddressHook)
	case boil.AfterUpsertHook:
		multiAddressesXIPAddressAfterUpsertHooks = append(multiAddressesXIPAddressAfterUpsertHooks, multiAddressesXIPAddressHook)
	}
}

// One returns a single multiAddressesXIPAddress record from the query.
func (q multiAddressesXIPAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MultiAddressesXIPAddress, error) {
	o := &MultiAddressesXIPAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for multi_addresses_x_ip_addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MultiAddressesXIPAddress records from the query.
func (q multiAddressesXIPAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (MultiAddressesXIPAddressSlice, error) {
	var o []*MultiAddressesXIPAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MultiAddressesXIPAddress slice")
	}

	if len(multiAddressesXIPAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MultiAddressesXIPAddress records in the query.
func (q multiAddressesXIPAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count multi_addresses_x_ip_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q multiAddressesXIPAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if multi_addresses_x_ip_addresses exists")
	}

	return count > 0, nil
}

// IPAddress pointed to by the foreign key.
func (o *MultiAddressesXIPAddress) IPAddress(mods ...qm.QueryMod) ipAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IPAddressID),
	}

	queryMods = append(queryMods, mods...)

	query := IPAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"ip_addresses\"")

	return query
}

// MultiAddress pointed to by the foreign key.
func (o *MultiAddressesXIPAddress) MultiAddress(mods ...qm.QueryMod) multiAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiAddressID),
	}

	queryMods = append(queryMods, mods...)

	query := MultiAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"multi_addresses\"")

	return query
}

// LoadIPAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (multiAddressesXIPAddressL) LoadIPAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMultiAddressesXIPAddress interface{}, mods queries.Applicator) error {
	var slice []*MultiAddressesXIPAddress
	var object *MultiAddressesXIPAddress

	if singular {
		object = maybeMultiAddressesXIPAddress.(*MultiAddressesXIPAddress)
	} else {
		slice = *maybeMultiAddressesXIPAddress.(*[]*MultiAddressesXIPAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &multiAddressesXIPAddressR{}
		}
		args = append(args, object.IPAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &multiAddressesXIPAddressR{}
			}

			for _, a := range args {
				if a == obj.IPAddressID {
					continue Outer
				}
			}

			args = append(args, obj.IPAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ip_addresses`),
		qm.WhereIn(`ip_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IPAddress")
	}

	var resultSlice []*IPAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IPAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ip_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ip_addresses")
	}

	if len(multiAddressesXIPAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IPAddress = foreign
		if foreign.R == nil {
			foreign.R = &ipAddressR{}
		}
		foreign.R.MultiAddressesXIPAddresses = append(foreign.R.MultiAddressesXIPAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IPAddressID == foreign.ID {
				local.R.IPAddress = foreign
				if foreign.R == nil {
					foreign.R = &ipAddressR{}
				}
				foreign.R.MultiAddressesXIPAddresses = append(foreign.R.MultiAddressesXIPAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (multiAddressesXIPAddressL) LoadMultiAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMultiAddressesXIPAddress interface{}, mods queries.Applicator) error {
	var slice []*MultiAddressesXIPAddress
	var object *MultiAddressesXIPAddress

	if singular {
		object = maybeMultiAddressesXIPAddress.(*MultiAddressesXIPAddress)
	} else {
		slice = *maybeMultiAddressesXIPAddress.(*[]*MultiAddressesXIPAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &multiAddressesXIPAddressR{}
		}
		args = append(args, object.MultiAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &multiAddressesXIPAddressR{}
			}

			for _, a := range args {
				if a == obj.MultiAddressID {
					continue Outer
				}
			}

			args = append(args, obj.MultiAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses`),
		qm.WhereIn(`multi_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddress")
	}

	var resultSlice []*MultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(multiAddressesXIPAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultiAddress = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressR{}
		}
		foreign.R.MultiAddressesXIPAddresses = append(foreign.R.MultiAddressesXIPAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiAddressID == foreign.ID {
				local.R.MultiAddress = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.MultiAddressesXIPAddresses = append(foreign.R.MultiAddressesXIPAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetIPAddress of the multiAddressesXIPAddress to the related item.
// Sets o.R.IPAddress to related.
// Adds o to related.R.MultiAddressesXIPAddresses.
func (o *MultiAddressesXIPAddress) SetIPAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *IPAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"multi_addresses_x_ip_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ip_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, multiAddressesXIPAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MultiAddressID, o.IPAddressID, o.ResolvedAt}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IPAddressID = related.ID
	if o.R == nil {
		o.R = &multiAddressesXIPAddressR{
			IPAddress: related,
		}
	} else {
		o.R.IPAddress = related
	}

	if related.R == nil {
		related.R = &ipAddressR{
			MultiAddressesXIPAddresses: MultiAddressesXIPAddressSlice{o},
		}
	} else {
		related.R.MultiAddressesXIPAddresses = append(related.R.MultiAddressesXIPAddresses, o)
	}

	return nil
}

// SetMultiAddress of the multiAddressesXIPAddress to the related item.
// Sets o.R.MultiAddress to related.
// Adds o to related.R.MultiAddressesXIPAddresses.
func (o *MultiAddressesXIPAddress) SetMultiAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"multi_addresses_x_ip_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, multiAddressesXIPAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MultiAddressID, o.IPAddressID, o.ResolvedAt}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiAddressID = related.ID
	if o.R == nil {
		o.R = &multiAddressesXIPAddressR{
			MultiAddress: related,
		}
	} else {
		o.R.MultiAddress = related
	}

	if related.R == nil {
		related.R = &multiAddressR{
			MultiAddressesXIPAddresses: MultiAddressesXIPAddressSlice{o},
		}
	} else {
		related.R.MultiAddressesXIPAddresses = append(related.R.MultiAddressesXIPAddresses, o)
	}

	return nil
}

// MultiAddressesXIPAddresses retrieves all the records using an executor.
func MultiAddressesXIPAddresses(mods ...qm.QueryMod) multiAddressesXIPAddressQuery {
	mods = append(mods, qm.From("\"multi_addresses_x_ip_addresses\""))
	return multiAddressesXIPAddressQuery{NewQuery(mods...)}
}

// FindMultiAddressesXIPAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMultiAddressesXIPAddress(ctx context.Context, exec boil.ContextExecutor, multiAddressID int, iPAddressID int, resolvedAt time.Time, selectCols ...string) (*MultiAddressesXIPAddress, error) {
	multiAddressesXIPAddressObj := &MultiAddressesXIPAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"multi_addresses_x_ip_addresses\" where \"multi_address_id\"=$1 AND \"ip_address_id\"=$2 AND \"resolved_at\"=$3", sel,
	)

	q := queries.Raw(query, multiAddressID, iPAddressID, resolvedAt)

	err := q.Bind(ctx, exec, multiAddressesXIPAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from multi_addresses_x_ip_addresses")
	}

	if err = multiAddressesXIPAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return multiAddressesXIPAddressObj, err
	}

	return multiAddressesXIPAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MultiAddressesXIPAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses_x_ip_addresses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressesXIPAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	multiAddressesXIPAddressInsertCacheMut.RLock()
	cache, cached := multiAddressesXIPAddressInsertCache[key]
	multiAddressesXIPAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			multiAddressesXIPAddressAllColumns,
			multiAddressesXIPAddressColumnsWithDefault,
			multiAddressesXIPAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"multi_addresses_x_ip_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"multi_addresses_x_ip_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into multi_addresses_x_ip_addresses")
	}

	if !cached {
		multiAddressesXIPAddressInsertCacheMut.Lock()
		multiAddressesXIPAddressInsertCache[key] = cache
		multiAddressesXIPAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MultiAddressesXIPAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MultiAddressesXIPAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	multiAddressesXIPAddressUpdateCacheMut.RLock()
	cache, cached := multiAddressesXIPAddressUpdateCache[key]
	multiAddressesXIPAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			multiAddressesXIPAddressAllColumns,
			multiAddressesXIPAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update multi_addresses_x_ip_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"multi_addresses_x_ip_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, multiAddressesXIPAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, append(wl, multiAddressesXIPAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update multi_addresses_x_ip_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for multi_addresses_x_ip_addresses")
	}

	if !cached {
		multiAddressesXIPAddressUpdateCacheMut.Lock()
		multiAddressesXIPAddressUpdateCache[key] = cache
		multiAddressesXIPAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q multiAddressesXIPAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for multi_addresses_x_ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for multi_addresses_x_ip_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MultiAddressesXIPAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesXIPAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"multi_addresses_x_ip_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, multiAddressesXIPAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in multiAddressesXIPAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all multiAddressesXIPAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MultiAddressesXIPAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses_x_ip_addresses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressesXIPAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	multiAddressesXIPAddressUpsertCacheMut.RLock()
	cache, cached := multiAddressesXIPAddressUpsertCache[key]
	multiAddressesXIPAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			multiAddressesXIPAddressAllColumns,
			multiAddressesXIPAddressColumnsWithDefault,
			multiAddressesXIPAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			multiAddressesXIPAddressAllColumns,
			multiAddressesXIPAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert multi_addresses_x_ip_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(multiAddressesXIPAddressPrimaryKeyColumns))
			copy(conflict, multiAddressesXIPAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"multi_addresses_x_ip_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(multiAddressesXIPAddressType, multiAddressesXIPAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert multi_addresses_x_ip_addresses")
	}

	if !cached {
		multiAddressesXIPAddressUpsertCacheMut.Lock()
		multiAddressesXIPAddressUpsertCache[key] = cache
		multiAddressesXIPAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MultiAddressesXIPAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MultiAddressesXIPAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MultiAddressesXIPAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), multiAddressesXIPAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"multi_addresses_x_ip_addresses\" WHERE \"multi_address_id\"=$1 AND \"ip_address_id\"=$2 AND \"resolved_at\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from multi_addresses_x_ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for multi_addresses_x_ip_addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q multiAddressesXIPAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no multiAddressesXIPAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multi_addresses_x_ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses_x_ip_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MultiAddressesXIPAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(multiAddressesXIPAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesXIPAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"multi_addresses_x_ip_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressesXIPAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multiAddressesXIPAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses_x_ip_addresses")
	}

	if len(multiAddressesXIPAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MultiAddressesXIPAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMultiAddressesXIPAddress(ctx, exec, o.MultiAddressID, o.IPAddressID, o.ResolvedAt)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MultiAddressesXIPAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MultiAddressesXIPAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesXIPAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"multi_addresses_x_ip_addresses\".* FROM \"multi_addresses_x_ip_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressesXIPAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MultiAddressesXIPAddressSlice")
	}

	*o = slice

	return nil
}

// MultiAddressesXIPAddressExists checks if the MultiAddressesXIPAddress row exists.
func MultiAddressesXIPAddressExists(ctx context.Context, exec boil.ContextExecutor, multiAddressID int, iPAddressID int, resolvedAt time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"multi_addresses_x_ip_addresses\" where \"multi_address_id\"=$1 AND \"ip_address_id\"=$2 AND \"resolved_at\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, multiAddressID, iPAddressID, resolvedAt)
	}
	row := exec.QueryRowContext(ctx, sql, multiAddressID, iPAddressID, resolvedAt)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if multi_addresses_x_ip_addresses exists")
	}

	return exists, nil
}
