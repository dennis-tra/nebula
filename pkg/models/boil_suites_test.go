// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CrawlProperties", testCrawlProperties)
	t.Run("Crawls", testCrawls)
	t.Run("Latencies", testLatencies)
	t.Run("MultiAddresses", testMultiAddresses)
	t.Run("Neighbors", testNeighbors)
	t.Run("Peers", testPeers)
	t.Run("PegasysConnections", testPegasysConnections)
	t.Run("PegasysNeighbours", testPegasysNeighbours)
	t.Run("Properties", testProperties)
	t.Run("RawVisits", testRawVisits)
	t.Run("Sessions", testSessions)
	t.Run("Visits", testVisits)
}

func TestDelete(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesDelete)
	t.Run("Crawls", testCrawlsDelete)
	t.Run("Latencies", testLatenciesDelete)
	t.Run("MultiAddresses", testMultiAddressesDelete)
	t.Run("Neighbors", testNeighborsDelete)
	t.Run("Peers", testPeersDelete)
	t.Run("PegasysConnections", testPegasysConnectionsDelete)
	t.Run("PegasysNeighbours", testPegasysNeighboursDelete)
	t.Run("Properties", testPropertiesDelete)
	t.Run("RawVisits", testRawVisitsDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Visits", testVisitsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesQueryDeleteAll)
	t.Run("Crawls", testCrawlsQueryDeleteAll)
	t.Run("Latencies", testLatenciesQueryDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesQueryDeleteAll)
	t.Run("Neighbors", testNeighborsQueryDeleteAll)
	t.Run("Peers", testPeersQueryDeleteAll)
	t.Run("PegasysConnections", testPegasysConnectionsQueryDeleteAll)
	t.Run("PegasysNeighbours", testPegasysNeighboursQueryDeleteAll)
	t.Run("Properties", testPropertiesQueryDeleteAll)
	t.Run("RawVisits", testRawVisitsQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Visits", testVisitsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesSliceDeleteAll)
	t.Run("Crawls", testCrawlsSliceDeleteAll)
	t.Run("Latencies", testLatenciesSliceDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesSliceDeleteAll)
	t.Run("Neighbors", testNeighborsSliceDeleteAll)
	t.Run("Peers", testPeersSliceDeleteAll)
	t.Run("PegasysConnections", testPegasysConnectionsSliceDeleteAll)
	t.Run("PegasysNeighbours", testPegasysNeighboursSliceDeleteAll)
	t.Run("Properties", testPropertiesSliceDeleteAll)
	t.Run("RawVisits", testRawVisitsSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Visits", testVisitsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesExists)
	t.Run("Crawls", testCrawlsExists)
	t.Run("Latencies", testLatenciesExists)
	t.Run("MultiAddresses", testMultiAddressesExists)
	t.Run("Neighbors", testNeighborsExists)
	t.Run("Peers", testPeersExists)
	t.Run("PegasysConnections", testPegasysConnectionsExists)
	t.Run("PegasysNeighbours", testPegasysNeighboursExists)
	t.Run("Properties", testPropertiesExists)
	t.Run("RawVisits", testRawVisitsExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Visits", testVisitsExists)
}

func TestFind(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesFind)
	t.Run("Crawls", testCrawlsFind)
	t.Run("Latencies", testLatenciesFind)
	t.Run("MultiAddresses", testMultiAddressesFind)
	t.Run("Neighbors", testNeighborsFind)
	t.Run("Peers", testPeersFind)
	t.Run("PegasysConnections", testPegasysConnectionsFind)
	t.Run("PegasysNeighbours", testPegasysNeighboursFind)
	t.Run("Properties", testPropertiesFind)
	t.Run("RawVisits", testRawVisitsFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Visits", testVisitsFind)
}

func TestBind(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesBind)
	t.Run("Crawls", testCrawlsBind)
	t.Run("Latencies", testLatenciesBind)
	t.Run("MultiAddresses", testMultiAddressesBind)
	t.Run("Neighbors", testNeighborsBind)
	t.Run("Peers", testPeersBind)
	t.Run("PegasysConnections", testPegasysConnectionsBind)
	t.Run("PegasysNeighbours", testPegasysNeighboursBind)
	t.Run("Properties", testPropertiesBind)
	t.Run("RawVisits", testRawVisitsBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Visits", testVisitsBind)
}

func TestOne(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesOne)
	t.Run("Crawls", testCrawlsOne)
	t.Run("Latencies", testLatenciesOne)
	t.Run("MultiAddresses", testMultiAddressesOne)
	t.Run("Neighbors", testNeighborsOne)
	t.Run("Peers", testPeersOne)
	t.Run("PegasysConnections", testPegasysConnectionsOne)
	t.Run("PegasysNeighbours", testPegasysNeighboursOne)
	t.Run("Properties", testPropertiesOne)
	t.Run("RawVisits", testRawVisitsOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Visits", testVisitsOne)
}

func TestAll(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesAll)
	t.Run("Crawls", testCrawlsAll)
	t.Run("Latencies", testLatenciesAll)
	t.Run("MultiAddresses", testMultiAddressesAll)
	t.Run("Neighbors", testNeighborsAll)
	t.Run("Peers", testPeersAll)
	t.Run("PegasysConnections", testPegasysConnectionsAll)
	t.Run("PegasysNeighbours", testPegasysNeighboursAll)
	t.Run("Properties", testPropertiesAll)
	t.Run("RawVisits", testRawVisitsAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Visits", testVisitsAll)
}

func TestCount(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesCount)
	t.Run("Crawls", testCrawlsCount)
	t.Run("Latencies", testLatenciesCount)
	t.Run("MultiAddresses", testMultiAddressesCount)
	t.Run("Neighbors", testNeighborsCount)
	t.Run("Peers", testPeersCount)
	t.Run("PegasysConnections", testPegasysConnectionsCount)
	t.Run("PegasysNeighbours", testPegasysNeighboursCount)
	t.Run("Properties", testPropertiesCount)
	t.Run("RawVisits", testRawVisitsCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Visits", testVisitsCount)
}

func TestHooks(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesHooks)
	t.Run("Crawls", testCrawlsHooks)
	t.Run("Latencies", testLatenciesHooks)
	t.Run("MultiAddresses", testMultiAddressesHooks)
	t.Run("Neighbors", testNeighborsHooks)
	t.Run("Peers", testPeersHooks)
	t.Run("PegasysConnections", testPegasysConnectionsHooks)
	t.Run("PegasysNeighbours", testPegasysNeighboursHooks)
	t.Run("Properties", testPropertiesHooks)
	t.Run("RawVisits", testRawVisitsHooks)
	t.Run("Sessions", testSessionsHooks)
	t.Run("Visits", testVisitsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesInsert)
	t.Run("CrawlProperties", testCrawlPropertiesInsertWhitelist)
	t.Run("Crawls", testCrawlsInsert)
	t.Run("Crawls", testCrawlsInsertWhitelist)
	t.Run("Latencies", testLatenciesInsert)
	t.Run("Latencies", testLatenciesInsertWhitelist)
	t.Run("MultiAddresses", testMultiAddressesInsert)
	t.Run("MultiAddresses", testMultiAddressesInsertWhitelist)
	t.Run("Neighbors", testNeighborsInsert)
	t.Run("Neighbors", testNeighborsInsertWhitelist)
	t.Run("Peers", testPeersInsert)
	t.Run("Peers", testPeersInsertWhitelist)
	t.Run("PegasysConnections", testPegasysConnectionsInsert)
	t.Run("PegasysConnections", testPegasysConnectionsInsertWhitelist)
	t.Run("PegasysNeighbours", testPegasysNeighboursInsert)
	t.Run("PegasysNeighbours", testPegasysNeighboursInsertWhitelist)
	t.Run("Properties", testPropertiesInsert)
	t.Run("Properties", testPropertiesInsertWhitelist)
	t.Run("RawVisits", testRawVisitsInsert)
	t.Run("RawVisits", testRawVisitsInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Visits", testVisitsInsert)
	t.Run("Visits", testVisitsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CrawlPropertyToPropertyUsingProperty", testCrawlPropertyToOnePropertyUsingProperty)
	t.Run("CrawlPropertyToCrawlUsingCrawl", testCrawlPropertyToOneCrawlUsingCrawl)
	t.Run("LatencyToPeerUsingPeer", testLatencyToOnePeerUsingPeer)
	t.Run("NeighborToCrawlUsingCrawl", testNeighborToOneCrawlUsingCrawl)
	t.Run("NeighborToPeerUsingNeighbor", testNeighborToOnePeerUsingNeighbor)
	t.Run("NeighborToPeerUsingPeer", testNeighborToOnePeerUsingPeer)
	t.Run("SessionToPeerUsingPeer", testSessionToOnePeerUsingPeer)
	t.Run("VisitToCrawlUsingCrawl", testVisitToOneCrawlUsingCrawl)
	t.Run("VisitToPeerUsingPeer", testVisitToOnePeerUsingPeer)
	t.Run("VisitToSessionUsingSession", testVisitToOneSessionUsingSession)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CrawlToCrawlProperties", testCrawlToManyCrawlProperties)
	t.Run("CrawlToNeighbors", testCrawlToManyNeighbors)
	t.Run("CrawlToVisits", testCrawlToManyVisits)
	t.Run("MultiAddressToPeers", testMultiAddressToManyPeers)
	t.Run("MultiAddressToVisits", testMultiAddressToManyVisits)
	t.Run("PeerToLatencies", testPeerToManyLatencies)
	t.Run("PeerToNeighborNeighbors", testPeerToManyNeighborNeighbors)
	t.Run("PeerToNeighbors", testPeerToManyNeighbors)
	t.Run("PeerToMultiAddresses", testPeerToManyMultiAddresses)
	t.Run("PeerToProperties", testPeerToManyProperties)
	t.Run("PeerToSessions", testPeerToManySessions)
	t.Run("PeerToVisits", testPeerToManyVisits)
	t.Run("PropertyToCrawlProperties", testPropertyToManyCrawlProperties)
	t.Run("PropertyToPeers", testPropertyToManyPeers)
	t.Run("PropertyToVisits", testPropertyToManyVisits)
	t.Run("SessionToVisits", testSessionToManyVisits)
	t.Run("VisitToMultiAddresses", testVisitToManyMultiAddresses)
	t.Run("VisitToProperties", testVisitToManyProperties)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CrawlPropertyToPropertyUsingCrawlProperties", testCrawlPropertyToOneSetOpPropertyUsingProperty)
	t.Run("CrawlPropertyToCrawlUsingCrawlProperties", testCrawlPropertyToOneSetOpCrawlUsingCrawl)
	t.Run("LatencyToPeerUsingLatencies", testLatencyToOneSetOpPeerUsingPeer)
	t.Run("NeighborToCrawlUsingNeighbors", testNeighborToOneSetOpCrawlUsingCrawl)
	t.Run("NeighborToPeerUsingNeighborNeighbors", testNeighborToOneSetOpPeerUsingNeighbor)
	t.Run("NeighborToPeerUsingNeighbors", testNeighborToOneSetOpPeerUsingPeer)
	t.Run("SessionToPeerUsingSessions", testSessionToOneSetOpPeerUsingPeer)
	t.Run("VisitToCrawlUsingVisits", testVisitToOneSetOpCrawlUsingCrawl)
	t.Run("VisitToPeerUsingVisits", testVisitToOneSetOpPeerUsingPeer)
	t.Run("VisitToSessionUsingVisits", testVisitToOneSetOpSessionUsingSession)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CrawlToCrawlProperties", testCrawlToManyAddOpCrawlProperties)
	t.Run("CrawlToNeighbors", testCrawlToManyAddOpNeighbors)
	t.Run("CrawlToVisits", testCrawlToManyAddOpVisits)
	t.Run("MultiAddressToPeers", testMultiAddressToManyAddOpPeers)
	t.Run("MultiAddressToVisits", testMultiAddressToManyAddOpVisits)
	t.Run("PeerToLatencies", testPeerToManyAddOpLatencies)
	t.Run("PeerToNeighborNeighbors", testPeerToManyAddOpNeighborNeighbors)
	t.Run("PeerToNeighbors", testPeerToManyAddOpNeighbors)
	t.Run("PeerToMultiAddresses", testPeerToManyAddOpMultiAddresses)
	t.Run("PeerToProperties", testPeerToManyAddOpProperties)
	t.Run("PeerToSessions", testPeerToManyAddOpSessions)
	t.Run("PeerToVisits", testPeerToManyAddOpVisits)
	t.Run("PropertyToCrawlProperties", testPropertyToManyAddOpCrawlProperties)
	t.Run("PropertyToPeers", testPropertyToManyAddOpPeers)
	t.Run("PropertyToVisits", testPropertyToManyAddOpVisits)
	t.Run("SessionToVisits", testSessionToManyAddOpVisits)
	t.Run("VisitToMultiAddresses", testVisitToManyAddOpMultiAddresses)
	t.Run("VisitToProperties", testVisitToManyAddOpProperties)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("MultiAddressToPeers", testMultiAddressToManySetOpPeers)
	t.Run("MultiAddressToVisits", testMultiAddressToManySetOpVisits)
	t.Run("PeerToMultiAddresses", testPeerToManySetOpMultiAddresses)
	t.Run("PeerToProperties", testPeerToManySetOpProperties)
	t.Run("PropertyToPeers", testPropertyToManySetOpPeers)
	t.Run("PropertyToVisits", testPropertyToManySetOpVisits)
	t.Run("VisitToMultiAddresses", testVisitToManySetOpMultiAddresses)
	t.Run("VisitToProperties", testVisitToManySetOpProperties)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("MultiAddressToPeers", testMultiAddressToManyRemoveOpPeers)
	t.Run("MultiAddressToVisits", testMultiAddressToManyRemoveOpVisits)
	t.Run("PeerToMultiAddresses", testPeerToManyRemoveOpMultiAddresses)
	t.Run("PeerToProperties", testPeerToManyRemoveOpProperties)
	t.Run("PropertyToPeers", testPropertyToManyRemoveOpPeers)
	t.Run("PropertyToVisits", testPropertyToManyRemoveOpVisits)
	t.Run("VisitToMultiAddresses", testVisitToManyRemoveOpMultiAddresses)
	t.Run("VisitToProperties", testVisitToManyRemoveOpProperties)
}

func TestReload(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesReload)
	t.Run("Crawls", testCrawlsReload)
	t.Run("Latencies", testLatenciesReload)
	t.Run("MultiAddresses", testMultiAddressesReload)
	t.Run("Neighbors", testNeighborsReload)
	t.Run("Peers", testPeersReload)
	t.Run("PegasysConnections", testPegasysConnectionsReload)
	t.Run("PegasysNeighbours", testPegasysNeighboursReload)
	t.Run("Properties", testPropertiesReload)
	t.Run("RawVisits", testRawVisitsReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Visits", testVisitsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesReloadAll)
	t.Run("Crawls", testCrawlsReloadAll)
	t.Run("Latencies", testLatenciesReloadAll)
	t.Run("MultiAddresses", testMultiAddressesReloadAll)
	t.Run("Neighbors", testNeighborsReloadAll)
	t.Run("Peers", testPeersReloadAll)
	t.Run("PegasysConnections", testPegasysConnectionsReloadAll)
	t.Run("PegasysNeighbours", testPegasysNeighboursReloadAll)
	t.Run("Properties", testPropertiesReloadAll)
	t.Run("RawVisits", testRawVisitsReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Visits", testVisitsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesSelect)
	t.Run("Crawls", testCrawlsSelect)
	t.Run("Latencies", testLatenciesSelect)
	t.Run("MultiAddresses", testMultiAddressesSelect)
	t.Run("Neighbors", testNeighborsSelect)
	t.Run("Peers", testPeersSelect)
	t.Run("PegasysConnections", testPegasysConnectionsSelect)
	t.Run("PegasysNeighbours", testPegasysNeighboursSelect)
	t.Run("Properties", testPropertiesSelect)
	t.Run("RawVisits", testRawVisitsSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Visits", testVisitsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesUpdate)
	t.Run("Crawls", testCrawlsUpdate)
	t.Run("Latencies", testLatenciesUpdate)
	t.Run("MultiAddresses", testMultiAddressesUpdate)
	t.Run("Neighbors", testNeighborsUpdate)
	t.Run("Peers", testPeersUpdate)
	t.Run("PegasysConnections", testPegasysConnectionsUpdate)
	t.Run("PegasysNeighbours", testPegasysNeighboursUpdate)
	t.Run("Properties", testPropertiesUpdate)
	t.Run("RawVisits", testRawVisitsUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Visits", testVisitsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CrawlProperties", testCrawlPropertiesSliceUpdateAll)
	t.Run("Crawls", testCrawlsSliceUpdateAll)
	t.Run("Latencies", testLatenciesSliceUpdateAll)
	t.Run("MultiAddresses", testMultiAddressesSliceUpdateAll)
	t.Run("Neighbors", testNeighborsSliceUpdateAll)
	t.Run("Peers", testPeersSliceUpdateAll)
	t.Run("PegasysConnections", testPegasysConnectionsSliceUpdateAll)
	t.Run("PegasysNeighbours", testPegasysNeighboursSliceUpdateAll)
	t.Run("Properties", testPropertiesSliceUpdateAll)
	t.Run("RawVisits", testRawVisitsSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Visits", testVisitsSliceUpdateAll)
}
