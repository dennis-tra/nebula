// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSessionsCloseds(t *testing.T) {
	t.Parallel()

	query := SessionsCloseds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSessionsClosedsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosedsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SessionsCloseds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosedsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SessionsClosedSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosedsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SessionsClosedExists(ctx, tx, o.ID, o.State, o.LastVisitedAt)
	if err != nil {
		t.Errorf("Unable to check if SessionsClosed exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SessionsClosedExists to return true, but got false.")
	}
}

func testSessionsClosedsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sessionsClosedFound, err := FindSessionsClosed(ctx, tx, o.ID, o.State, o.LastVisitedAt)
	if err != nil {
		t.Error(err)
	}

	if sessionsClosedFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSessionsClosedsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SessionsCloseds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSessionsClosedsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SessionsCloseds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSessionsClosedsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sessionsClosedOne := &SessionsClosed{}
	sessionsClosedTwo := &SessionsClosed{}
	if err = randomize.Struct(seed, sessionsClosedOne, sessionsClosedDBTypes, false, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionsClosedTwo, sessionsClosedDBTypes, false, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sessionsClosedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sessionsClosedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SessionsCloseds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSessionsClosedsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sessionsClosedOne := &SessionsClosed{}
	sessionsClosedTwo := &SessionsClosed{}
	if err = randomize.Struct(seed, sessionsClosedOne, sessionsClosedDBTypes, false, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionsClosedTwo, sessionsClosedDBTypes, false, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sessionsClosedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sessionsClosedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sessionsClosedBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func sessionsClosedAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed) error {
	*o = SessionsClosed{}
	return nil
}

func testSessionsClosedsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SessionsClosed{}
	o := &SessionsClosed{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SessionsClosed object: %s", err)
	}

	AddSessionsClosedHook(boil.BeforeInsertHook, sessionsClosedBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosedBeforeInsertHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.AfterInsertHook, sessionsClosedAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosedAfterInsertHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.AfterSelectHook, sessionsClosedAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sessionsClosedAfterSelectHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.BeforeUpdateHook, sessionsClosedBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sessionsClosedBeforeUpdateHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.AfterUpdateHook, sessionsClosedAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sessionsClosedAfterUpdateHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.BeforeDeleteHook, sessionsClosedBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sessionsClosedBeforeDeleteHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.AfterDeleteHook, sessionsClosedAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sessionsClosedAfterDeleteHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.BeforeUpsertHook, sessionsClosedBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosedBeforeUpsertHooks = []SessionsClosedHook{}

	AddSessionsClosedHook(boil.AfterUpsertHook, sessionsClosedAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosedAfterUpsertHooks = []SessionsClosedHook{}
}

func testSessionsClosedsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionsClosedsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sessionsClosedColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionsClosedsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSessionsClosedsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SessionsClosedSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSessionsClosedsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SessionsCloseds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sessionsClosedDBTypes = map[string]string{`ID`: `integer`, `PeerID`: `integer`, `FirstSuccessfulVisit`: `timestamp with time zone`, `LastSuccessfulVisit`: `timestamp with time zone`, `NextVisitDueAt`: `timestamp with time zone`, `FirstFailedVisit`: `timestamp with time zone`, `LastFailedVisit`: `timestamp with time zone`, `LastVisitedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `SuccessfulVisitsCount`: `integer`, `RecoveredCount`: `integer`, `State`: `enum.session_state('open','pending','closed')`, `FailedVisitsCount`: `smallint`, `FinishReason`: `enum.dial_error('unknown','io_timeout','no_recent_network_activity','connection_refused','protocol_not_supported','peer_id_mismatch','no_route_to_host','network_unreachable','no_good_addresses','context_deadline_exceeded','no_public_ip','max_dial_attempts_exceeded','maddr_reset','stream_reset','host_is_down','negotiate_security_protocol','negotiate_stream_multiplexer')`, `Uptime`: `tstzrange`}
	_                     = bytes.MinRead
)

func testSessionsClosedsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sessionsClosedPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sessionsClosedAllColumns) == len(sessionsClosedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSessionsClosedsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sessionsClosedAllColumns) == len(sessionsClosedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed{}
	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sessionsClosedDBTypes, true, sessionsClosedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sessionsClosedAllColumns, sessionsClosedPrimaryKeyColumns) {
		fields = sessionsClosedAllColumns
	} else {
		fields = strmangle.SetComplement(
			sessionsClosedAllColumns,
			sessionsClosedPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SessionsClosedSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSessionsClosedsUpsert(t *testing.T) {
	t.Parallel()

	if len(sessionsClosedAllColumns) == len(sessionsClosedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SessionsClosed{}
	if err = randomize.Struct(seed, &o, sessionsClosedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SessionsClosed: %s", err)
	}

	count, err := SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sessionsClosedDBTypes, false, sessionsClosedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SessionsClosed: %s", err)
	}

	count, err = SessionsCloseds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
