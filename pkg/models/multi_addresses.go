// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MultiAddress is an object representing the database table.
type MultiAddress struct { // An internal unique id that identifies this multi address.
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// The autonomous system number that this multi address belongs to.
	Asn null.Int `boil:"asn" json:"asn,omitempty" toml:"asn" yaml:"asn,omitempty"`
	// If NULL this multi address could not be associated with a cloud provider. If not NULL the integer corresponds to the UdgerDB datacenter ID.
	IsCloud null.Int `boil:"is_cloud" json:"is_cloud,omitempty" toml:"is_cloud" yaml:"is_cloud,omitempty"`
	// A boolean value that indicates whether this multi address is a relay address.
	IsRelay null.Bool `boil:"is_relay" json:"is_relay,omitempty" toml:"is_relay" yaml:"is_relay,omitempty"`
	// A boolean value that indicates whether this multi address is a publicly reachable one.
	IsPublic null.Bool `boil:"is_public" json:"is_public,omitempty" toml:"is_public" yaml:"is_public,omitempty"`
	// The derived IPv4 or IPv6 address of this multi address.
	Addr null.String `boil:"addr" json:"addr,omitempty" toml:"addr" yaml:"addr,omitempty"`
	// Indicates if the multi_address has multiple IP addresses. Could happen for dnsaddr multi addresses.
	HasManyAddrs null.Bool `boil:"has_many_addrs" json:"has_many_addrs,omitempty" toml:"has_many_addrs" yaml:"has_many_addrs,omitempty"`
	Resolved     bool      `boil:"resolved" json:"resolved" toml:"resolved" yaml:"resolved"`
	// The country that this multi address belongs to in the form of a two letter country code.
	Country null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	// The continent that this multi address belongs to in the form of a two letter code.
	Continent null.String `boil:"continent" json:"continent,omitempty" toml:"continent" yaml:"continent,omitempty"`
	// The multi address in the form of `/ip4/123.456.789.123/tcp/4001`.
	Maddr string `boil:"maddr" json:"maddr" toml:"maddr" yaml:"maddr"`
	// Timestamp of when this multi address was updated.
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Timestamp of when this multi address was created.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *multiAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L multiAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MultiAddressColumns = struct {
	ID           string
	Asn          string
	IsCloud      string
	IsRelay      string
	IsPublic     string
	Addr         string
	HasManyAddrs string
	Resolved     string
	Country      string
	Continent    string
	Maddr        string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "id",
	Asn:          "asn",
	IsCloud:      "is_cloud",
	IsRelay:      "is_relay",
	IsPublic:     "is_public",
	Addr:         "addr",
	HasManyAddrs: "has_many_addrs",
	Resolved:     "resolved",
	Country:      "country",
	Continent:    "continent",
	Maddr:        "maddr",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
}

var MultiAddressTableColumns = struct {
	ID           string
	Asn          string
	IsCloud      string
	IsRelay      string
	IsPublic     string
	Addr         string
	HasManyAddrs string
	Resolved     string
	Country      string
	Continent    string
	Maddr        string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "multi_addresses.id",
	Asn:          "multi_addresses.asn",
	IsCloud:      "multi_addresses.is_cloud",
	IsRelay:      "multi_addresses.is_relay",
	IsPublic:     "multi_addresses.is_public",
	Addr:         "multi_addresses.addr",
	HasManyAddrs: "multi_addresses.has_many_addrs",
	Resolved:     "multi_addresses.resolved",
	Country:      "multi_addresses.country",
	Continent:    "multi_addresses.continent",
	Maddr:        "multi_addresses.maddr",
	UpdatedAt:    "multi_addresses.updated_at",
	CreatedAt:    "multi_addresses.created_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MultiAddressWhere = struct {
	ID           whereHelperint
	Asn          whereHelpernull_Int
	IsCloud      whereHelpernull_Int
	IsRelay      whereHelpernull_Bool
	IsPublic     whereHelpernull_Bool
	Addr         whereHelpernull_String
	HasManyAddrs whereHelpernull_Bool
	Resolved     whereHelperbool
	Country      whereHelpernull_String
	Continent    whereHelpernull_String
	Maddr        whereHelperstring
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"multi_addresses\".\"id\""},
	Asn:          whereHelpernull_Int{field: "\"multi_addresses\".\"asn\""},
	IsCloud:      whereHelpernull_Int{field: "\"multi_addresses\".\"is_cloud\""},
	IsRelay:      whereHelpernull_Bool{field: "\"multi_addresses\".\"is_relay\""},
	IsPublic:     whereHelpernull_Bool{field: "\"multi_addresses\".\"is_public\""},
	Addr:         whereHelpernull_String{field: "\"multi_addresses\".\"addr\""},
	HasManyAddrs: whereHelpernull_Bool{field: "\"multi_addresses\".\"has_many_addrs\""},
	Resolved:     whereHelperbool{field: "\"multi_addresses\".\"resolved\""},
	Country:      whereHelpernull_String{field: "\"multi_addresses\".\"country\""},
	Continent:    whereHelpernull_String{field: "\"multi_addresses\".\"continent\""},
	Maddr:        whereHelperstring{field: "\"multi_addresses\".\"maddr\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"multi_addresses\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"multi_addresses\".\"created_at\""},
}

// MultiAddressRels is where relationship names are stored.
var MultiAddressRels = struct {
	IPAddresses string
	Peers       string
}{
	IPAddresses: "IPAddresses",
	Peers:       "Peers",
}

// multiAddressR is where relationships are stored.
type multiAddressR struct {
	IPAddresses IPAddressSlice `boil:"IPAddresses" json:"IPAddresses" toml:"IPAddresses" yaml:"IPAddresses"`
	Peers       PeerSlice      `boil:"Peers" json:"Peers" toml:"Peers" yaml:"Peers"`
}

// NewStruct creates a new relationship struct
func (*multiAddressR) NewStruct() *multiAddressR {
	return &multiAddressR{}
}

func (r *multiAddressR) GetIPAddresses() IPAddressSlice {
	if r == nil {
		return nil
	}
	return r.IPAddresses
}

func (r *multiAddressR) GetPeers() PeerSlice {
	if r == nil {
		return nil
	}
	return r.Peers
}

// multiAddressL is where Load methods for each relationship are stored.
type multiAddressL struct{}

var (
	multiAddressAllColumns            = []string{"id", "asn", "is_cloud", "is_relay", "is_public", "addr", "has_many_addrs", "resolved", "country", "continent", "maddr", "updated_at", "created_at"}
	multiAddressColumnsWithoutDefault = []string{"maddr", "updated_at", "created_at"}
	multiAddressColumnsWithDefault    = []string{"id", "asn", "is_cloud", "is_relay", "is_public", "addr", "has_many_addrs", "resolved", "country", "continent"}
	multiAddressPrimaryKeyColumns     = []string{"id"}
	multiAddressGeneratedColumns      = []string{"id"}
)

type (
	// MultiAddressSlice is an alias for a slice of pointers to MultiAddress.
	// This should almost always be used instead of []MultiAddress.
	MultiAddressSlice []*MultiAddress
	// MultiAddressHook is the signature for custom MultiAddress hook methods
	MultiAddressHook func(context.Context, boil.ContextExecutor, *MultiAddress) error

	multiAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	multiAddressType                 = reflect.TypeOf(&MultiAddress{})
	multiAddressMapping              = queries.MakeStructMapping(multiAddressType)
	multiAddressPrimaryKeyMapping, _ = queries.BindMapping(multiAddressType, multiAddressMapping, multiAddressPrimaryKeyColumns)
	multiAddressInsertCacheMut       sync.RWMutex
	multiAddressInsertCache          = make(map[string]insertCache)
	multiAddressUpdateCacheMut       sync.RWMutex
	multiAddressUpdateCache          = make(map[string]updateCache)
	multiAddressUpsertCacheMut       sync.RWMutex
	multiAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var multiAddressAfterSelectHooks []MultiAddressHook

var multiAddressBeforeInsertHooks []MultiAddressHook
var multiAddressAfterInsertHooks []MultiAddressHook

var multiAddressBeforeUpdateHooks []MultiAddressHook
var multiAddressAfterUpdateHooks []MultiAddressHook

var multiAddressBeforeDeleteHooks []MultiAddressHook
var multiAddressAfterDeleteHooks []MultiAddressHook

var multiAddressBeforeUpsertHooks []MultiAddressHook
var multiAddressAfterUpsertHooks []MultiAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MultiAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MultiAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MultiAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MultiAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MultiAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MultiAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MultiAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MultiAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MultiAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMultiAddressHook registers your hook function for all future operations.
func AddMultiAddressHook(hookPoint boil.HookPoint, multiAddressHook MultiAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		multiAddressAfterSelectHooks = append(multiAddressAfterSelectHooks, multiAddressHook)
	case boil.BeforeInsertHook:
		multiAddressBeforeInsertHooks = append(multiAddressBeforeInsertHooks, multiAddressHook)
	case boil.AfterInsertHook:
		multiAddressAfterInsertHooks = append(multiAddressAfterInsertHooks, multiAddressHook)
	case boil.BeforeUpdateHook:
		multiAddressBeforeUpdateHooks = append(multiAddressBeforeUpdateHooks, multiAddressHook)
	case boil.AfterUpdateHook:
		multiAddressAfterUpdateHooks = append(multiAddressAfterUpdateHooks, multiAddressHook)
	case boil.BeforeDeleteHook:
		multiAddressBeforeDeleteHooks = append(multiAddressBeforeDeleteHooks, multiAddressHook)
	case boil.AfterDeleteHook:
		multiAddressAfterDeleteHooks = append(multiAddressAfterDeleteHooks, multiAddressHook)
	case boil.BeforeUpsertHook:
		multiAddressBeforeUpsertHooks = append(multiAddressBeforeUpsertHooks, multiAddressHook)
	case boil.AfterUpsertHook:
		multiAddressAfterUpsertHooks = append(multiAddressAfterUpsertHooks, multiAddressHook)
	}
}

// One returns a single multiAddress record from the query.
func (q multiAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MultiAddress, error) {
	o := &MultiAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for multi_addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MultiAddress records from the query.
func (q multiAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (MultiAddressSlice, error) {
	var o []*MultiAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MultiAddress slice")
	}

	if len(multiAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MultiAddress records in the query.
func (q multiAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count multi_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q multiAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if multi_addresses exists")
	}

	return count > 0, nil
}

// IPAddresses retrieves all the ip_address's IPAddresses with an executor.
func (o *MultiAddress) IPAddresses(mods ...qm.QueryMod) ipAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ip_addresses\".\"multi_address_id\"=?", o.ID),
	)

	return IPAddresses(queryMods...)
}

// Peers retrieves all the peer's Peers with an executor.
func (o *MultiAddress) Peers(mods ...qm.QueryMod) peerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"peers_x_multi_addresses\" on \"peers\".\"id\" = \"peers_x_multi_addresses\".\"peer_id\""),
		qm.Where("\"peers_x_multi_addresses\".\"multi_address_id\"=?", o.ID),
	)

	return Peers(queryMods...)
}

// LoadIPAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (multiAddressL) LoadIPAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMultiAddress interface{}, mods queries.Applicator) error {
	var slice []*MultiAddress
	var object *MultiAddress

	if singular {
		var ok bool
		object, ok = maybeMultiAddress.(*MultiAddress)
		if !ok {
			object = new(MultiAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMultiAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMultiAddress))
			}
		}
	} else {
		s, ok := maybeMultiAddress.(*[]*MultiAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMultiAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMultiAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &multiAddressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &multiAddressR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ip_addresses`),
		qm.WhereIn(`ip_addresses.multi_address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ip_addresses")
	}

	var resultSlice []*IPAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ip_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ip_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ip_addresses")
	}

	if len(ipAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IPAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ipAddressR{}
			}
			foreign.R.MultiAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MultiAddressID {
				local.R.IPAddresses = append(local.R.IPAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &ipAddressR{}
				}
				foreign.R.MultiAddress = local
				break
			}
		}
	}

	return nil
}

// LoadPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (multiAddressL) LoadPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMultiAddress interface{}, mods queries.Applicator) error {
	var slice []*MultiAddress
	var object *MultiAddress

	if singular {
		var ok bool
		object, ok = maybeMultiAddress.(*MultiAddress)
		if !ok {
			object = new(MultiAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMultiAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMultiAddress))
			}
		}
	} else {
		s, ok := maybeMultiAddress.(*[]*MultiAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMultiAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMultiAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &multiAddressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &multiAddressR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"peers\".\"id\", \"peers\".\"agent_version_id\", \"peers\".\"protocols_set_id\", \"peers\".\"multi_hash\", \"peers\".\"updated_at\", \"peers\".\"created_at\", \"peers\".\"properties\", \"a\".\"multi_address_id\""),
		qm.From("\"peers\""),
		qm.InnerJoin("\"peers_x_multi_addresses\" as \"a\" on \"peers\".\"id\" = \"a\".\"peer_id\""),
		qm.WhereIn("\"a\".\"multi_address_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peers")
	}

	var resultSlice []*Peer

	var localJoinCols []int
	for results.Next() {
		one := new(Peer)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.AgentVersionID, &one.ProtocolsSetID, &one.MultiHash, &one.UpdatedAt, &one.CreatedAt, &one.Properties, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for peers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice peers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(peerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Peers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peerR{}
			}
			foreign.R.MultiAddresses = append(foreign.R.MultiAddresses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Peers = append(local.R.Peers, foreign)
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.MultiAddresses = append(foreign.R.MultiAddresses, local)
				break
			}
		}
	}

	return nil
}

// AddIPAddresses adds the given related objects to the existing relationships
// of the multi_address, optionally inserting them as new records.
// Appends related to o.R.IPAddresses.
// Sets related.R.MultiAddress appropriately.
func (o *MultiAddress) AddIPAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IPAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MultiAddressID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ip_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
				strmangle.WhereClause("\"", "\"", 2, ipAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MultiAddressID = o.ID
		}
	}

	if o.R == nil {
		o.R = &multiAddressR{
			IPAddresses: related,
		}
	} else {
		o.R.IPAddresses = append(o.R.IPAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ipAddressR{
				MultiAddress: o,
			}
		} else {
			rel.R.MultiAddress = o
		}
	}
	return nil
}

// AddPeers adds the given related objects to the existing relationships
// of the multi_address, optionally inserting them as new records.
// Appends related to o.R.Peers.
// Sets related.R.MultiAddresses appropriately.
func (o *MultiAddress) AddPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Peer) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"peers_x_multi_addresses\" (\"multi_address_id\", \"peer_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &multiAddressR{
			Peers: related,
		}
	} else {
		o.R.Peers = append(o.R.Peers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peerR{
				MultiAddresses: MultiAddressSlice{o},
			}
		} else {
			rel.R.MultiAddresses = append(rel.R.MultiAddresses, o)
		}
	}
	return nil
}

// SetPeers removes all previously related items of the
// multi_address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MultiAddresses's Peers accordingly.
// Replaces o.R.Peers with related.
// Sets related.R.MultiAddresses's Peers accordingly.
func (o *MultiAddress) SetPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Peer) error {
	query := "delete from \"peers_x_multi_addresses\" where \"multi_address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePeersFromMultiAddressesSlice(o, related)
	if o.R != nil {
		o.R.Peers = nil
	}

	return o.AddPeers(ctx, exec, insert, related...)
}

// RemovePeers relationships from objects passed in.
// Removes related items from R.Peers (uses pointer comparison, removal does not keep order)
// Sets related.R.MultiAddresses.
func (o *MultiAddress) RemovePeers(ctx context.Context, exec boil.ContextExecutor, related ...*Peer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"peers_x_multi_addresses\" where \"multi_address_id\" = $1 and \"peer_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePeersFromMultiAddressesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Peers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Peers)
			if ln > 1 && i < ln-1 {
				o.R.Peers[i] = o.R.Peers[ln-1]
			}
			o.R.Peers = o.R.Peers[:ln-1]
			break
		}
	}

	return nil
}

func removePeersFromMultiAddressesSlice(o *MultiAddress, related []*Peer) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.MultiAddresses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.MultiAddresses)
			if ln > 1 && i < ln-1 {
				rel.R.MultiAddresses[i] = rel.R.MultiAddresses[ln-1]
			}
			rel.R.MultiAddresses = rel.R.MultiAddresses[:ln-1]
			break
		}
	}
}

// MultiAddresses retrieves all the records using an executor.
func MultiAddresses(mods ...qm.QueryMod) multiAddressQuery {
	mods = append(mods, qm.From("\"multi_addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"multi_addresses\".*"})
	}

	return multiAddressQuery{q}
}

// FindMultiAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMultiAddress(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MultiAddress, error) {
	multiAddressObj := &MultiAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"multi_addresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, multiAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from multi_addresses")
	}

	if err = multiAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return multiAddressObj, err
	}

	return multiAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MultiAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	multiAddressInsertCacheMut.RLock()
	cache, cached := multiAddressInsertCache[key]
	multiAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			multiAddressAllColumns,
			multiAddressColumnsWithDefault,
			multiAddressColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, multiAddressGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(multiAddressType, multiAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(multiAddressType, multiAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"multi_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"multi_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into multi_addresses")
	}

	if !cached {
		multiAddressInsertCacheMut.Lock()
		multiAddressInsertCache[key] = cache
		multiAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MultiAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MultiAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	multiAddressUpdateCacheMut.RLock()
	cache, cached := multiAddressUpdateCache[key]
	multiAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			multiAddressAllColumns,
			multiAddressPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, multiAddressGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update multi_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"multi_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, multiAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(multiAddressType, multiAddressMapping, append(wl, multiAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update multi_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for multi_addresses")
	}

	if !cached {
		multiAddressUpdateCacheMut.Lock()
		multiAddressUpdateCache[key] = cache
		multiAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q multiAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for multi_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MultiAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"multi_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, multiAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in multiAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all multiAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MultiAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	multiAddressUpsertCacheMut.RLock()
	cache, cached := multiAddressUpsertCache[key]
	multiAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			multiAddressAllColumns,
			multiAddressColumnsWithDefault,
			multiAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			multiAddressAllColumns,
			multiAddressPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, multiAddressGeneratedColumns)
		update = strmangle.SetComplement(update, multiAddressGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert multi_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(multiAddressPrimaryKeyColumns))
			copy(conflict, multiAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"multi_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(multiAddressType, multiAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(multiAddressType, multiAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert multi_addresses")
	}

	if !cached {
		multiAddressUpsertCacheMut.Lock()
		multiAddressUpsertCache[key] = cache
		multiAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MultiAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MultiAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MultiAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), multiAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"multi_addresses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for multi_addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q multiAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no multiAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MultiAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(multiAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"multi_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multiAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses")
	}

	if len(multiAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MultiAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMultiAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MultiAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MultiAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"multi_addresses\".* FROM \"multi_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MultiAddressSlice")
	}

	*o = slice

	return nil
}

// MultiAddressExists checks if the MultiAddress row exists.
func MultiAddressExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"multi_addresses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if multi_addresses exists")
	}

	return exists, nil
}

// Exists checks if the MultiAddress row exists.
func (o *MultiAddress) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MultiAddressExists(ctx, exec, o.ID)
}
