// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Neighbor is an object representing the database table.
type Neighbor struct {
	ID         int `boil:"id" json:"id" toml:"id" yaml:"id"`
	CrawlID    int `boil:"crawl_id" json:"crawl_id" toml:"crawl_id" yaml:"crawl_id"`
	PeerID     int `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	NeighborID int `boil:"neighbor_id" json:"neighbor_id" toml:"neighbor_id" yaml:"neighbor_id"`

	R *neighborR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L neighborL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NeighborColumns = struct {
	ID         string
	CrawlID    string
	PeerID     string
	NeighborID string
}{
	ID:         "id",
	CrawlID:    "crawl_id",
	PeerID:     "peer_id",
	NeighborID: "neighbor_id",
}

var NeighborTableColumns = struct {
	ID         string
	CrawlID    string
	PeerID     string
	NeighborID string
}{
	ID:         "neighbors.id",
	CrawlID:    "neighbors.crawl_id",
	PeerID:     "neighbors.peer_id",
	NeighborID: "neighbors.neighbor_id",
}

// Generated where

var NeighborWhere = struct {
	ID         whereHelperint
	CrawlID    whereHelperint
	PeerID     whereHelperint
	NeighborID whereHelperint
}{
	ID:         whereHelperint{field: "\"neighbors\".\"id\""},
	CrawlID:    whereHelperint{field: "\"neighbors\".\"crawl_id\""},
	PeerID:     whereHelperint{field: "\"neighbors\".\"peer_id\""},
	NeighborID: whereHelperint{field: "\"neighbors\".\"neighbor_id\""},
}

// NeighborRels is where relationship names are stored.
var NeighborRels = struct {
	Crawl    string
	Neighbor string
	Peer     string
}{
	Crawl:    "Crawl",
	Neighbor: "Neighbor",
	Peer:     "Peer",
}

// neighborR is where relationships are stored.
type neighborR struct {
	Crawl    *Crawl `boil:"Crawl" json:"Crawl" toml:"Crawl" yaml:"Crawl"`
	Neighbor *Peer  `boil:"Neighbor" json:"Neighbor" toml:"Neighbor" yaml:"Neighbor"`
	Peer     *Peer  `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
}

// NewStruct creates a new relationship struct
func (*neighborR) NewStruct() *neighborR {
	return &neighborR{}
}

// neighborL is where Load methods for each relationship are stored.
type neighborL struct{}

var (
	neighborAllColumns            = []string{"id", "crawl_id", "peer_id", "neighbor_id"}
	neighborColumnsWithoutDefault = []string{}
	neighborColumnsWithDefault    = []string{"id", "crawl_id", "peer_id", "neighbor_id"}
	neighborPrimaryKeyColumns     = []string{"id"}
)

type (
	// NeighborSlice is an alias for a slice of pointers to Neighbor.
	// This should almost always be used instead of []Neighbor.
	NeighborSlice []*Neighbor
	// NeighborHook is the signature for custom Neighbor hook methods
	NeighborHook func(context.Context, boil.ContextExecutor, *Neighbor) error

	neighborQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	neighborType                 = reflect.TypeOf(&Neighbor{})
	neighborMapping              = queries.MakeStructMapping(neighborType)
	neighborPrimaryKeyMapping, _ = queries.BindMapping(neighborType, neighborMapping, neighborPrimaryKeyColumns)
	neighborInsertCacheMut       sync.RWMutex
	neighborInsertCache          = make(map[string]insertCache)
	neighborUpdateCacheMut       sync.RWMutex
	neighborUpdateCache          = make(map[string]updateCache)
	neighborUpsertCacheMut       sync.RWMutex
	neighborUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var neighborBeforeInsertHooks []NeighborHook
var neighborBeforeUpdateHooks []NeighborHook
var neighborBeforeDeleteHooks []NeighborHook
var neighborBeforeUpsertHooks []NeighborHook

var neighborAfterInsertHooks []NeighborHook
var neighborAfterSelectHooks []NeighborHook
var neighborAfterUpdateHooks []NeighborHook
var neighborAfterDeleteHooks []NeighborHook
var neighborAfterUpsertHooks []NeighborHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Neighbor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Neighbor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Neighbor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Neighbor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Neighbor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Neighbor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Neighbor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Neighbor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Neighbor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighborAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNeighborHook registers your hook function for all future operations.
func AddNeighborHook(hookPoint boil.HookPoint, neighborHook NeighborHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		neighborBeforeInsertHooks = append(neighborBeforeInsertHooks, neighborHook)
	case boil.BeforeUpdateHook:
		neighborBeforeUpdateHooks = append(neighborBeforeUpdateHooks, neighborHook)
	case boil.BeforeDeleteHook:
		neighborBeforeDeleteHooks = append(neighborBeforeDeleteHooks, neighborHook)
	case boil.BeforeUpsertHook:
		neighborBeforeUpsertHooks = append(neighborBeforeUpsertHooks, neighborHook)
	case boil.AfterInsertHook:
		neighborAfterInsertHooks = append(neighborAfterInsertHooks, neighborHook)
	case boil.AfterSelectHook:
		neighborAfterSelectHooks = append(neighborAfterSelectHooks, neighborHook)
	case boil.AfterUpdateHook:
		neighborAfterUpdateHooks = append(neighborAfterUpdateHooks, neighborHook)
	case boil.AfterDeleteHook:
		neighborAfterDeleteHooks = append(neighborAfterDeleteHooks, neighborHook)
	case boil.AfterUpsertHook:
		neighborAfterUpsertHooks = append(neighborAfterUpsertHooks, neighborHook)
	}
}

// One returns a single neighbor record from the query.
func (q neighborQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Neighbor, error) {
	o := &Neighbor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for neighbors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Neighbor records from the query.
func (q neighborQuery) All(ctx context.Context, exec boil.ContextExecutor) (NeighborSlice, error) {
	var o []*Neighbor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Neighbor slice")
	}

	if len(neighborAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Neighbor records in the query.
func (q neighborQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count neighbors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q neighborQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if neighbors exists")
	}

	return count > 0, nil
}

// Crawl pointed to by the foreign key.
func (o *Neighbor) Crawl(mods ...qm.QueryMod) crawlQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CrawlID),
	}

	queryMods = append(queryMods, mods...)

	query := Crawls(queryMods...)
	queries.SetFrom(query.Query, "\"crawls\"")

	return query
}

// Neighbor pointed to by the foreign key.
func (o *Neighbor) Neighbor(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NeighborID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Peer pointed to by the foreign key.
func (o *Neighbor) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadCrawl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (neighborL) LoadCrawl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNeighbor interface{}, mods queries.Applicator) error {
	var slice []*Neighbor
	var object *Neighbor

	if singular {
		object = maybeNeighbor.(*Neighbor)
	} else {
		slice = *maybeNeighbor.(*[]*Neighbor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &neighborR{}
		}
		args = append(args, object.CrawlID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &neighborR{}
			}

			for _, a := range args {
				if a == obj.CrawlID {
					continue Outer
				}
			}

			args = append(args, obj.CrawlID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crawls`),
		qm.WhereIn(`crawls.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Crawl")
	}

	var resultSlice []*Crawl
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Crawl")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for crawls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crawls")
	}

	if len(neighborAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Crawl = foreign
		if foreign.R == nil {
			foreign.R = &crawlR{}
		}
		foreign.R.Neighbors = append(foreign.R.Neighbors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CrawlID == foreign.ID {
				local.R.Crawl = foreign
				if foreign.R == nil {
					foreign.R = &crawlR{}
				}
				foreign.R.Neighbors = append(foreign.R.Neighbors, local)
				break
			}
		}
	}

	return nil
}

// LoadNeighbor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (neighborL) LoadNeighbor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNeighbor interface{}, mods queries.Applicator) error {
	var slice []*Neighbor
	var object *Neighbor

	if singular {
		object = maybeNeighbor.(*Neighbor)
	} else {
		slice = *maybeNeighbor.(*[]*Neighbor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &neighborR{}
		}
		args = append(args, object.NeighborID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &neighborR{}
			}

			for _, a := range args {
				if a == obj.NeighborID {
					continue Outer
				}
			}

			args = append(args, obj.NeighborID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(neighborAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Neighbor = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.NeighborNeighbors = append(foreign.R.NeighborNeighbors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NeighborID == foreign.ID {
				local.R.Neighbor = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.NeighborNeighbors = append(foreign.R.NeighborNeighbors, local)
				break
			}
		}
	}

	return nil
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (neighborL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNeighbor interface{}, mods queries.Applicator) error {
	var slice []*Neighbor
	var object *Neighbor

	if singular {
		object = maybeNeighbor.(*Neighbor)
	} else {
		slice = *maybeNeighbor.(*[]*Neighbor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &neighborR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &neighborR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(neighborAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.Neighbors = append(foreign.R.Neighbors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.Neighbors = append(foreign.R.Neighbors, local)
				break
			}
		}
	}

	return nil
}

// SetCrawl of the neighbor to the related item.
// Sets o.R.Crawl to related.
// Adds o to related.R.Neighbors.
func (o *Neighbor) SetCrawl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Crawl) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"neighbors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"crawl_id"}),
		strmangle.WhereClause("\"", "\"", 2, neighborPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CrawlID = related.ID
	if o.R == nil {
		o.R = &neighborR{
			Crawl: related,
		}
	} else {
		o.R.Crawl = related
	}

	if related.R == nil {
		related.R = &crawlR{
			Neighbors: NeighborSlice{o},
		}
	} else {
		related.R.Neighbors = append(related.R.Neighbors, o)
	}

	return nil
}

// SetNeighbor of the neighbor to the related item.
// Sets o.R.Neighbor to related.
// Adds o to related.R.NeighborNeighbors.
func (o *Neighbor) SetNeighbor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"neighbors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"neighbor_id"}),
		strmangle.WhereClause("\"", "\"", 2, neighborPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NeighborID = related.ID
	if o.R == nil {
		o.R = &neighborR{
			Neighbor: related,
		}
	} else {
		o.R.Neighbor = related
	}

	if related.R == nil {
		related.R = &peerR{
			NeighborNeighbors: NeighborSlice{o},
		}
	} else {
		related.R.NeighborNeighbors = append(related.R.NeighborNeighbors, o)
	}

	return nil
}

// SetPeer of the neighbor to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.Neighbors.
func (o *Neighbor) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"neighbors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, neighborPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &neighborR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			Neighbors: NeighborSlice{o},
		}
	} else {
		related.R.Neighbors = append(related.R.Neighbors, o)
	}

	return nil
}

// Neighbors retrieves all the records using an executor.
func Neighbors(mods ...qm.QueryMod) neighborQuery {
	mods = append(mods, qm.From("\"neighbors\""))
	return neighborQuery{NewQuery(mods...)}
}

// FindNeighbor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNeighbor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Neighbor, error) {
	neighborObj := &Neighbor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"neighbors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, neighborObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from neighbors")
	}

	if err = neighborObj.doAfterSelectHooks(ctx, exec); err != nil {
		return neighborObj, err
	}

	return neighborObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Neighbor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no neighbors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(neighborColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	neighborInsertCacheMut.RLock()
	cache, cached := neighborInsertCache[key]
	neighborInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			neighborAllColumns,
			neighborColumnsWithDefault,
			neighborColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(neighborType, neighborMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(neighborType, neighborMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"neighbors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"neighbors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into neighbors")
	}

	if !cached {
		neighborInsertCacheMut.Lock()
		neighborInsertCache[key] = cache
		neighborInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Neighbor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Neighbor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	neighborUpdateCacheMut.RLock()
	cache, cached := neighborUpdateCache[key]
	neighborUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			neighborAllColumns,
			neighborPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update neighbors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"neighbors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, neighborPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(neighborType, neighborMapping, append(wl, neighborPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update neighbors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for neighbors")
	}

	if !cached {
		neighborUpdateCacheMut.Lock()
		neighborUpdateCache[key] = cache
		neighborUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q neighborQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for neighbors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for neighbors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NeighborSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighborPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"neighbors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, neighborPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in neighbor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all neighbor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Neighbor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no neighbors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(neighborColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	neighborUpsertCacheMut.RLock()
	cache, cached := neighborUpsertCache[key]
	neighborUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			neighborAllColumns,
			neighborColumnsWithDefault,
			neighborColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			neighborAllColumns,
			neighborPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert neighbors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(neighborPrimaryKeyColumns))
			copy(conflict, neighborPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"neighbors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(neighborType, neighborMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(neighborType, neighborMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert neighbors")
	}

	if !cached {
		neighborUpsertCacheMut.Lock()
		neighborUpsertCache[key] = cache
		neighborUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Neighbor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Neighbor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Neighbor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), neighborPrimaryKeyMapping)
	sql := "DELETE FROM \"neighbors\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from neighbors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for neighbors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q neighborQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no neighborQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from neighbors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for neighbors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NeighborSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(neighborBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighborPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"neighbors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, neighborPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from neighbor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for neighbors")
	}

	if len(neighborAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Neighbor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNeighbor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NeighborSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NeighborSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighborPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"neighbors\".* FROM \"neighbors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, neighborPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NeighborSlice")
	}

	*o = slice

	return nil
}

// NeighborExists checks if the Neighbor row exists.
func NeighborExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"neighbors\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if neighbors exists")
	}

	return exists, nil
}
