// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPeers(t *testing.T) {
	t.Parallel()

	query := Peers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPeersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Peers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PeerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Peer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PeerExists to return true, but got false.")
	}
}

func testPeersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	peerFound, err := FindPeer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if peerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPeersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Peers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPeersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Peers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPeersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	peerOne := &Peer{}
	peerTwo := &Peer{}
	if err = randomize.Struct(seed, peerOne, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}
	if err = randomize.Struct(seed, peerTwo, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Peers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPeersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	peerOne := &Peer{}
	peerTwo := &Peer{}
	if err = randomize.Struct(seed, peerOne, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}
	if err = randomize.Struct(seed, peerTwo, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = peerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = peerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func peerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func peerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Peer) error {
	*o = Peer{}
	return nil
}

func testPeersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Peer{}
	o := &Peer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, peerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Peer object: %s", err)
	}

	AddPeerHook(boil.BeforeInsertHook, peerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	peerBeforeInsertHooks = []PeerHook{}

	AddPeerHook(boil.AfterInsertHook, peerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	peerAfterInsertHooks = []PeerHook{}

	AddPeerHook(boil.AfterSelectHook, peerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	peerAfterSelectHooks = []PeerHook{}

	AddPeerHook(boil.BeforeUpdateHook, peerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	peerBeforeUpdateHooks = []PeerHook{}

	AddPeerHook(boil.AfterUpdateHook, peerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	peerAfterUpdateHooks = []PeerHook{}

	AddPeerHook(boil.BeforeDeleteHook, peerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	peerBeforeDeleteHooks = []PeerHook{}

	AddPeerHook(boil.AfterDeleteHook, peerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	peerAfterDeleteHooks = []PeerHook{}

	AddPeerHook(boil.BeforeUpsertHook, peerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	peerBeforeUpsertHooks = []PeerHook{}

	AddPeerHook(boil.AfterUpsertHook, peerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	peerAfterUpsertHooks = []PeerHook{}
}

func testPeersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(peerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeerOneToOneSessionsOpenUsingSessionsOpen(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign SessionsOpen
	var local Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, sessionsOpenDBTypes, true, sessionsOpenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsOpen struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.PeerID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SessionsOpen().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PeerID != foreign.PeerID {
		t.Errorf("want: %v, got %v", foreign.PeerID, check.PeerID)
	}

	slice := PeerSlice{&local}
	if err = local.L.LoadSessionsOpen(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SessionsOpen == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SessionsOpen = nil
	if err = local.L.LoadSessionsOpen(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SessionsOpen == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeerOneToOneSetOpSessionsOpenUsingSessionsOpen(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c SessionsOpen

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sessionsOpenDBTypes, false, strmangle.SetComplement(sessionsOpenPrimaryKeyColumns, sessionsOpenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sessionsOpenDBTypes, false, strmangle.SetComplement(sessionsOpenPrimaryKeyColumns, sessionsOpenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SessionsOpen{&b, &c} {
		err = a.SetSessionsOpen(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SessionsOpen != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Peer != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.PeerID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.PeerID))
		reflect.Indirect(reflect.ValueOf(&x.PeerID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.PeerID {
			t.Error("foreign key was wrong value", a.ID, x.PeerID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testPeerToManyLatencies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c Latency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, latencyDBTypes, false, latencyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, latencyDBTypes, false, latencyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PeerID = a.ID
	c.PeerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Latencies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PeerID == b.PeerID {
			bFound = true
		}
		if v.PeerID == c.PeerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PeerSlice{&a}
	if err = a.L.LoadLatencies(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Latencies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Latencies = nil
	if err = a.L.LoadLatencies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Latencies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPeerToManyNeighbors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c Neighbor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, neighborDBTypes, false, neighborColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, neighborDBTypes, false, neighborColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PeerID = a.ID
	c.PeerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Neighbors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PeerID == b.PeerID {
			bFound = true
		}
		if v.PeerID == c.PeerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PeerSlice{&a}
	if err = a.L.LoadNeighbors(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Neighbors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Neighbors = nil
	if err = a.L.LoadNeighbors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Neighbors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPeerToManyMultiAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, multiAddressDBTypes, false, multiAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, multiAddressDBTypes, false, multiAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"peers_x_multi_addresses\" (\"peer_id\", \"multi_address_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"peers_x_multi_addresses\" (\"peer_id\", \"multi_address_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.MultiAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PeerSlice{&a}
	if err = a.L.LoadMultiAddresses(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MultiAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MultiAddresses = nil
	if err = a.L.LoadMultiAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MultiAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPeerToManyAddOpLatencies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c, d, e Latency

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Latency{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, latencyDBTypes, false, strmangle.SetComplement(latencyPrimaryKeyColumns, latencyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Latency{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLatencies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PeerID {
			t.Error("foreign key was wrong value", a.ID, first.PeerID)
		}
		if a.ID != second.PeerID {
			t.Error("foreign key was wrong value", a.ID, second.PeerID)
		}

		if first.R.Peer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Peer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Latencies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Latencies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Latencies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPeerToManyAddOpNeighbors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c, d, e Neighbor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Neighbor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, neighborDBTypes, false, strmangle.SetComplement(neighborPrimaryKeyColumns, neighborColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Neighbor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNeighbors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PeerID {
			t.Error("foreign key was wrong value", a.ID, first.PeerID)
		}
		if a.ID != second.PeerID {
			t.Error("foreign key was wrong value", a.ID, second.PeerID)
		}

		if first.R.Peer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Peer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Neighbors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Neighbors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Neighbors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPeerToManyAddOpMultiAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c, d, e MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MultiAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MultiAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMultiAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Peers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Peers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.MultiAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MultiAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MultiAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPeerToManySetOpMultiAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c, d, e MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MultiAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMultiAddresses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MultiAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMultiAddresses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MultiAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Peers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Peers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Peers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Peers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.MultiAddresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MultiAddresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPeerToManyRemoveOpMultiAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c, d, e MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MultiAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMultiAddresses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MultiAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMultiAddresses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MultiAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Peers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Peers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Peers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Peers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.MultiAddresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MultiAddresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MultiAddresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPeerToOneAgentVersionUsingAgentVersion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Peer
	var foreign AgentVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AgentVersionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AgentVersion().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PeerSlice{&local}
	if err = local.L.LoadAgentVersion(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AgentVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AgentVersion = nil
	if err = local.L.LoadAgentVersion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AgentVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeerToOneProtocolsSetUsingProtocolsSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Peer
	var foreign ProtocolsSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, protocolsSetDBTypes, false, protocolsSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProtocolsSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProtocolsSetID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProtocolsSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PeerSlice{&local}
	if err = local.L.LoadProtocolsSet(ctx, tx, false, (*[]*Peer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProtocolsSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProtocolsSet = nil
	if err = local.L.LoadProtocolsSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProtocolsSet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPeerToOneSetOpAgentVersionUsingAgentVersion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c AgentVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AgentVersion{&b, &c} {
		err = a.SetAgentVersion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AgentVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Peers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AgentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.AgentVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AgentVersionID))
		reflect.Indirect(reflect.ValueOf(&a.AgentVersionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AgentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.AgentVersionID, x.ID)
		}
	}
}

func testPeerToOneRemoveOpAgentVersionUsingAgentVersion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b AgentVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAgentVersion(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAgentVersion(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AgentVersion().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AgentVersion != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AgentVersionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Peers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPeerToOneSetOpProtocolsSetUsingProtocolsSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b, c ProtocolsSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, protocolsSetDBTypes, false, strmangle.SetComplement(protocolsSetPrimaryKeyColumns, protocolsSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, protocolsSetDBTypes, false, strmangle.SetComplement(protocolsSetPrimaryKeyColumns, protocolsSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProtocolsSet{&b, &c} {
		err = a.SetProtocolsSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProtocolsSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Peers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProtocolsSetID, x.ID) {
			t.Error("foreign key was wrong value", a.ProtocolsSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProtocolsSetID))
		reflect.Indirect(reflect.ValueOf(&a.ProtocolsSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProtocolsSetID, x.ID) {
			t.Error("foreign key was wrong value", a.ProtocolsSetID, x.ID)
		}
	}
}

func testPeerToOneRemoveOpProtocolsSetUsingProtocolsSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Peer
	var b ProtocolsSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, protocolsSetDBTypes, false, strmangle.SetComplement(protocolsSetPrimaryKeyColumns, protocolsSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProtocolsSet(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProtocolsSet(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProtocolsSet().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProtocolsSet != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProtocolsSetID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Peers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPeersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PeerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Peers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	peerDBTypes = map[string]string{`ID`: `integer`, `AgentVersionID`: `integer`, `ProtocolsSetID`: `integer`, `MultiHash`: `text`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testPeersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(peerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(peerAllColumns) == len(peerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peerDBTypes, true, peerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPeersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(peerAllColumns) == len(peerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Peer{}
	if err = randomize.Struct(seed, o, peerDBTypes, true, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, peerDBTypes, true, peerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(peerAllColumns, peerPrimaryKeyColumns) {
		fields = peerAllColumns
	} else {
		fields = strmangle.SetComplement(
			peerAllColumns,
			peerPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, peerGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PeerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPeersUpsert(t *testing.T) {
	t.Parallel()

	if len(peerAllColumns) == len(peerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Peer{}
	if err = randomize.Struct(seed, &o, peerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Peer: %s", err)
	}

	count, err := Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, peerDBTypes, false, peerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Peer: %s", err)
	}

	count, err = Peers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
