// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonitoringPeer is an object representing the database table.
type MonitoringPeer struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID           string      `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	IPAddress        null.String `boil:"ip_address" json:"ip_address,omitempty" toml:"ip_address" yaml:"ip_address,omitempty"`
	GeoLocation      null.String `boil:"geo_location" json:"geo_location,omitempty" toml:"geo_location" yaml:"geo_location,omitempty"`
	NextDialAttempt  null.Time   `boil:"next_dial_attempt" json:"next_dial_attempt,omitempty" toml:"next_dial_attempt" yaml:"next_dial_attempt,omitempty"`
	MinDuration      null.String `boil:"min_duration" json:"min_duration,omitempty" toml:"min_duration" yaml:"min_duration,omitempty"`
	MaxDuration      null.String `boil:"max_duration" json:"max_duration,omitempty" toml:"max_duration" yaml:"max_duration,omitempty"`
	SuccessfulDials  null.Int    `boil:"successful_dials" json:"successful_dials,omitempty" toml:"successful_dials" yaml:"successful_dials,omitempty"`
	LastSuccessfulAt null.Time   `boil:"last_successful_at" json:"last_successful_at,omitempty" toml:"last_successful_at" yaml:"last_successful_at,omitempty"`
	LastFailedAt     null.Time   `boil:"last_failed_at" json:"last_failed_at,omitempty" toml:"last_failed_at" yaml:"last_failed_at,omitempty"`

	R *monitoringPeerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monitoringPeerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonitoringPeerColumns = struct {
	ID               string
	PeerID           string
	IPAddress        string
	GeoLocation      string
	NextDialAttempt  string
	MinDuration      string
	MaxDuration      string
	SuccessfulDials  string
	LastSuccessfulAt string
	LastFailedAt     string
}{
	ID:               "id",
	PeerID:           "peer_id",
	IPAddress:        "ip_address",
	GeoLocation:      "geo_location",
	NextDialAttempt:  "next_dial_attempt",
	MinDuration:      "min_duration",
	MaxDuration:      "max_duration",
	SuccessfulDials:  "successful_dials",
	LastSuccessfulAt: "last_successful_at",
	LastFailedAt:     "last_failed_at",
}

var MonitoringPeerTableColumns = struct {
	ID               string
	PeerID           string
	IPAddress        string
	GeoLocation      string
	NextDialAttempt  string
	MinDuration      string
	MaxDuration      string
	SuccessfulDials  string
	LastSuccessfulAt string
	LastFailedAt     string
}{
	ID:               "monitoring_peers.id",
	PeerID:           "monitoring_peers.peer_id",
	IPAddress:        "monitoring_peers.ip_address",
	GeoLocation:      "monitoring_peers.geo_location",
	NextDialAttempt:  "monitoring_peers.next_dial_attempt",
	MinDuration:      "monitoring_peers.min_duration",
	MaxDuration:      "monitoring_peers.max_duration",
	SuccessfulDials:  "monitoring_peers.successful_dials",
	LastSuccessfulAt: "monitoring_peers.last_successful_at",
	LastFailedAt:     "monitoring_peers.last_failed_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MonitoringPeerWhere = struct {
	ID               whereHelperint
	PeerID           whereHelperstring
	IPAddress        whereHelpernull_String
	GeoLocation      whereHelpernull_String
	NextDialAttempt  whereHelpernull_Time
	MinDuration      whereHelpernull_String
	MaxDuration      whereHelpernull_String
	SuccessfulDials  whereHelpernull_Int
	LastSuccessfulAt whereHelpernull_Time
	LastFailedAt     whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"monitoring_peers\".\"id\""},
	PeerID:           whereHelperstring{field: "\"monitoring_peers\".\"peer_id\""},
	IPAddress:        whereHelpernull_String{field: "\"monitoring_peers\".\"ip_address\""},
	GeoLocation:      whereHelpernull_String{field: "\"monitoring_peers\".\"geo_location\""},
	NextDialAttempt:  whereHelpernull_Time{field: "\"monitoring_peers\".\"next_dial_attempt\""},
	MinDuration:      whereHelpernull_String{field: "\"monitoring_peers\".\"min_duration\""},
	MaxDuration:      whereHelpernull_String{field: "\"monitoring_peers\".\"max_duration\""},
	SuccessfulDials:  whereHelpernull_Int{field: "\"monitoring_peers\".\"successful_dials\""},
	LastSuccessfulAt: whereHelpernull_Time{field: "\"monitoring_peers\".\"last_successful_at\""},
	LastFailedAt:     whereHelpernull_Time{field: "\"monitoring_peers\".\"last_failed_at\""},
}

// MonitoringPeerRels is where relationship names are stored.
var MonitoringPeerRels = struct {
}{}

// monitoringPeerR is where relationships are stored.
type monitoringPeerR struct {
}

// NewStruct creates a new relationship struct
func (*monitoringPeerR) NewStruct() *monitoringPeerR {
	return &monitoringPeerR{}
}

// monitoringPeerL is where Load methods for each relationship are stored.
type monitoringPeerL struct{}

var (
	monitoringPeerAllColumns            = []string{"id", "peer_id", "ip_address", "geo_location", "next_dial_attempt", "min_duration", "max_duration", "successful_dials", "last_successful_at", "last_failed_at"}
	monitoringPeerColumnsWithoutDefault = []string{"peer_id", "ip_address", "geo_location", "next_dial_attempt", "min_duration", "max_duration", "successful_dials", "last_successful_at", "last_failed_at"}
	monitoringPeerColumnsWithDefault    = []string{"id"}
	monitoringPeerPrimaryKeyColumns     = []string{"id"}
)

type (
	// MonitoringPeerSlice is an alias for a slice of pointers to MonitoringPeer.
	// This should almost always be used instead of []MonitoringPeer.
	MonitoringPeerSlice []*MonitoringPeer
	// MonitoringPeerHook is the signature for custom MonitoringPeer hook methods
	MonitoringPeerHook func(context.Context, boil.ContextExecutor, *MonitoringPeer) error

	monitoringPeerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monitoringPeerType                 = reflect.TypeOf(&MonitoringPeer{})
	monitoringPeerMapping              = queries.MakeStructMapping(monitoringPeerType)
	monitoringPeerPrimaryKeyMapping, _ = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, monitoringPeerPrimaryKeyColumns)
	monitoringPeerInsertCacheMut       sync.RWMutex
	monitoringPeerInsertCache          = make(map[string]insertCache)
	monitoringPeerUpdateCacheMut       sync.RWMutex
	monitoringPeerUpdateCache          = make(map[string]updateCache)
	monitoringPeerUpsertCacheMut       sync.RWMutex
	monitoringPeerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monitoringPeerBeforeInsertHooks []MonitoringPeerHook
var monitoringPeerBeforeUpdateHooks []MonitoringPeerHook
var monitoringPeerBeforeDeleteHooks []MonitoringPeerHook
var monitoringPeerBeforeUpsertHooks []MonitoringPeerHook

var monitoringPeerAfterInsertHooks []MonitoringPeerHook
var monitoringPeerAfterSelectHooks []MonitoringPeerHook
var monitoringPeerAfterUpdateHooks []MonitoringPeerHook
var monitoringPeerAfterDeleteHooks []MonitoringPeerHook
var monitoringPeerAfterUpsertHooks []MonitoringPeerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonitoringPeer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonitoringPeer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonitoringPeer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonitoringPeer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonitoringPeer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonitoringPeer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonitoringPeer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonitoringPeer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonitoringPeer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitoringPeerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonitoringPeerHook registers your hook function for all future operations.
func AddMonitoringPeerHook(hookPoint boil.HookPoint, monitoringPeerHook MonitoringPeerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		monitoringPeerBeforeInsertHooks = append(monitoringPeerBeforeInsertHooks, monitoringPeerHook)
	case boil.BeforeUpdateHook:
		monitoringPeerBeforeUpdateHooks = append(monitoringPeerBeforeUpdateHooks, monitoringPeerHook)
	case boil.BeforeDeleteHook:
		monitoringPeerBeforeDeleteHooks = append(monitoringPeerBeforeDeleteHooks, monitoringPeerHook)
	case boil.BeforeUpsertHook:
		monitoringPeerBeforeUpsertHooks = append(monitoringPeerBeforeUpsertHooks, monitoringPeerHook)
	case boil.AfterInsertHook:
		monitoringPeerAfterInsertHooks = append(monitoringPeerAfterInsertHooks, monitoringPeerHook)
	case boil.AfterSelectHook:
		monitoringPeerAfterSelectHooks = append(monitoringPeerAfterSelectHooks, monitoringPeerHook)
	case boil.AfterUpdateHook:
		monitoringPeerAfterUpdateHooks = append(monitoringPeerAfterUpdateHooks, monitoringPeerHook)
	case boil.AfterDeleteHook:
		monitoringPeerAfterDeleteHooks = append(monitoringPeerAfterDeleteHooks, monitoringPeerHook)
	case boil.AfterUpsertHook:
		monitoringPeerAfterUpsertHooks = append(monitoringPeerAfterUpsertHooks, monitoringPeerHook)
	}
}

// One returns a single monitoringPeer record from the query.
func (q monitoringPeerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonitoringPeer, error) {
	o := &MonitoringPeer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monitoring_peers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonitoringPeer records from the query.
func (q monitoringPeerQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonitoringPeerSlice, error) {
	var o []*MonitoringPeer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonitoringPeer slice")
	}

	if len(monitoringPeerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonitoringPeer records in the query.
func (q monitoringPeerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monitoring_peers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monitoringPeerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monitoring_peers exists")
	}

	return count > 0, nil
}

// MonitoringPeers retrieves all the records using an executor.
func MonitoringPeers(mods ...qm.QueryMod) monitoringPeerQuery {
	mods = append(mods, qm.From("\"monitoring_peers\""))
	return monitoringPeerQuery{NewQuery(mods...)}
}

// FindMonitoringPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonitoringPeer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MonitoringPeer, error) {
	monitoringPeerObj := &MonitoringPeer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monitoring_peers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monitoringPeerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monitoring_peers")
	}

	if err = monitoringPeerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monitoringPeerObj, err
	}

	return monitoringPeerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonitoringPeer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitoring_peers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitoringPeerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monitoringPeerInsertCacheMut.RLock()
	cache, cached := monitoringPeerInsertCache[key]
	monitoringPeerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monitoringPeerAllColumns,
			monitoringPeerColumnsWithDefault,
			monitoringPeerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monitoring_peers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monitoring_peers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monitoring_peers")
	}

	if !cached {
		monitoringPeerInsertCacheMut.Lock()
		monitoringPeerInsertCache[key] = cache
		monitoringPeerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonitoringPeer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonitoringPeer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monitoringPeerUpdateCacheMut.RLock()
	cache, cached := monitoringPeerUpdateCache[key]
	monitoringPeerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monitoringPeerAllColumns,
			monitoringPeerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monitoring_peers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monitoring_peers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monitoringPeerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, append(wl, monitoringPeerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monitoring_peers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monitoring_peers")
	}

	if !cached {
		monitoringPeerUpdateCacheMut.Lock()
		monitoringPeerUpdateCache[key] = cache
		monitoringPeerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monitoringPeerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monitoring_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monitoring_peers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonitoringPeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitoringPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monitoring_peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monitoringPeerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monitoringPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monitoringPeer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonitoringPeer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitoring_peers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitoringPeerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monitoringPeerUpsertCacheMut.RLock()
	cache, cached := monitoringPeerUpsertCache[key]
	monitoringPeerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monitoringPeerAllColumns,
			monitoringPeerColumnsWithDefault,
			monitoringPeerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			monitoringPeerAllColumns,
			monitoringPeerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monitoring_peers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monitoringPeerPrimaryKeyColumns))
			copy(conflict, monitoringPeerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monitoring_peers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monitoringPeerType, monitoringPeerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monitoring_peers")
	}

	if !cached {
		monitoringPeerUpsertCacheMut.Lock()
		monitoringPeerUpsertCache[key] = cache
		monitoringPeerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonitoringPeer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonitoringPeer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonitoringPeer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monitoringPeerPrimaryKeyMapping)
	sql := "DELETE FROM \"monitoring_peers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monitoring_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monitoring_peers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monitoringPeerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monitoringPeerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitoring_peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitoring_peers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonitoringPeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monitoringPeerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitoringPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monitoring_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitoringPeerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitoringPeer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitoring_peers")
	}

	if len(monitoringPeerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonitoringPeer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonitoringPeer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonitoringPeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonitoringPeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitoringPeerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monitoring_peers\".* FROM \"monitoring_peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitoringPeerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonitoringPeerSlice")
	}

	*o = slice

	return nil
}

// MonitoringPeerExists checks if the MonitoringPeer row exists.
func MonitoringPeerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monitoring_peers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monitoring_peers exists")
	}

	return exists, nil
}
