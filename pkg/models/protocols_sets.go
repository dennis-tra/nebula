// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProtocolsSet is an object representing the database table.
type ProtocolsSet struct { // An internal unique id that identifies a unique set of protocols.
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// The protocol IDs of this protocol set. The IDs reference the protocols table (no foreign key checks).
	ProtocolIds types.Int64Array `boil:"protocol_ids" json:"protocol_ids" toml:"protocol_ids" yaml:"protocol_ids"`
	// The hash digest of the sorted protocol ids to allow a unique constraint.
	Hash []byte `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`

	R *protocolsSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L protocolsSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProtocolsSetColumns = struct {
	ID          string
	ProtocolIds string
	Hash        string
}{
	ID:          "id",
	ProtocolIds: "protocol_ids",
	Hash:        "hash",
}

var ProtocolsSetTableColumns = struct {
	ID          string
	ProtocolIds string
	Hash        string
}{
	ID:          "protocols_sets.id",
	ProtocolIds: "protocols_sets.protocol_ids",
	Hash:        "protocols_sets.hash",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ProtocolsSetWhere = struct {
	ID          whereHelperint
	ProtocolIds whereHelpertypes_Int64Array
	Hash        whereHelper__byte
}{
	ID:          whereHelperint{field: "\"protocols_sets\".\"id\""},
	ProtocolIds: whereHelpertypes_Int64Array{field: "\"protocols_sets\".\"protocol_ids\""},
	Hash:        whereHelper__byte{field: "\"protocols_sets\".\"hash\""},
}

// ProtocolsSetRels is where relationship names are stored.
var ProtocolsSetRels = struct {
	Peers string
}{
	Peers: "Peers",
}

// protocolsSetR is where relationships are stored.
type protocolsSetR struct {
	Peers PeerSlice `boil:"Peers" json:"Peers" toml:"Peers" yaml:"Peers"`
}

// NewStruct creates a new relationship struct
func (*protocolsSetR) NewStruct() *protocolsSetR {
	return &protocolsSetR{}
}

func (r *protocolsSetR) GetPeers() PeerSlice {
	if r == nil {
		return nil
	}
	return r.Peers
}

// protocolsSetL is where Load methods for each relationship are stored.
type protocolsSetL struct{}

var (
	protocolsSetAllColumns            = []string{"id", "protocol_ids", "hash"}
	protocolsSetColumnsWithoutDefault = []string{"protocol_ids", "hash"}
	protocolsSetColumnsWithDefault    = []string{"id"}
	protocolsSetPrimaryKeyColumns     = []string{"id"}
	protocolsSetGeneratedColumns      = []string{"id"}
)

type (
	// ProtocolsSetSlice is an alias for a slice of pointers to ProtocolsSet.
	// This should almost always be used instead of []ProtocolsSet.
	ProtocolsSetSlice []*ProtocolsSet
	// ProtocolsSetHook is the signature for custom ProtocolsSet hook methods
	ProtocolsSetHook func(context.Context, boil.ContextExecutor, *ProtocolsSet) error

	protocolsSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	protocolsSetType                 = reflect.TypeOf(&ProtocolsSet{})
	protocolsSetMapping              = queries.MakeStructMapping(protocolsSetType)
	protocolsSetPrimaryKeyMapping, _ = queries.BindMapping(protocolsSetType, protocolsSetMapping, protocolsSetPrimaryKeyColumns)
	protocolsSetInsertCacheMut       sync.RWMutex
	protocolsSetInsertCache          = make(map[string]insertCache)
	protocolsSetUpdateCacheMut       sync.RWMutex
	protocolsSetUpdateCache          = make(map[string]updateCache)
	protocolsSetUpsertCacheMut       sync.RWMutex
	protocolsSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var protocolsSetAfterSelectHooks []ProtocolsSetHook

var protocolsSetBeforeInsertHooks []ProtocolsSetHook
var protocolsSetAfterInsertHooks []ProtocolsSetHook

var protocolsSetBeforeUpdateHooks []ProtocolsSetHook
var protocolsSetAfterUpdateHooks []ProtocolsSetHook

var protocolsSetBeforeDeleteHooks []ProtocolsSetHook
var protocolsSetAfterDeleteHooks []ProtocolsSetHook

var protocolsSetBeforeUpsertHooks []ProtocolsSetHook
var protocolsSetAfterUpsertHooks []ProtocolsSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProtocolsSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProtocolsSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProtocolsSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProtocolsSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProtocolsSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProtocolsSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProtocolsSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProtocolsSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProtocolsSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolsSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProtocolsSetHook registers your hook function for all future operations.
func AddProtocolsSetHook(hookPoint boil.HookPoint, protocolsSetHook ProtocolsSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		protocolsSetAfterSelectHooks = append(protocolsSetAfterSelectHooks, protocolsSetHook)
	case boil.BeforeInsertHook:
		protocolsSetBeforeInsertHooks = append(protocolsSetBeforeInsertHooks, protocolsSetHook)
	case boil.AfterInsertHook:
		protocolsSetAfterInsertHooks = append(protocolsSetAfterInsertHooks, protocolsSetHook)
	case boil.BeforeUpdateHook:
		protocolsSetBeforeUpdateHooks = append(protocolsSetBeforeUpdateHooks, protocolsSetHook)
	case boil.AfterUpdateHook:
		protocolsSetAfterUpdateHooks = append(protocolsSetAfterUpdateHooks, protocolsSetHook)
	case boil.BeforeDeleteHook:
		protocolsSetBeforeDeleteHooks = append(protocolsSetBeforeDeleteHooks, protocolsSetHook)
	case boil.AfterDeleteHook:
		protocolsSetAfterDeleteHooks = append(protocolsSetAfterDeleteHooks, protocolsSetHook)
	case boil.BeforeUpsertHook:
		protocolsSetBeforeUpsertHooks = append(protocolsSetBeforeUpsertHooks, protocolsSetHook)
	case boil.AfterUpsertHook:
		protocolsSetAfterUpsertHooks = append(protocolsSetAfterUpsertHooks, protocolsSetHook)
	}
}

// One returns a single protocolsSet record from the query.
func (q protocolsSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProtocolsSet, error) {
	o := &ProtocolsSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for protocols_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProtocolsSet records from the query.
func (q protocolsSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProtocolsSetSlice, error) {
	var o []*ProtocolsSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProtocolsSet slice")
	}

	if len(protocolsSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProtocolsSet records in the query.
func (q protocolsSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count protocols_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q protocolsSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if protocols_sets exists")
	}

	return count > 0, nil
}

// Peers retrieves all the peer's Peers with an executor.
func (o *ProtocolsSet) Peers(mods ...qm.QueryMod) peerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peers\".\"protocols_set_id\"=?", o.ID),
	)

	return Peers(queryMods...)
}

// LoadPeers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (protocolsSetL) LoadPeers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProtocolsSet interface{}, mods queries.Applicator) error {
	var slice []*ProtocolsSet
	var object *ProtocolsSet

	if singular {
		var ok bool
		object, ok = maybeProtocolsSet.(*ProtocolsSet)
		if !ok {
			object = new(ProtocolsSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProtocolsSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProtocolsSet))
			}
		}
	} else {
		s, ok := maybeProtocolsSet.(*[]*ProtocolsSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProtocolsSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProtocolsSet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &protocolsSetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &protocolsSetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.protocols_set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peers")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(peerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Peers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peerR{}
			}
			foreign.R.ProtocolsSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProtocolsSetID) {
				local.R.Peers = append(local.R.Peers, foreign)
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.ProtocolsSet = local
				break
			}
		}
	}

	return nil
}

// AddPeers adds the given related objects to the existing relationships
// of the protocols_set, optionally inserting them as new records.
// Appends related to o.R.Peers.
// Sets related.R.ProtocolsSet appropriately.
func (o *ProtocolsSet) AddPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Peer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProtocolsSetID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"protocols_set_id"}),
				strmangle.WhereClause("\"", "\"", 2, peerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProtocolsSetID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &protocolsSetR{
			Peers: related,
		}
	} else {
		o.R.Peers = append(o.R.Peers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peerR{
				ProtocolsSet: o,
			}
		} else {
			rel.R.ProtocolsSet = o
		}
	}
	return nil
}

// SetPeers removes all previously related items of the
// protocols_set replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProtocolsSet's Peers accordingly.
// Replaces o.R.Peers with related.
// Sets related.R.ProtocolsSet's Peers accordingly.
func (o *ProtocolsSet) SetPeers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Peer) error {
	query := "update \"peers\" set \"protocols_set_id\" = null where \"protocols_set_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Peers {
			queries.SetScanner(&rel.ProtocolsSetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProtocolsSet = nil
		}
		o.R.Peers = nil
	}

	return o.AddPeers(ctx, exec, insert, related...)
}

// RemovePeers relationships from objects passed in.
// Removes related items from R.Peers (uses pointer comparison, removal does not keep order)
// Sets related.R.ProtocolsSet.
func (o *ProtocolsSet) RemovePeers(ctx context.Context, exec boil.ContextExecutor, related ...*Peer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProtocolsSetID, nil)
		if rel.R != nil {
			rel.R.ProtocolsSet = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("protocols_set_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Peers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Peers)
			if ln > 1 && i < ln-1 {
				o.R.Peers[i] = o.R.Peers[ln-1]
			}
			o.R.Peers = o.R.Peers[:ln-1]
			break
		}
	}

	return nil
}

// ProtocolsSets retrieves all the records using an executor.
func ProtocolsSets(mods ...qm.QueryMod) protocolsSetQuery {
	mods = append(mods, qm.From("\"protocols_sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"protocols_sets\".*"})
	}

	return protocolsSetQuery{q}
}

// FindProtocolsSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProtocolsSet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProtocolsSet, error) {
	protocolsSetObj := &ProtocolsSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"protocols_sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, protocolsSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from protocols_sets")
	}

	if err = protocolsSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return protocolsSetObj, err
	}

	return protocolsSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProtocolsSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protocols_sets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protocolsSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	protocolsSetInsertCacheMut.RLock()
	cache, cached := protocolsSetInsertCache[key]
	protocolsSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			protocolsSetAllColumns,
			protocolsSetColumnsWithDefault,
			protocolsSetColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, protocolsSetGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(protocolsSetType, protocolsSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(protocolsSetType, protocolsSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"protocols_sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"protocols_sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into protocols_sets")
	}

	if !cached {
		protocolsSetInsertCacheMut.Lock()
		protocolsSetInsertCache[key] = cache
		protocolsSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProtocolsSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProtocolsSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	protocolsSetUpdateCacheMut.RLock()
	cache, cached := protocolsSetUpdateCache[key]
	protocolsSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			protocolsSetAllColumns,
			protocolsSetPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, protocolsSetGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update protocols_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"protocols_sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, protocolsSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(protocolsSetType, protocolsSetMapping, append(wl, protocolsSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update protocols_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for protocols_sets")
	}

	if !cached {
		protocolsSetUpdateCacheMut.Lock()
		protocolsSetUpdateCache[key] = cache
		protocolsSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q protocolsSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for protocols_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for protocols_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProtocolsSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolsSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"protocols_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, protocolsSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in protocolsSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all protocolsSet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProtocolsSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protocols_sets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protocolsSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	protocolsSetUpsertCacheMut.RLock()
	cache, cached := protocolsSetUpsertCache[key]
	protocolsSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			protocolsSetAllColumns,
			protocolsSetColumnsWithDefault,
			protocolsSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			protocolsSetAllColumns,
			protocolsSetPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, protocolsSetGeneratedColumns)
		update = strmangle.SetComplement(update, protocolsSetGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert protocols_sets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(protocolsSetPrimaryKeyColumns))
			copy(conflict, protocolsSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"protocols_sets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(protocolsSetType, protocolsSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(protocolsSetType, protocolsSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert protocols_sets")
	}

	if !cached {
		protocolsSetUpsertCacheMut.Lock()
		protocolsSetUpsertCache[key] = cache
		protocolsSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProtocolsSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProtocolsSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProtocolsSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), protocolsSetPrimaryKeyMapping)
	sql := "DELETE FROM \"protocols_sets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from protocols_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for protocols_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q protocolsSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no protocolsSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protocols_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protocols_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProtocolsSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(protocolsSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolsSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"protocols_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protocolsSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protocolsSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protocols_sets")
	}

	if len(protocolsSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProtocolsSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProtocolsSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProtocolsSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProtocolsSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolsSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"protocols_sets\".* FROM \"protocols_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protocolsSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProtocolsSetSlice")
	}

	*o = slice

	return nil
}

// ProtocolsSetExists checks if the ProtocolsSet row exists.
func ProtocolsSetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"protocols_sets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if protocols_sets exists")
	}

	return exists, nil
}

// Exists checks if the ProtocolsSet row exists.
func (o *ProtocolsSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProtocolsSetExists(ctx, exec, o.ID)
}
