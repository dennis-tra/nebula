// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMultiAddressesXIPAddresses(t *testing.T) {
	t.Parallel()

	query := MultiAddressesXIPAddresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMultiAddressesXIPAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMultiAddressesXIPAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MultiAddressesXIPAddresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMultiAddressesXIPAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MultiAddressesXIPAddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMultiAddressesXIPAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MultiAddressesXIPAddressExists(ctx, tx, o.MultiAddressID, o.IPAddressID, o.ResolvedAt)
	if err != nil {
		t.Errorf("Unable to check if MultiAddressesXIPAddress exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MultiAddressesXIPAddressExists to return true, but got false.")
	}
}

func testMultiAddressesXIPAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	multiAddressesXIPAddressFound, err := FindMultiAddressesXIPAddress(ctx, tx, o.MultiAddressID, o.IPAddressID, o.ResolvedAt)
	if err != nil {
		t.Error(err)
	}

	if multiAddressesXIPAddressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMultiAddressesXIPAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MultiAddressesXIPAddresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMultiAddressesXIPAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MultiAddressesXIPAddresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMultiAddressesXIPAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	multiAddressesXIPAddressOne := &MultiAddressesXIPAddress{}
	multiAddressesXIPAddressTwo := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, multiAddressesXIPAddressOne, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, multiAddressesXIPAddressTwo, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = multiAddressesXIPAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = multiAddressesXIPAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MultiAddressesXIPAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMultiAddressesXIPAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	multiAddressesXIPAddressOne := &MultiAddressesXIPAddress{}
	multiAddressesXIPAddressTwo := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, multiAddressesXIPAddressOne, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, multiAddressesXIPAddressTwo, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = multiAddressesXIPAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = multiAddressesXIPAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func multiAddressesXIPAddressBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func multiAddressesXIPAddressAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MultiAddressesXIPAddress) error {
	*o = MultiAddressesXIPAddress{}
	return nil
}

func testMultiAddressesXIPAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MultiAddressesXIPAddress{}
	o := &MultiAddressesXIPAddress{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress object: %s", err)
	}

	AddMultiAddressesXIPAddressHook(boil.BeforeInsertHook, multiAddressesXIPAddressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressBeforeInsertHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.AfterInsertHook, multiAddressesXIPAddressAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressAfterInsertHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.AfterSelectHook, multiAddressesXIPAddressAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressAfterSelectHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.BeforeUpdateHook, multiAddressesXIPAddressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressBeforeUpdateHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.AfterUpdateHook, multiAddressesXIPAddressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressAfterUpdateHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.BeforeDeleteHook, multiAddressesXIPAddressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressBeforeDeleteHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.AfterDeleteHook, multiAddressesXIPAddressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressAfterDeleteHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.BeforeUpsertHook, multiAddressesXIPAddressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressBeforeUpsertHooks = []MultiAddressesXIPAddressHook{}

	AddMultiAddressesXIPAddressHook(boil.AfterUpsertHook, multiAddressesXIPAddressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	multiAddressesXIPAddressAfterUpsertHooks = []MultiAddressesXIPAddressHook{}
}

func testMultiAddressesXIPAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMultiAddressesXIPAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(multiAddressesXIPAddressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMultiAddressesXIPAddressToOneIPAddressUsingIPAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MultiAddressesXIPAddress
	var foreign IPAddress

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IPAddressID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IPAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MultiAddressesXIPAddressSlice{&local}
	if err = local.L.LoadIPAddress(ctx, tx, false, (*[]*MultiAddressesXIPAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IPAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IPAddress = nil
	if err = local.L.LoadIPAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IPAddress == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMultiAddressesXIPAddressToOneMultiAddressUsingMultiAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MultiAddressesXIPAddress
	var foreign MultiAddress

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, multiAddressDBTypes, false, multiAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddress struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MultiAddressID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MultiAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MultiAddressesXIPAddressSlice{&local}
	if err = local.L.LoadMultiAddress(ctx, tx, false, (*[]*MultiAddressesXIPAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MultiAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MultiAddress = nil
	if err = local.L.LoadMultiAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MultiAddress == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMultiAddressesXIPAddressToOneSetOpIPAddressUsingIPAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MultiAddressesXIPAddress
	var b, c IPAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, multiAddressesXIPAddressDBTypes, false, strmangle.SetComplement(multiAddressesXIPAddressPrimaryKeyColumns, multiAddressesXIPAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ipAddressDBTypes, false, strmangle.SetComplement(ipAddressPrimaryKeyColumns, ipAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ipAddressDBTypes, false, strmangle.SetComplement(ipAddressPrimaryKeyColumns, ipAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*IPAddress{&b, &c} {
		err = a.SetIPAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IPAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MultiAddressesXIPAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IPAddressID != x.ID {
			t.Error("foreign key was wrong value", a.IPAddressID)
		}

		if exists, err := MultiAddressesXIPAddressExists(ctx, tx, a.MultiAddressID, a.IPAddressID, a.ResolvedAt); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMultiAddressesXIPAddressToOneSetOpMultiAddressUsingMultiAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MultiAddressesXIPAddress
	var b, c MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, multiAddressesXIPAddressDBTypes, false, strmangle.SetComplement(multiAddressesXIPAddressPrimaryKeyColumns, multiAddressesXIPAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MultiAddress{&b, &c} {
		err = a.SetMultiAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MultiAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MultiAddressesXIPAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MultiAddressID != x.ID {
			t.Error("foreign key was wrong value", a.MultiAddressID)
		}

		if exists, err := MultiAddressesXIPAddressExists(ctx, tx, a.MultiAddressID, a.IPAddressID, a.ResolvedAt); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMultiAddressesXIPAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMultiAddressesXIPAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MultiAddressesXIPAddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMultiAddressesXIPAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MultiAddressesXIPAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	multiAddressesXIPAddressDBTypes = map[string]string{`MultiAddressID`: `integer`, `IPAddressID`: `integer`, `ResolvedAt`: `timestamp with time zone`}
	_                               = bytes.MinRead
)

func testMultiAddressesXIPAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(multiAddressesXIPAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(multiAddressesXIPAddressAllColumns) == len(multiAddressesXIPAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMultiAddressesXIPAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(multiAddressesXIPAddressAllColumns) == len(multiAddressesXIPAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, multiAddressesXIPAddressDBTypes, true, multiAddressesXIPAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(multiAddressesXIPAddressAllColumns, multiAddressesXIPAddressPrimaryKeyColumns) {
		fields = multiAddressesXIPAddressAllColumns
	} else {
		fields = strmangle.SetComplement(
			multiAddressesXIPAddressAllColumns,
			multiAddressesXIPAddressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MultiAddressesXIPAddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMultiAddressesXIPAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(multiAddressesXIPAddressAllColumns) == len(multiAddressesXIPAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MultiAddressesXIPAddress{}
	if err = randomize.Struct(seed, &o, multiAddressesXIPAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MultiAddressesXIPAddress: %s", err)
	}

	count, err := MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, multiAddressesXIPAddressDBTypes, false, multiAddressesXIPAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MultiAddressesXIPAddress struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MultiAddressesXIPAddress: %s", err)
	}

	count, err = MultiAddressesXIPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
