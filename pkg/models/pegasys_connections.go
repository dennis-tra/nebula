// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PegasysConnection is an object representing the database table.
type PegasysConnection struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID      string      `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	DialAttempt null.Time   `boil:"dial_attempt" json:"dial_attempt,omitempty" toml:"dial_attempt" yaml:"dial_attempt,omitempty"`
	Latency     null.String `boil:"latency" json:"latency,omitempty" toml:"latency" yaml:"latency,omitempty"`
	IsSucceed   null.Bool   `boil:"is_succeed" json:"is_succeed,omitempty" toml:"is_succeed" yaml:"is_succeed,omitempty"`
	Error       null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *pegasysConnectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pegasysConnectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PegasysConnectionColumns = struct {
	ID          string
	PeerID      string
	DialAttempt string
	Latency     string
	IsSucceed   string
	Error       string
}{
	ID:          "id",
	PeerID:      "peer_id",
	DialAttempt: "dial_attempt",
	Latency:     "latency",
	IsSucceed:   "is_succeed",
	Error:       "error",
}

var PegasysConnectionTableColumns = struct {
	ID          string
	PeerID      string
	DialAttempt string
	Latency     string
	IsSucceed   string
	Error       string
}{
	ID:          "pegasys_connections.id",
	PeerID:      "pegasys_connections.peer_id",
	DialAttempt: "pegasys_connections.dial_attempt",
	Latency:     "pegasys_connections.latency",
	IsSucceed:   "pegasys_connections.is_succeed",
	Error:       "pegasys_connections.error",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PegasysConnectionWhere = struct {
	ID          whereHelperint
	PeerID      whereHelperstring
	DialAttempt whereHelpernull_Time
	Latency     whereHelpernull_String
	IsSucceed   whereHelpernull_Bool
	Error       whereHelpernull_String
}{
	ID:          whereHelperint{field: "\"pegasys_connections\".\"id\""},
	PeerID:      whereHelperstring{field: "\"pegasys_connections\".\"peer_id\""},
	DialAttempt: whereHelpernull_Time{field: "\"pegasys_connections\".\"dial_attempt\""},
	Latency:     whereHelpernull_String{field: "\"pegasys_connections\".\"latency\""},
	IsSucceed:   whereHelpernull_Bool{field: "\"pegasys_connections\".\"is_succeed\""},
	Error:       whereHelpernull_String{field: "\"pegasys_connections\".\"error\""},
}

// PegasysConnectionRels is where relationship names are stored.
var PegasysConnectionRels = struct {
}{}

// pegasysConnectionR is where relationships are stored.
type pegasysConnectionR struct {
}

// NewStruct creates a new relationship struct
func (*pegasysConnectionR) NewStruct() *pegasysConnectionR {
	return &pegasysConnectionR{}
}

// pegasysConnectionL is where Load methods for each relationship are stored.
type pegasysConnectionL struct{}

var (
	pegasysConnectionAllColumns            = []string{"id", "peer_id", "dial_attempt", "latency", "is_succeed", "error"}
	pegasysConnectionColumnsWithoutDefault = []string{"peer_id", "dial_attempt", "latency", "is_succeed", "error"}
	pegasysConnectionColumnsWithDefault    = []string{"id"}
	pegasysConnectionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PegasysConnectionSlice is an alias for a slice of pointers to PegasysConnection.
	// This should almost always be used instead of []PegasysConnection.
	PegasysConnectionSlice []*PegasysConnection
	// PegasysConnectionHook is the signature for custom PegasysConnection hook methods
	PegasysConnectionHook func(context.Context, boil.ContextExecutor, *PegasysConnection) error

	pegasysConnectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pegasysConnectionType                 = reflect.TypeOf(&PegasysConnection{})
	pegasysConnectionMapping              = queries.MakeStructMapping(pegasysConnectionType)
	pegasysConnectionPrimaryKeyMapping, _ = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, pegasysConnectionPrimaryKeyColumns)
	pegasysConnectionInsertCacheMut       sync.RWMutex
	pegasysConnectionInsertCache          = make(map[string]insertCache)
	pegasysConnectionUpdateCacheMut       sync.RWMutex
	pegasysConnectionUpdateCache          = make(map[string]updateCache)
	pegasysConnectionUpsertCacheMut       sync.RWMutex
	pegasysConnectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pegasysConnectionBeforeInsertHooks []PegasysConnectionHook
var pegasysConnectionBeforeUpdateHooks []PegasysConnectionHook
var pegasysConnectionBeforeDeleteHooks []PegasysConnectionHook
var pegasysConnectionBeforeUpsertHooks []PegasysConnectionHook

var pegasysConnectionAfterInsertHooks []PegasysConnectionHook
var pegasysConnectionAfterSelectHooks []PegasysConnectionHook
var pegasysConnectionAfterUpdateHooks []PegasysConnectionHook
var pegasysConnectionAfterDeleteHooks []PegasysConnectionHook
var pegasysConnectionAfterUpsertHooks []PegasysConnectionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PegasysConnection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PegasysConnection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PegasysConnection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PegasysConnection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PegasysConnection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PegasysConnection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PegasysConnection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PegasysConnection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PegasysConnection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pegasysConnectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPegasysConnectionHook registers your hook function for all future operations.
func AddPegasysConnectionHook(hookPoint boil.HookPoint, pegasysConnectionHook PegasysConnectionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pegasysConnectionBeforeInsertHooks = append(pegasysConnectionBeforeInsertHooks, pegasysConnectionHook)
	case boil.BeforeUpdateHook:
		pegasysConnectionBeforeUpdateHooks = append(pegasysConnectionBeforeUpdateHooks, pegasysConnectionHook)
	case boil.BeforeDeleteHook:
		pegasysConnectionBeforeDeleteHooks = append(pegasysConnectionBeforeDeleteHooks, pegasysConnectionHook)
	case boil.BeforeUpsertHook:
		pegasysConnectionBeforeUpsertHooks = append(pegasysConnectionBeforeUpsertHooks, pegasysConnectionHook)
	case boil.AfterInsertHook:
		pegasysConnectionAfterInsertHooks = append(pegasysConnectionAfterInsertHooks, pegasysConnectionHook)
	case boil.AfterSelectHook:
		pegasysConnectionAfterSelectHooks = append(pegasysConnectionAfterSelectHooks, pegasysConnectionHook)
	case boil.AfterUpdateHook:
		pegasysConnectionAfterUpdateHooks = append(pegasysConnectionAfterUpdateHooks, pegasysConnectionHook)
	case boil.AfterDeleteHook:
		pegasysConnectionAfterDeleteHooks = append(pegasysConnectionAfterDeleteHooks, pegasysConnectionHook)
	case boil.AfterUpsertHook:
		pegasysConnectionAfterUpsertHooks = append(pegasysConnectionAfterUpsertHooks, pegasysConnectionHook)
	}
}

// One returns a single pegasysConnection record from the query.
func (q pegasysConnectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PegasysConnection, error) {
	o := &PegasysConnection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pegasys_connections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PegasysConnection records from the query.
func (q pegasysConnectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PegasysConnectionSlice, error) {
	var o []*PegasysConnection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PegasysConnection slice")
	}

	if len(pegasysConnectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PegasysConnection records in the query.
func (q pegasysConnectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pegasys_connections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pegasysConnectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pegasys_connections exists")
	}

	return count > 0, nil
}

// PegasysConnections retrieves all the records using an executor.
func PegasysConnections(mods ...qm.QueryMod) pegasysConnectionQuery {
	mods = append(mods, qm.From("\"pegasys_connections\""))
	return pegasysConnectionQuery{NewQuery(mods...)}
}

// FindPegasysConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPegasysConnection(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PegasysConnection, error) {
	pegasysConnectionObj := &PegasysConnection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pegasys_connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pegasysConnectionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pegasys_connections")
	}

	if err = pegasysConnectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pegasysConnectionObj, err
	}

	return pegasysConnectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PegasysConnection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pegasys_connections provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pegasysConnectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pegasysConnectionInsertCacheMut.RLock()
	cache, cached := pegasysConnectionInsertCache[key]
	pegasysConnectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pegasysConnectionAllColumns,
			pegasysConnectionColumnsWithDefault,
			pegasysConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pegasys_connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pegasys_connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pegasys_connections")
	}

	if !cached {
		pegasysConnectionInsertCacheMut.Lock()
		pegasysConnectionInsertCache[key] = cache
		pegasysConnectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PegasysConnection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PegasysConnection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pegasysConnectionUpdateCacheMut.RLock()
	cache, cached := pegasysConnectionUpdateCache[key]
	pegasysConnectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pegasysConnectionAllColumns,
			pegasysConnectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pegasys_connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pegasys_connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pegasysConnectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, append(wl, pegasysConnectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pegasys_connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pegasys_connections")
	}

	if !cached {
		pegasysConnectionUpdateCacheMut.Lock()
		pegasysConnectionUpdateCache[key] = cache
		pegasysConnectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pegasysConnectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pegasys_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pegasys_connections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PegasysConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pegasysConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pegasys_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pegasysConnectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pegasysConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pegasysConnection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PegasysConnection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pegasys_connections provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pegasysConnectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pegasysConnectionUpsertCacheMut.RLock()
	cache, cached := pegasysConnectionUpsertCache[key]
	pegasysConnectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pegasysConnectionAllColumns,
			pegasysConnectionColumnsWithDefault,
			pegasysConnectionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pegasysConnectionAllColumns,
			pegasysConnectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pegasys_connections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pegasysConnectionPrimaryKeyColumns))
			copy(conflict, pegasysConnectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pegasys_connections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pegasysConnectionType, pegasysConnectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pegasys_connections")
	}

	if !cached {
		pegasysConnectionUpsertCacheMut.Lock()
		pegasysConnectionUpsertCache[key] = cache
		pegasysConnectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PegasysConnection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PegasysConnection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PegasysConnection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pegasysConnectionPrimaryKeyMapping)
	sql := "DELETE FROM \"pegasys_connections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pegasys_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pegasys_connections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pegasysConnectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pegasysConnectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pegasys_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pegasys_connections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PegasysConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pegasysConnectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pegasysConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pegasys_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pegasysConnectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pegasysConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pegasys_connections")
	}

	if len(pegasysConnectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PegasysConnection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPegasysConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PegasysConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PegasysConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pegasysConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pegasys_connections\".* FROM \"pegasys_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pegasysConnectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PegasysConnectionSlice")
	}

	*o = slice

	return nil
}

// PegasysConnectionExists checks if the PegasysConnection row exists.
func PegasysConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pegasys_connections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pegasys_connections exists")
	}

	return exists, nil
}
