// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Visit is an object representing the database table.
type Visit struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PeerID          int         `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	CrawlID         null.Int    `boil:"crawl_id" json:"crawl_id,omitempty" toml:"crawl_id" yaml:"crawl_id,omitempty"`
	SessionID       null.Int    `boil:"session_id" json:"session_id,omitempty" toml:"session_id" yaml:"session_id,omitempty"`
	DialDuration    null.String `boil:"dial_duration" json:"dial_duration,omitempty" toml:"dial_duration" yaml:"dial_duration,omitempty"`
	ConnectDuration null.String `boil:"connect_duration" json:"connect_duration,omitempty" toml:"connect_duration" yaml:"connect_duration,omitempty"`
	CrawlDuration   null.String `boil:"crawl_duration" json:"crawl_duration,omitempty" toml:"crawl_duration" yaml:"crawl_duration,omitempty"`
	VisitStartedAt  time.Time   `boil:"visit_started_at" json:"visit_started_at" toml:"visit_started_at" yaml:"visit_started_at"`
	VisitEndedAt    time.Time   `boil:"visit_ended_at" json:"visit_ended_at" toml:"visit_ended_at" yaml:"visit_ended_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Type            string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Error           null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *visitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L visitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VisitColumns = struct {
	ID              string
	PeerID          string
	CrawlID         string
	SessionID       string
	DialDuration    string
	ConnectDuration string
	CrawlDuration   string
	VisitStartedAt  string
	VisitEndedAt    string
	UpdatedAt       string
	CreatedAt       string
	Type            string
	Error           string
}{
	ID:              "id",
	PeerID:          "peer_id",
	CrawlID:         "crawl_id",
	SessionID:       "session_id",
	DialDuration:    "dial_duration",
	ConnectDuration: "connect_duration",
	CrawlDuration:   "crawl_duration",
	VisitStartedAt:  "visit_started_at",
	VisitEndedAt:    "visit_ended_at",
	UpdatedAt:       "updated_at",
	CreatedAt:       "created_at",
	Type:            "type",
	Error:           "error",
}

var VisitTableColumns = struct {
	ID              string
	PeerID          string
	CrawlID         string
	SessionID       string
	DialDuration    string
	ConnectDuration string
	CrawlDuration   string
	VisitStartedAt  string
	VisitEndedAt    string
	UpdatedAt       string
	CreatedAt       string
	Type            string
	Error           string
}{
	ID:              "visits.id",
	PeerID:          "visits.peer_id",
	CrawlID:         "visits.crawl_id",
	SessionID:       "visits.session_id",
	DialDuration:    "visits.dial_duration",
	ConnectDuration: "visits.connect_duration",
	CrawlDuration:   "visits.crawl_duration",
	VisitStartedAt:  "visits.visit_started_at",
	VisitEndedAt:    "visits.visit_ended_at",
	UpdatedAt:       "visits.updated_at",
	CreatedAt:       "visits.created_at",
	Type:            "visits.type",
	Error:           "visits.error",
}

// Generated where

var VisitWhere = struct {
	ID              whereHelperint
	PeerID          whereHelperint
	CrawlID         whereHelpernull_Int
	SessionID       whereHelpernull_Int
	DialDuration    whereHelpernull_String
	ConnectDuration whereHelpernull_String
	CrawlDuration   whereHelpernull_String
	VisitStartedAt  whereHelpertime_Time
	VisitEndedAt    whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	Type            whereHelperstring
	Error           whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"visits\".\"id\""},
	PeerID:          whereHelperint{field: "\"visits\".\"peer_id\""},
	CrawlID:         whereHelpernull_Int{field: "\"visits\".\"crawl_id\""},
	SessionID:       whereHelpernull_Int{field: "\"visits\".\"session_id\""},
	DialDuration:    whereHelpernull_String{field: "\"visits\".\"dial_duration\""},
	ConnectDuration: whereHelpernull_String{field: "\"visits\".\"connect_duration\""},
	CrawlDuration:   whereHelpernull_String{field: "\"visits\".\"crawl_duration\""},
	VisitStartedAt:  whereHelpertime_Time{field: "\"visits\".\"visit_started_at\""},
	VisitEndedAt:    whereHelpertime_Time{field: "\"visits\".\"visit_ended_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"visits\".\"updated_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"visits\".\"created_at\""},
	Type:            whereHelperstring{field: "\"visits\".\"type\""},
	Error:           whereHelpernull_String{field: "\"visits\".\"error\""},
}

// VisitRels is where relationship names are stored.
var VisitRels = struct {
	Crawl          string
	Peer           string
	Session        string
	MultiAddresses string
	Properties     string
}{
	Crawl:          "Crawl",
	Peer:           "Peer",
	Session:        "Session",
	MultiAddresses: "MultiAddresses",
	Properties:     "Properties",
}

// visitR is where relationships are stored.
type visitR struct {
	Crawl          *Crawl            `boil:"Crawl" json:"Crawl" toml:"Crawl" yaml:"Crawl"`
	Peer           *Peer             `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
	Session        *Session          `boil:"Session" json:"Session" toml:"Session" yaml:"Session"`
	MultiAddresses MultiAddressSlice `boil:"MultiAddresses" json:"MultiAddresses" toml:"MultiAddresses" yaml:"MultiAddresses"`
	Properties     PropertySlice     `boil:"Properties" json:"Properties" toml:"Properties" yaml:"Properties"`
}

// NewStruct creates a new relationship struct
func (*visitR) NewStruct() *visitR {
	return &visitR{}
}

// visitL is where Load methods for each relationship are stored.
type visitL struct{}

var (
	visitAllColumns            = []string{"id", "peer_id", "crawl_id", "session_id", "dial_duration", "connect_duration", "crawl_duration", "visit_started_at", "visit_ended_at", "updated_at", "created_at", "type", "error"}
	visitColumnsWithoutDefault = []string{"crawl_id", "session_id", "dial_duration", "connect_duration", "crawl_duration", "visit_started_at", "visit_ended_at", "updated_at", "created_at", "type", "error"}
	visitColumnsWithDefault    = []string{"id", "peer_id"}
	visitPrimaryKeyColumns     = []string{"id"}
)

type (
	// VisitSlice is an alias for a slice of pointers to Visit.
	// This should almost always be used instead of []Visit.
	VisitSlice []*Visit
	// VisitHook is the signature for custom Visit hook methods
	VisitHook func(context.Context, boil.ContextExecutor, *Visit) error

	visitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	visitType                 = reflect.TypeOf(&Visit{})
	visitMapping              = queries.MakeStructMapping(visitType)
	visitPrimaryKeyMapping, _ = queries.BindMapping(visitType, visitMapping, visitPrimaryKeyColumns)
	visitInsertCacheMut       sync.RWMutex
	visitInsertCache          = make(map[string]insertCache)
	visitUpdateCacheMut       sync.RWMutex
	visitUpdateCache          = make(map[string]updateCache)
	visitUpsertCacheMut       sync.RWMutex
	visitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var visitBeforeInsertHooks []VisitHook
var visitBeforeUpdateHooks []VisitHook
var visitBeforeDeleteHooks []VisitHook
var visitBeforeUpsertHooks []VisitHook

var visitAfterInsertHooks []VisitHook
var visitAfterSelectHooks []VisitHook
var visitAfterUpdateHooks []VisitHook
var visitAfterDeleteHooks []VisitHook
var visitAfterUpsertHooks []VisitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Visit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Visit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Visit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Visit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Visit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Visit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Visit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Visit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Visit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVisitHook registers your hook function for all future operations.
func AddVisitHook(hookPoint boil.HookPoint, visitHook VisitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		visitBeforeInsertHooks = append(visitBeforeInsertHooks, visitHook)
	case boil.BeforeUpdateHook:
		visitBeforeUpdateHooks = append(visitBeforeUpdateHooks, visitHook)
	case boil.BeforeDeleteHook:
		visitBeforeDeleteHooks = append(visitBeforeDeleteHooks, visitHook)
	case boil.BeforeUpsertHook:
		visitBeforeUpsertHooks = append(visitBeforeUpsertHooks, visitHook)
	case boil.AfterInsertHook:
		visitAfterInsertHooks = append(visitAfterInsertHooks, visitHook)
	case boil.AfterSelectHook:
		visitAfterSelectHooks = append(visitAfterSelectHooks, visitHook)
	case boil.AfterUpdateHook:
		visitAfterUpdateHooks = append(visitAfterUpdateHooks, visitHook)
	case boil.AfterDeleteHook:
		visitAfterDeleteHooks = append(visitAfterDeleteHooks, visitHook)
	case boil.AfterUpsertHook:
		visitAfterUpsertHooks = append(visitAfterUpsertHooks, visitHook)
	}
}

// One returns a single visit record from the query.
func (q visitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Visit, error) {
	o := &Visit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for visits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Visit records from the query.
func (q visitQuery) All(ctx context.Context, exec boil.ContextExecutor) (VisitSlice, error) {
	var o []*Visit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Visit slice")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Visit records in the query.
func (q visitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count visits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q visitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if visits exists")
	}

	return count > 0, nil
}

// Crawl pointed to by the foreign key.
func (o *Visit) Crawl(mods ...qm.QueryMod) crawlQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CrawlID),
	}

	queryMods = append(queryMods, mods...)

	query := Crawls(queryMods...)
	queries.SetFrom(query.Query, "\"crawls\"")

	return query
}

// Peer pointed to by the foreign key.
func (o *Visit) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Session pointed to by the foreign key.
func (o *Visit) Session(mods ...qm.QueryMod) sessionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SessionID),
	}

	queryMods = append(queryMods, mods...)

	query := Sessions(queryMods...)
	queries.SetFrom(query.Query, "\"sessions\"")

	return query
}

// MultiAddresses retrieves all the multi_address's MultiAddresses with an executor.
func (o *Visit) MultiAddresses(mods ...qm.QueryMod) multiAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"visits_x_multi_addresses\" on \"multi_addresses\".\"id\" = \"visits_x_multi_addresses\".\"multi_address_id\""),
		qm.Where("\"visits_x_multi_addresses\".\"visit_id\"=?", o.ID),
	)

	query := MultiAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"multi_addresses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"multi_addresses\".*"})
	}

	return query
}

// Properties retrieves all the property's Properties with an executor.
func (o *Visit) Properties(mods ...qm.QueryMod) propertyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"visits_x_properties\" on \"properties\".\"id\" = \"visits_x_properties\".\"property_id\""),
		qm.Where("\"visits_x_properties\".\"visit_id\"=?", o.ID),
	)

	query := Properties(queryMods...)
	queries.SetFrom(query.Query, "\"properties\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"properties\".*"})
	}

	return query
}

// LoadCrawl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (visitL) LoadCrawl(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisit interface{}, mods queries.Applicator) error {
	var slice []*Visit
	var object *Visit

	if singular {
		object = maybeVisit.(*Visit)
	} else {
		slice = *maybeVisit.(*[]*Visit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitR{}
		}
		if !queries.IsNil(object.CrawlID) {
			args = append(args, object.CrawlID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CrawlID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CrawlID) {
				args = append(args, obj.CrawlID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crawls`),
		qm.WhereIn(`crawls.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Crawl")
	}

	var resultSlice []*Crawl
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Crawl")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for crawls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crawls")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Crawl = foreign
		if foreign.R == nil {
			foreign.R = &crawlR{}
		}
		foreign.R.Visits = append(foreign.R.Visits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CrawlID, foreign.ID) {
				local.R.Crawl = foreign
				if foreign.R == nil {
					foreign.R = &crawlR{}
				}
				foreign.R.Visits = append(foreign.R.Visits, local)
				break
			}
		}
	}

	return nil
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (visitL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisit interface{}, mods queries.Applicator) error {
	var slice []*Visit
	var object *Visit

	if singular {
		object = maybeVisit.(*Visit)
	} else {
		slice = *maybeVisit.(*[]*Visit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.Visits = append(foreign.R.Visits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.Visits = append(foreign.R.Visits, local)
				break
			}
		}
	}

	return nil
}

// LoadSession allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (visitL) LoadSession(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisit interface{}, mods queries.Applicator) error {
	var slice []*Visit
	var object *Visit

	if singular {
		object = maybeVisit.(*Visit)
	} else {
		slice = *maybeVisit.(*[]*Visit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitR{}
		}
		if !queries.IsNil(object.SessionID) {
			args = append(args, object.SessionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SessionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SessionID) {
				args = append(args, obj.SessionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sessions`),
		qm.WhereIn(`sessions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Session")
	}

	var resultSlice []*Session
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Session")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sessions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sessions")
	}

	if len(visitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Session = foreign
		if foreign.R == nil {
			foreign.R = &sessionR{}
		}
		foreign.R.Visits = append(foreign.R.Visits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SessionID, foreign.ID) {
				local.R.Session = foreign
				if foreign.R == nil {
					foreign.R = &sessionR{}
				}
				foreign.R.Visits = append(foreign.R.Visits, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (visitL) LoadMultiAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisit interface{}, mods queries.Applicator) error {
	var slice []*Visit
	var object *Visit

	if singular {
		object = maybeVisit.(*Visit)
	} else {
		slice = *maybeVisit.(*[]*Visit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"multi_addresses\".id, \"multi_addresses\".maddr, \"multi_addresses\".addr, \"multi_addresses\".country, \"multi_addresses\".cloud_provider, \"multi_addresses\".updated_at, \"multi_addresses\".created_at, \"a\".\"visit_id\""),
		qm.From("\"multi_addresses\""),
		qm.InnerJoin("\"visits_x_multi_addresses\" as \"a\" on \"multi_addresses\".\"id\" = \"a\".\"multi_address_id\""),
		qm.WhereIn("\"a\".\"visit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load multi_addresses")
	}

	var resultSlice []*MultiAddress

	var localJoinCols []int
	for results.Next() {
		one := new(MultiAddress)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Maddr, &one.Addr, &one.Country, &one.CloudProvider, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for multi_addresses")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice multi_addresses")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(multiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MultiAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &multiAddressR{}
			}
			foreign.R.Visits = append(foreign.R.Visits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.MultiAddresses = append(local.R.MultiAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.Visits = append(foreign.R.Visits, local)
				break
			}
		}
	}

	return nil
}

// LoadProperties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (visitL) LoadProperties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisit interface{}, mods queries.Applicator) error {
	var slice []*Visit
	var object *Visit

	if singular {
		object = maybeVisit.(*Visit)
	} else {
		slice = *maybeVisit.(*[]*Visit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &visitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"properties\".id, \"properties\".property, \"properties\".value, \"properties\".updated_at, \"properties\".created_at, \"a\".\"visit_id\""),
		qm.From("\"properties\""),
		qm.InnerJoin("\"visits_x_properties\" as \"a\" on \"properties\".\"id\" = \"a\".\"property_id\""),
		qm.WhereIn("\"a\".\"visit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load properties")
	}

	var resultSlice []*Property

	var localJoinCols []int
	for results.Next() {
		one := new(Property)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Property, &one.Value, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for properties")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice properties")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for properties")
	}

	if len(propertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Properties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &propertyR{}
			}
			foreign.R.Visits = append(foreign.R.Visits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Properties = append(local.R.Properties, foreign)
				if foreign.R == nil {
					foreign.R = &propertyR{}
				}
				foreign.R.Visits = append(foreign.R.Visits, local)
				break
			}
		}
	}

	return nil
}

// SetCrawl of the visit to the related item.
// Sets o.R.Crawl to related.
// Adds o to related.R.Visits.
func (o *Visit) SetCrawl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Crawl) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"visits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"crawl_id"}),
		strmangle.WhereClause("\"", "\"", 2, visitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CrawlID, related.ID)
	if o.R == nil {
		o.R = &visitR{
			Crawl: related,
		}
	} else {
		o.R.Crawl = related
	}

	if related.R == nil {
		related.R = &crawlR{
			Visits: VisitSlice{o},
		}
	} else {
		related.R.Visits = append(related.R.Visits, o)
	}

	return nil
}

// RemoveCrawl relationship.
// Sets o.R.Crawl to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Visit) RemoveCrawl(ctx context.Context, exec boil.ContextExecutor, related *Crawl) error {
	var err error

	queries.SetScanner(&o.CrawlID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("crawl_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Crawl = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Visits {
		if queries.Equal(o.CrawlID, ri.CrawlID) {
			continue
		}

		ln := len(related.R.Visits)
		if ln > 1 && i < ln-1 {
			related.R.Visits[i] = related.R.Visits[ln-1]
		}
		related.R.Visits = related.R.Visits[:ln-1]
		break
	}
	return nil
}

// SetPeer of the visit to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.Visits.
func (o *Visit) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"visits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, visitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &visitR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			Visits: VisitSlice{o},
		}
	} else {
		related.R.Visits = append(related.R.Visits, o)
	}

	return nil
}

// SetSession of the visit to the related item.
// Sets o.R.Session to related.
// Adds o to related.R.Visits.
func (o *Visit) SetSession(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Session) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"visits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"session_id"}),
		strmangle.WhereClause("\"", "\"", 2, visitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SessionID, related.ID)
	if o.R == nil {
		o.R = &visitR{
			Session: related,
		}
	} else {
		o.R.Session = related
	}

	if related.R == nil {
		related.R = &sessionR{
			Visits: VisitSlice{o},
		}
	} else {
		related.R.Visits = append(related.R.Visits, o)
	}

	return nil
}

// RemoveSession relationship.
// Sets o.R.Session to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Visit) RemoveSession(ctx context.Context, exec boil.ContextExecutor, related *Session) error {
	var err error

	queries.SetScanner(&o.SessionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("session_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Session = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Visits {
		if queries.Equal(o.SessionID, ri.SessionID) {
			continue
		}

		ln := len(related.R.Visits)
		if ln > 1 && i < ln-1 {
			related.R.Visits[i] = related.R.Visits[ln-1]
		}
		related.R.Visits = related.R.Visits[:ln-1]
		break
	}
	return nil
}

// AddMultiAddresses adds the given related objects to the existing relationships
// of the visit, optionally inserting them as new records.
// Appends related to o.R.MultiAddresses.
// Sets related.R.Visits appropriately.
func (o *Visit) AddMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"visits_x_multi_addresses\" (\"visit_id\", \"multi_address_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &visitR{
			MultiAddresses: related,
		}
	} else {
		o.R.MultiAddresses = append(o.R.MultiAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &multiAddressR{
				Visits: VisitSlice{o},
			}
		} else {
			rel.R.Visits = append(rel.R.Visits, o)
		}
	}
	return nil
}

// SetMultiAddresses removes all previously related items of the
// visit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Visits's MultiAddresses accordingly.
// Replaces o.R.MultiAddresses with related.
// Sets related.R.Visits's MultiAddresses accordingly.
func (o *Visit) SetMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	query := "delete from \"visits_x_multi_addresses\" where \"visit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMultiAddressesFromVisitsSlice(o, related)
	if o.R != nil {
		o.R.MultiAddresses = nil
	}
	return o.AddMultiAddresses(ctx, exec, insert, related...)
}

// RemoveMultiAddresses relationships from objects passed in.
// Removes related items from R.MultiAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Visits.
func (o *Visit) RemoveMultiAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*MultiAddress) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"visits_x_multi_addresses\" where \"visit_id\" = $1 and \"multi_address_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMultiAddressesFromVisitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MultiAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.MultiAddresses)
			if ln > 1 && i < ln-1 {
				o.R.MultiAddresses[i] = o.R.MultiAddresses[ln-1]
			}
			o.R.MultiAddresses = o.R.MultiAddresses[:ln-1]
			break
		}
	}

	return nil
}

func removeMultiAddressesFromVisitsSlice(o *Visit, related []*MultiAddress) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Visits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Visits)
			if ln > 1 && i < ln-1 {
				rel.R.Visits[i] = rel.R.Visits[ln-1]
			}
			rel.R.Visits = rel.R.Visits[:ln-1]
			break
		}
	}
}

// AddProperties adds the given related objects to the existing relationships
// of the visit, optionally inserting them as new records.
// Appends related to o.R.Properties.
// Sets related.R.Visits appropriately.
func (o *Visit) AddProperties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Property) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"visits_x_properties\" (\"visit_id\", \"property_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &visitR{
			Properties: related,
		}
	} else {
		o.R.Properties = append(o.R.Properties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &propertyR{
				Visits: VisitSlice{o},
			}
		} else {
			rel.R.Visits = append(rel.R.Visits, o)
		}
	}
	return nil
}

// SetProperties removes all previously related items of the
// visit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Visits's Properties accordingly.
// Replaces o.R.Properties with related.
// Sets related.R.Visits's Properties accordingly.
func (o *Visit) SetProperties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Property) error {
	query := "delete from \"visits_x_properties\" where \"visit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePropertiesFromVisitsSlice(o, related)
	if o.R != nil {
		o.R.Properties = nil
	}
	return o.AddProperties(ctx, exec, insert, related...)
}

// RemoveProperties relationships from objects passed in.
// Removes related items from R.Properties (uses pointer comparison, removal does not keep order)
// Sets related.R.Visits.
func (o *Visit) RemoveProperties(ctx context.Context, exec boil.ContextExecutor, related ...*Property) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"visits_x_properties\" where \"visit_id\" = $1 and \"property_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePropertiesFromVisitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Properties {
			if rel != ri {
				continue
			}

			ln := len(o.R.Properties)
			if ln > 1 && i < ln-1 {
				o.R.Properties[i] = o.R.Properties[ln-1]
			}
			o.R.Properties = o.R.Properties[:ln-1]
			break
		}
	}

	return nil
}

func removePropertiesFromVisitsSlice(o *Visit, related []*Property) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Visits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Visits)
			if ln > 1 && i < ln-1 {
				rel.R.Visits[i] = rel.R.Visits[ln-1]
			}
			rel.R.Visits = rel.R.Visits[:ln-1]
			break
		}
	}
}

// Visits retrieves all the records using an executor.
func Visits(mods ...qm.QueryMod) visitQuery {
	mods = append(mods, qm.From("\"visits\""))
	return visitQuery{NewQuery(mods...)}
}

// FindVisit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVisit(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Visit, error) {
	visitObj := &Visit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"visits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, visitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from visits")
	}

	if err = visitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return visitObj, err
	}

	return visitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Visit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no visits provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	visitInsertCacheMut.RLock()
	cache, cached := visitInsertCache[key]
	visitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			visitAllColumns,
			visitColumnsWithDefault,
			visitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(visitType, visitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(visitType, visitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"visits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"visits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into visits")
	}

	if !cached {
		visitInsertCacheMut.Lock()
		visitInsertCache[key] = cache
		visitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Visit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Visit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	visitUpdateCacheMut.RLock()
	cache, cached := visitUpdateCache[key]
	visitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			visitAllColumns,
			visitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update visits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"visits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, visitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(visitType, visitMapping, append(wl, visitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update visits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for visits")
	}

	if !cached {
		visitUpdateCacheMut.Lock()
		visitUpdateCache[key] = cache
		visitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q visitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for visits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for visits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VisitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"visits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, visitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in visit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all visit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Visit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no visits provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	visitUpsertCacheMut.RLock()
	cache, cached := visitUpsertCache[key]
	visitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			visitAllColumns,
			visitColumnsWithDefault,
			visitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			visitAllColumns,
			visitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert visits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(visitPrimaryKeyColumns))
			copy(conflict, visitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"visits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(visitType, visitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(visitType, visitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert visits")
	}

	if !cached {
		visitUpsertCacheMut.Lock()
		visitUpsertCache[key] = cache
		visitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Visit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Visit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Visit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), visitPrimaryKeyMapping)
	sql := "DELETE FROM \"visits\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from visits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for visits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q visitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no visitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from visits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for visits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VisitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(visitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"visits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, visitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from visit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for visits")
	}

	if len(visitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Visit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVisit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VisitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VisitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"visits\".* FROM \"visits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, visitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VisitSlice")
	}

	*o = slice

	return nil
}

// VisitExists checks if the Visit row exists.
func VisitExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"visits\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if visits exists")
	}

	return exists, nil
}
