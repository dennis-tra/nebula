// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PeerProperty is an object representing the database table.
type PeerProperty struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Property  string    `boil:"property" json:"property" toml:"property" yaml:"property"`
	Value     string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Count     int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	CrawlID   int       `boil:"crawl_id" json:"crawl_id" toml:"crawl_id" yaml:"crawl_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *peerPropertyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerPropertyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerPropertyColumns = struct {
	ID        string
	Property  string
	Value     string
	Count     string
	CrawlID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Property:  "property",
	Value:     "value",
	Count:     "count",
	CrawlID:   "crawl_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var PeerPropertyTableColumns = struct {
	ID        string
	Property  string
	Value     string
	Count     string
	CrawlID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "peer_properties.id",
	Property:  "peer_properties.property",
	Value:     "peer_properties.value",
	Count:     "peer_properties.count",
	CrawlID:   "peer_properties.crawl_id",
	CreatedAt: "peer_properties.created_at",
	UpdatedAt: "peer_properties.updated_at",
}

// Generated where

var PeerPropertyWhere = struct {
	ID        whereHelperint
	Property  whereHelperstring
	Value     whereHelperstring
	Count     whereHelperint
	CrawlID   whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"peer_properties\".\"id\""},
	Property:  whereHelperstring{field: "\"peer_properties\".\"property\""},
	Value:     whereHelperstring{field: "\"peer_properties\".\"value\""},
	Count:     whereHelperint{field: "\"peer_properties\".\"count\""},
	CrawlID:   whereHelperint{field: "\"peer_properties\".\"crawl_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"peer_properties\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"peer_properties\".\"updated_at\""},
}

// PeerPropertyRels is where relationship names are stored.
var PeerPropertyRels = struct {
	Crawl string
}{
	Crawl: "Crawl",
}

// peerPropertyR is where relationships are stored.
type peerPropertyR struct {
	Crawl *Crawl `boil:"Crawl" json:"Crawl" toml:"Crawl" yaml:"Crawl"`
}

// NewStruct creates a new relationship struct
func (*peerPropertyR) NewStruct() *peerPropertyR {
	return &peerPropertyR{}
}

// peerPropertyL is where Load methods for each relationship are stored.
type peerPropertyL struct{}

var (
	peerPropertyAllColumns            = []string{"id", "property", "value", "count", "crawl_id", "created_at", "updated_at"}
	peerPropertyColumnsWithoutDefault = []string{"property", "value", "count", "created_at", "updated_at"}
	peerPropertyColumnsWithDefault    = []string{"id", "crawl_id"}
	peerPropertyPrimaryKeyColumns     = []string{"id"}
)

type (
	// PeerPropertySlice is an alias for a slice of pointers to PeerProperty.
	// This should almost always be used instead of []PeerProperty.
	PeerPropertySlice []*PeerProperty
	// PeerPropertyHook is the signature for custom PeerProperty hook methods
	PeerPropertyHook func(context.Context, boil.ContextExecutor, *PeerProperty) error

	peerPropertyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerPropertyType                 = reflect.TypeOf(&PeerProperty{})
	peerPropertyMapping              = queries.MakeStructMapping(peerPropertyType)
	peerPropertyPrimaryKeyMapping, _ = queries.BindMapping(peerPropertyType, peerPropertyMapping, peerPropertyPrimaryKeyColumns)
	peerPropertyInsertCacheMut       sync.RWMutex
	peerPropertyInsertCache          = make(map[string]insertCache)
	peerPropertyUpdateCacheMut       sync.RWMutex
	peerPropertyUpdateCache          = make(map[string]updateCache)
	peerPropertyUpsertCacheMut       sync.RWMutex
	peerPropertyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var peerPropertyBeforeInsertHooks []PeerPropertyHook
var peerPropertyBeforeUpdateHooks []PeerPropertyHook
var peerPropertyBeforeDeleteHooks []PeerPropertyHook
var peerPropertyBeforeUpsertHooks []PeerPropertyHook

var peerPropertyAfterInsertHooks []PeerPropertyHook
var peerPropertyAfterSelectHooks []PeerPropertyHook
var peerPropertyAfterUpdateHooks []PeerPropertyHook
var peerPropertyAfterDeleteHooks []PeerPropertyHook
var peerPropertyAfterUpsertHooks []PeerPropertyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PeerProperty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PeerProperty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PeerProperty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PeerProperty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PeerProperty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PeerProperty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PeerProperty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PeerProperty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PeerProperty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerPropertyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPeerPropertyHook registers your hook function for all future operations.
func AddPeerPropertyHook(hookPoint boil.HookPoint, peerPropertyHook PeerPropertyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		peerPropertyBeforeInsertHooks = append(peerPropertyBeforeInsertHooks, peerPropertyHook)
	case boil.BeforeUpdateHook:
		peerPropertyBeforeUpdateHooks = append(peerPropertyBeforeUpdateHooks, peerPropertyHook)
	case boil.BeforeDeleteHook:
		peerPropertyBeforeDeleteHooks = append(peerPropertyBeforeDeleteHooks, peerPropertyHook)
	case boil.BeforeUpsertHook:
		peerPropertyBeforeUpsertHooks = append(peerPropertyBeforeUpsertHooks, peerPropertyHook)
	case boil.AfterInsertHook:
		peerPropertyAfterInsertHooks = append(peerPropertyAfterInsertHooks, peerPropertyHook)
	case boil.AfterSelectHook:
		peerPropertyAfterSelectHooks = append(peerPropertyAfterSelectHooks, peerPropertyHook)
	case boil.AfterUpdateHook:
		peerPropertyAfterUpdateHooks = append(peerPropertyAfterUpdateHooks, peerPropertyHook)
	case boil.AfterDeleteHook:
		peerPropertyAfterDeleteHooks = append(peerPropertyAfterDeleteHooks, peerPropertyHook)
	case boil.AfterUpsertHook:
		peerPropertyAfterUpsertHooks = append(peerPropertyAfterUpsertHooks, peerPropertyHook)
	}
}

// One returns a single peerProperty record from the query.
func (q peerPropertyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PeerProperty, error) {
	o := &PeerProperty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for peer_properties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PeerProperty records from the query.
func (q peerPropertyQuery) All(ctx context.Context, exec boil.ContextExecutor) (PeerPropertySlice, error) {
	var o []*PeerProperty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PeerProperty slice")
	}

	if len(peerPropertyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PeerProperty records in the query.
func (q peerPropertyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count peer_properties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q peerPropertyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if peer_properties exists")
	}

	return count > 0, nil
}

// Crawl pointed to by the foreign key.
func (o *PeerProperty) Crawl(mods ...qm.QueryMod) crawlQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CrawlID),
	}

	queryMods = append(queryMods, mods...)

	query := Crawls(queryMods...)
	queries.SetFrom(query.Query, "\"crawls\"")

	return query
}

// LoadCrawl allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peerPropertyL) LoadCrawl(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeerProperty interface{}, mods queries.Applicator) error {
	var slice []*PeerProperty
	var object *PeerProperty

	if singular {
		object = maybePeerProperty.(*PeerProperty)
	} else {
		slice = *maybePeerProperty.(*[]*PeerProperty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerPropertyR{}
		}
		args = append(args, object.CrawlID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerPropertyR{}
			}

			for _, a := range args {
				if a == obj.CrawlID {
					continue Outer
				}
			}

			args = append(args, obj.CrawlID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crawls`),
		qm.WhereIn(`crawls.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Crawl")
	}

	var resultSlice []*Crawl
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Crawl")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for crawls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crawls")
	}

	if len(peerPropertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Crawl = foreign
		if foreign.R == nil {
			foreign.R = &crawlR{}
		}
		foreign.R.PeerProperties = append(foreign.R.PeerProperties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CrawlID == foreign.ID {
				local.R.Crawl = foreign
				if foreign.R == nil {
					foreign.R = &crawlR{}
				}
				foreign.R.PeerProperties = append(foreign.R.PeerProperties, local)
				break
			}
		}
	}

	return nil
}

// SetCrawl of the peerProperty to the related item.
// Sets o.R.Crawl to related.
// Adds o to related.R.PeerProperties.
func (o *PeerProperty) SetCrawl(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Crawl) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peer_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"crawl_id"}),
		strmangle.WhereClause("\"", "\"", 2, peerPropertyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CrawlID = related.ID
	if o.R == nil {
		o.R = &peerPropertyR{
			Crawl: related,
		}
	} else {
		o.R.Crawl = related
	}

	if related.R == nil {
		related.R = &crawlR{
			PeerProperties: PeerPropertySlice{o},
		}
	} else {
		related.R.PeerProperties = append(related.R.PeerProperties, o)
	}

	return nil
}

// PeerProperties retrieves all the records using an executor.
func PeerProperties(mods ...qm.QueryMod) peerPropertyQuery {
	mods = append(mods, qm.From("\"peer_properties\""))
	return peerPropertyQuery{NewQuery(mods...)}
}

// FindPeerProperty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeerProperty(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PeerProperty, error) {
	peerPropertyObj := &PeerProperty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"peer_properties\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, peerPropertyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from peer_properties")
	}

	if err = peerPropertyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return peerPropertyObj, err
	}

	return peerPropertyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PeerProperty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peer_properties provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerPropertyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	peerPropertyInsertCacheMut.RLock()
	cache, cached := peerPropertyInsertCache[key]
	peerPropertyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			peerPropertyAllColumns,
			peerPropertyColumnsWithDefault,
			peerPropertyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(peerPropertyType, peerPropertyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerPropertyType, peerPropertyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"peer_properties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"peer_properties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into peer_properties")
	}

	if !cached {
		peerPropertyInsertCacheMut.Lock()
		peerPropertyInsertCache[key] = cache
		peerPropertyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PeerProperty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PeerProperty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	peerPropertyUpdateCacheMut.RLock()
	cache, cached := peerPropertyUpdateCache[key]
	peerPropertyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			peerPropertyAllColumns,
			peerPropertyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update peer_properties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"peer_properties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, peerPropertyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerPropertyType, peerPropertyMapping, append(wl, peerPropertyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update peer_properties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for peer_properties")
	}

	if !cached {
		peerPropertyUpdateCacheMut.Lock()
		peerPropertyUpdateCache[key] = cache
		peerPropertyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q peerPropertyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for peer_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for peer_properties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerPropertySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"peer_properties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, peerPropertyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in peerProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all peerProperty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PeerProperty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peer_properties provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerPropertyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerPropertyUpsertCacheMut.RLock()
	cache, cached := peerPropertyUpsertCache[key]
	peerPropertyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			peerPropertyAllColumns,
			peerPropertyColumnsWithDefault,
			peerPropertyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			peerPropertyAllColumns,
			peerPropertyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert peer_properties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(peerPropertyPrimaryKeyColumns))
			copy(conflict, peerPropertyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"peer_properties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(peerPropertyType, peerPropertyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerPropertyType, peerPropertyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert peer_properties")
	}

	if !cached {
		peerPropertyUpsertCacheMut.Lock()
		peerPropertyUpsertCache[key] = cache
		peerPropertyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PeerProperty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PeerProperty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PeerProperty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerPropertyPrimaryKeyMapping)
	sql := "DELETE FROM \"peer_properties\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from peer_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for peer_properties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q peerPropertyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no peerPropertyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peer_properties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peer_properties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerPropertySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(peerPropertyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"peer_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPropertyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peerProperty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peer_properties")
	}

	if len(peerPropertyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PeerProperty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPeerProperty(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerPropertySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PeerPropertySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPropertyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"peer_properties\".* FROM \"peer_properties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPropertyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PeerPropertySlice")
	}

	*o = slice

	return nil
}

// PeerPropertyExists checks if the PeerProperty row exists.
func PeerPropertyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"peer_properties\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if peer_properties exists")
	}

	return exists, nil
}
