// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Neighbour is an object representing the database table.
type Neighbour struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CrawlStartAt null.Time `boil:"crawl_start_at" json:"crawl_start_at,omitempty" toml:"crawl_start_at" yaml:"crawl_start_at,omitempty"`
	PeerID       int       `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	NeighbourID  int       `boil:"neighbour_id" json:"neighbour_id" toml:"neighbour_id" yaml:"neighbour_id"`

	R *neighbourR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L neighbourL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NeighbourColumns = struct {
	ID           string
	CreatedAt    string
	CrawlStartAt string
	PeerID       string
	NeighbourID  string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	CrawlStartAt: "crawl_start_at",
	PeerID:       "peer_id",
	NeighbourID:  "neighbour_id",
}

var NeighbourTableColumns = struct {
	ID           string
	CreatedAt    string
	CrawlStartAt string
	PeerID       string
	NeighbourID  string
}{
	ID:           "neighbours.id",
	CreatedAt:    "neighbours.created_at",
	CrawlStartAt: "neighbours.crawl_start_at",
	PeerID:       "neighbours.peer_id",
	NeighbourID:  "neighbours.neighbour_id",
}

// Generated where

var NeighbourWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpernull_Time
	CrawlStartAt whereHelpernull_Time
	PeerID       whereHelperint
	NeighbourID  whereHelperint
}{
	ID:           whereHelperint{field: "\"neighbours\".\"id\""},
	CreatedAt:    whereHelpernull_Time{field: "\"neighbours\".\"created_at\""},
	CrawlStartAt: whereHelpernull_Time{field: "\"neighbours\".\"crawl_start_at\""},
	PeerID:       whereHelperint{field: "\"neighbours\".\"peer_id\""},
	NeighbourID:  whereHelperint{field: "\"neighbours\".\"neighbour_id\""},
}

// NeighbourRels is where relationship names are stored.
var NeighbourRels = struct {
	Neighbour string
	Peer      string
}{
	Neighbour: "Neighbour",
	Peer:      "Peer",
}

// neighbourR is where relationships are stored.
type neighbourR struct {
	Neighbour *Peer `boil:"Neighbour" json:"Neighbour" toml:"Neighbour" yaml:"Neighbour"`
	Peer      *Peer `boil:"Peer" json:"Peer" toml:"Peer" yaml:"Peer"`
}

// NewStruct creates a new relationship struct
func (*neighbourR) NewStruct() *neighbourR {
	return &neighbourR{}
}

// neighbourL is where Load methods for each relationship are stored.
type neighbourL struct{}

var (
	neighbourAllColumns            = []string{"id", "created_at", "crawl_start_at", "peer_id", "neighbour_id"}
	neighbourColumnsWithoutDefault = []string{"created_at", "crawl_start_at"}
	neighbourColumnsWithDefault    = []string{"id", "peer_id", "neighbour_id"}
	neighbourPrimaryKeyColumns     = []string{"id"}
)

type (
	// NeighbourSlice is an alias for a slice of pointers to Neighbour.
	// This should almost always be used instead of []Neighbour.
	NeighbourSlice []*Neighbour
	// NeighbourHook is the signature for custom Neighbour hook methods
	NeighbourHook func(context.Context, boil.ContextExecutor, *Neighbour) error

	neighbourQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	neighbourType                 = reflect.TypeOf(&Neighbour{})
	neighbourMapping              = queries.MakeStructMapping(neighbourType)
	neighbourPrimaryKeyMapping, _ = queries.BindMapping(neighbourType, neighbourMapping, neighbourPrimaryKeyColumns)
	neighbourInsertCacheMut       sync.RWMutex
	neighbourInsertCache          = make(map[string]insertCache)
	neighbourUpdateCacheMut       sync.RWMutex
	neighbourUpdateCache          = make(map[string]updateCache)
	neighbourUpsertCacheMut       sync.RWMutex
	neighbourUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var neighbourBeforeInsertHooks []NeighbourHook
var neighbourBeforeUpdateHooks []NeighbourHook
var neighbourBeforeDeleteHooks []NeighbourHook
var neighbourBeforeUpsertHooks []NeighbourHook

var neighbourAfterInsertHooks []NeighbourHook
var neighbourAfterSelectHooks []NeighbourHook
var neighbourAfterUpdateHooks []NeighbourHook
var neighbourAfterDeleteHooks []NeighbourHook
var neighbourAfterUpsertHooks []NeighbourHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Neighbour) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Neighbour) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Neighbour) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Neighbour) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Neighbour) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Neighbour) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Neighbour) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Neighbour) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Neighbour) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range neighbourAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNeighbourHook registers your hook function for all future operations.
func AddNeighbourHook(hookPoint boil.HookPoint, neighbourHook NeighbourHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		neighbourBeforeInsertHooks = append(neighbourBeforeInsertHooks, neighbourHook)
	case boil.BeforeUpdateHook:
		neighbourBeforeUpdateHooks = append(neighbourBeforeUpdateHooks, neighbourHook)
	case boil.BeforeDeleteHook:
		neighbourBeforeDeleteHooks = append(neighbourBeforeDeleteHooks, neighbourHook)
	case boil.BeforeUpsertHook:
		neighbourBeforeUpsertHooks = append(neighbourBeforeUpsertHooks, neighbourHook)
	case boil.AfterInsertHook:
		neighbourAfterInsertHooks = append(neighbourAfterInsertHooks, neighbourHook)
	case boil.AfterSelectHook:
		neighbourAfterSelectHooks = append(neighbourAfterSelectHooks, neighbourHook)
	case boil.AfterUpdateHook:
		neighbourAfterUpdateHooks = append(neighbourAfterUpdateHooks, neighbourHook)
	case boil.AfterDeleteHook:
		neighbourAfterDeleteHooks = append(neighbourAfterDeleteHooks, neighbourHook)
	case boil.AfterUpsertHook:
		neighbourAfterUpsertHooks = append(neighbourAfterUpsertHooks, neighbourHook)
	}
}

// One returns a single neighbour record from the query.
func (q neighbourQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Neighbour, error) {
	o := &Neighbour{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for neighbours")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Neighbour records from the query.
func (q neighbourQuery) All(ctx context.Context, exec boil.ContextExecutor) (NeighbourSlice, error) {
	var o []*Neighbour

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Neighbour slice")
	}

	if len(neighbourAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Neighbour records in the query.
func (q neighbourQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count neighbours rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q neighbourQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if neighbours exists")
	}

	return count > 0, nil
}

// Neighbour pointed to by the foreign key.
func (o *Neighbour) Neighbour(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NeighbourID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Peer pointed to by the foreign key.
func (o *Neighbour) Peer(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PeerID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// LoadNeighbour allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (neighbourL) LoadNeighbour(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNeighbour interface{}, mods queries.Applicator) error {
	var slice []*Neighbour
	var object *Neighbour

	if singular {
		object = maybeNeighbour.(*Neighbour)
	} else {
		slice = *maybeNeighbour.(*[]*Neighbour)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &neighbourR{}
		}
		args = append(args, object.NeighbourID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &neighbourR{}
			}

			for _, a := range args {
				if a == obj.NeighbourID {
					continue Outer
				}
			}

			args = append(args, obj.NeighbourID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(neighbourAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Neighbour = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.NeighbourNeighbours = append(foreign.R.NeighbourNeighbours, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NeighbourID == foreign.ID {
				local.R.Neighbour = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.NeighbourNeighbours = append(foreign.R.NeighbourNeighbours, local)
				break
			}
		}
	}

	return nil
}

// LoadPeer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (neighbourL) LoadPeer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNeighbour interface{}, mods queries.Applicator) error {
	var slice []*Neighbour
	var object *Neighbour

	if singular {
		object = maybeNeighbour.(*Neighbour)
	} else {
		slice = *maybeNeighbour.(*[]*Neighbour)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &neighbourR{}
		}
		args = append(args, object.PeerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &neighbourR{}
			}

			for _, a := range args {
				if a == obj.PeerID {
					continue Outer
				}
			}

			args = append(args, obj.PeerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(neighbourAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Peer = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.Neighbours = append(foreign.R.Neighbours, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeerID == foreign.ID {
				local.R.Peer = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.Neighbours = append(foreign.R.Neighbours, local)
				break
			}
		}
	}

	return nil
}

// SetNeighbour of the neighbour to the related item.
// Sets o.R.Neighbour to related.
// Adds o to related.R.NeighbourNeighbours.
func (o *Neighbour) SetNeighbour(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"neighbours\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"neighbour_id"}),
		strmangle.WhereClause("\"", "\"", 2, neighbourPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NeighbourID = related.ID
	if o.R == nil {
		o.R = &neighbourR{
			Neighbour: related,
		}
	} else {
		o.R.Neighbour = related
	}

	if related.R == nil {
		related.R = &peerR{
			NeighbourNeighbours: NeighbourSlice{o},
		}
	} else {
		related.R.NeighbourNeighbours = append(related.R.NeighbourNeighbours, o)
	}

	return nil
}

// SetPeer of the neighbour to the related item.
// Sets o.R.Peer to related.
// Adds o to related.R.Neighbours.
func (o *Neighbour) SetPeer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"neighbours\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
		strmangle.WhereClause("\"", "\"", 2, neighbourPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeerID = related.ID
	if o.R == nil {
		o.R = &neighbourR{
			Peer: related,
		}
	} else {
		o.R.Peer = related
	}

	if related.R == nil {
		related.R = &peerR{
			Neighbours: NeighbourSlice{o},
		}
	} else {
		related.R.Neighbours = append(related.R.Neighbours, o)
	}

	return nil
}

// Neighbours retrieves all the records using an executor.
func Neighbours(mods ...qm.QueryMod) neighbourQuery {
	mods = append(mods, qm.From("\"neighbours\""))
	return neighbourQuery{NewQuery(mods...)}
}

// FindNeighbour retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNeighbour(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Neighbour, error) {
	neighbourObj := &Neighbour{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"neighbours\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, neighbourObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from neighbours")
	}

	if err = neighbourObj.doAfterSelectHooks(ctx, exec); err != nil {
		return neighbourObj, err
	}

	return neighbourObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Neighbour) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no neighbours provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(neighbourColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	neighbourInsertCacheMut.RLock()
	cache, cached := neighbourInsertCache[key]
	neighbourInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			neighbourAllColumns,
			neighbourColumnsWithDefault,
			neighbourColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(neighbourType, neighbourMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(neighbourType, neighbourMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"neighbours\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"neighbours\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into neighbours")
	}

	if !cached {
		neighbourInsertCacheMut.Lock()
		neighbourInsertCache[key] = cache
		neighbourInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Neighbour.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Neighbour) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	neighbourUpdateCacheMut.RLock()
	cache, cached := neighbourUpdateCache[key]
	neighbourUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			neighbourAllColumns,
			neighbourPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update neighbours, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"neighbours\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, neighbourPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(neighbourType, neighbourMapping, append(wl, neighbourPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update neighbours row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for neighbours")
	}

	if !cached {
		neighbourUpdateCacheMut.Lock()
		neighbourUpdateCache[key] = cache
		neighbourUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q neighbourQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for neighbours")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for neighbours")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NeighbourSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighbourPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"neighbours\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, neighbourPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in neighbour slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all neighbour")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Neighbour) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no neighbours provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(neighbourColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	neighbourUpsertCacheMut.RLock()
	cache, cached := neighbourUpsertCache[key]
	neighbourUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			neighbourAllColumns,
			neighbourColumnsWithDefault,
			neighbourColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			neighbourAllColumns,
			neighbourPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert neighbours, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(neighbourPrimaryKeyColumns))
			copy(conflict, neighbourPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"neighbours\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(neighbourType, neighbourMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(neighbourType, neighbourMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert neighbours")
	}

	if !cached {
		neighbourUpsertCacheMut.Lock()
		neighbourUpsertCache[key] = cache
		neighbourUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Neighbour record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Neighbour) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Neighbour provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), neighbourPrimaryKeyMapping)
	sql := "DELETE FROM \"neighbours\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from neighbours")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for neighbours")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q neighbourQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no neighbourQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from neighbours")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for neighbours")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NeighbourSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(neighbourBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighbourPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"neighbours\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, neighbourPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from neighbour slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for neighbours")
	}

	if len(neighbourAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Neighbour) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNeighbour(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NeighbourSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NeighbourSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), neighbourPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"neighbours\".* FROM \"neighbours\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, neighbourPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NeighbourSlice")
	}

	*o = slice

	return nil
}

// NeighbourExists checks if the Neighbour row exists.
func NeighbourExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"neighbours\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if neighbours exists")
	}

	return exists, nil
}
