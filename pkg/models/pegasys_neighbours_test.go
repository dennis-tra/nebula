// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPegasysNeighbours(t *testing.T) {
	t.Parallel()

	query := PegasysNeighbours()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPegasysNeighboursDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysNeighboursQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PegasysNeighbours().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysNeighboursSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PegasysNeighbourSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysNeighboursExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PegasysNeighbourExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PegasysNeighbour exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PegasysNeighbourExists to return true, but got false.")
	}
}

func testPegasysNeighboursFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pegasysNeighbourFound, err := FindPegasysNeighbour(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pegasysNeighbourFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPegasysNeighboursBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PegasysNeighbours().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPegasysNeighboursOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PegasysNeighbours().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPegasysNeighboursAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pegasysNeighbourOne := &PegasysNeighbour{}
	pegasysNeighbourTwo := &PegasysNeighbour{}
	if err = randomize.Struct(seed, pegasysNeighbourOne, pegasysNeighbourDBTypes, false, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}
	if err = randomize.Struct(seed, pegasysNeighbourTwo, pegasysNeighbourDBTypes, false, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pegasysNeighbourOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pegasysNeighbourTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PegasysNeighbours().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPegasysNeighboursCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pegasysNeighbourOne := &PegasysNeighbour{}
	pegasysNeighbourTwo := &PegasysNeighbour{}
	if err = randomize.Struct(seed, pegasysNeighbourOne, pegasysNeighbourDBTypes, false, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}
	if err = randomize.Struct(seed, pegasysNeighbourTwo, pegasysNeighbourDBTypes, false, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pegasysNeighbourOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pegasysNeighbourTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pegasysNeighbourBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func pegasysNeighbourAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysNeighbour) error {
	*o = PegasysNeighbour{}
	return nil
}

func testPegasysNeighboursHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PegasysNeighbour{}
	o := &PegasysNeighbour{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour object: %s", err)
	}

	AddPegasysNeighbourHook(boil.BeforeInsertHook, pegasysNeighbourBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourBeforeInsertHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.AfterInsertHook, pegasysNeighbourAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourAfterInsertHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.AfterSelectHook, pegasysNeighbourAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourAfterSelectHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.BeforeUpdateHook, pegasysNeighbourBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourBeforeUpdateHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.AfterUpdateHook, pegasysNeighbourAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourAfterUpdateHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.BeforeDeleteHook, pegasysNeighbourBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourBeforeDeleteHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.AfterDeleteHook, pegasysNeighbourAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourAfterDeleteHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.BeforeUpsertHook, pegasysNeighbourBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourBeforeUpsertHooks = []PegasysNeighbourHook{}

	AddPegasysNeighbourHook(boil.AfterUpsertHook, pegasysNeighbourAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pegasysNeighbourAfterUpsertHooks = []PegasysNeighbourHook{}
}

func testPegasysNeighboursInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPegasysNeighboursInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pegasysNeighbourColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPegasysNeighboursReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPegasysNeighboursReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PegasysNeighbourSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPegasysNeighboursSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PegasysNeighbours().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pegasysNeighbourDBTypes = map[string]string{`ID`: `integer`, `PeerID`: `character varying`, `NeighbourPeerID`: `character varying`, `CreatedAt`: `timestamp with time zone`, `CrawlStartAt`: `timestamp with time zone`}
	_                       = bytes.MinRead
)

func testPegasysNeighboursUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pegasysNeighbourPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pegasysNeighbourAllColumns) == len(pegasysNeighbourPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPegasysNeighboursSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pegasysNeighbourAllColumns) == len(pegasysNeighbourPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PegasysNeighbour{}
	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pegasysNeighbourDBTypes, true, pegasysNeighbourPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pegasysNeighbourAllColumns, pegasysNeighbourPrimaryKeyColumns) {
		fields = pegasysNeighbourAllColumns
	} else {
		fields = strmangle.SetComplement(
			pegasysNeighbourAllColumns,
			pegasysNeighbourPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PegasysNeighbourSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPegasysNeighboursUpsert(t *testing.T) {
	t.Parallel()

	if len(pegasysNeighbourAllColumns) == len(pegasysNeighbourPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PegasysNeighbour{}
	if err = randomize.Struct(seed, &o, pegasysNeighbourDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PegasysNeighbour: %s", err)
	}

	count, err := PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pegasysNeighbourDBTypes, false, pegasysNeighbourPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysNeighbour struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PegasysNeighbour: %s", err)
	}

	count, err = PegasysNeighbours().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
