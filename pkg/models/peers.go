// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Peer is an object representing the database table.
type Peer struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AgentVersionID null.Int  `boil:"agent_version_id" json:"agent_version_id,omitempty" toml:"agent_version_id" yaml:"agent_version_id,omitempty"`
	ProtocolsSetID null.Int  `boil:"protocols_set_id" json:"protocols_set_id,omitempty" toml:"protocols_set_id" yaml:"protocols_set_id,omitempty"`
	MultiHash      string    `boil:"multi_hash" json:"multi_hash" toml:"multi_hash" yaml:"multi_hash"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Properties     null.JSON `boil:"properties" json:"properties,omitempty" toml:"properties" yaml:"properties,omitempty"`

	R *peerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerColumns = struct {
	ID             string
	AgentVersionID string
	ProtocolsSetID string
	MultiHash      string
	UpdatedAt      string
	CreatedAt      string
	Properties     string
}{
	ID:             "id",
	AgentVersionID: "agent_version_id",
	ProtocolsSetID: "protocols_set_id",
	MultiHash:      "multi_hash",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
	Properties:     "properties",
}

var PeerTableColumns = struct {
	ID             string
	AgentVersionID string
	ProtocolsSetID string
	MultiHash      string
	UpdatedAt      string
	CreatedAt      string
	Properties     string
}{
	ID:             "peers.id",
	AgentVersionID: "peers.agent_version_id",
	ProtocolsSetID: "peers.protocols_set_id",
	MultiHash:      "peers.multi_hash",
	UpdatedAt:      "peers.updated_at",
	CreatedAt:      "peers.created_at",
	Properties:     "peers.properties",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PeerWhere = struct {
	ID             whereHelperint
	AgentVersionID whereHelpernull_Int
	ProtocolsSetID whereHelpernull_Int
	MultiHash      whereHelperstring
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	Properties     whereHelpernull_JSON
}{
	ID:             whereHelperint{field: "\"peers\".\"id\""},
	AgentVersionID: whereHelpernull_Int{field: "\"peers\".\"agent_version_id\""},
	ProtocolsSetID: whereHelpernull_Int{field: "\"peers\".\"protocols_set_id\""},
	MultiHash:      whereHelperstring{field: "\"peers\".\"multi_hash\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"peers\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"peers\".\"created_at\""},
	Properties:     whereHelpernull_JSON{field: "\"peers\".\"properties\""},
}

// PeerRels is where relationship names are stored.
var PeerRels = struct {
	AgentVersion   string
	ProtocolsSet   string
	SessionsOpen   string
	MultiAddresses string
}{
	AgentVersion:   "AgentVersion",
	ProtocolsSet:   "ProtocolsSet",
	SessionsOpen:   "SessionsOpen",
	MultiAddresses: "MultiAddresses",
}

// peerR is where relationships are stored.
type peerR struct {
	AgentVersion   *AgentVersion     `boil:"AgentVersion" json:"AgentVersion" toml:"AgentVersion" yaml:"AgentVersion"`
	ProtocolsSet   *ProtocolsSet     `boil:"ProtocolsSet" json:"ProtocolsSet" toml:"ProtocolsSet" yaml:"ProtocolsSet"`
	SessionsOpen   *SessionsOpen     `boil:"SessionsOpen" json:"SessionsOpen" toml:"SessionsOpen" yaml:"SessionsOpen"`
	MultiAddresses MultiAddressSlice `boil:"MultiAddresses" json:"MultiAddresses" toml:"MultiAddresses" yaml:"MultiAddresses"`
}

// NewStruct creates a new relationship struct
func (*peerR) NewStruct() *peerR {
	return &peerR{}
}

func (r *peerR) GetAgentVersion() *AgentVersion {
	if r == nil {
		return nil
	}
	return r.AgentVersion
}

func (r *peerR) GetProtocolsSet() *ProtocolsSet {
	if r == nil {
		return nil
	}
	return r.ProtocolsSet
}

func (r *peerR) GetSessionsOpen() *SessionsOpen {
	if r == nil {
		return nil
	}
	return r.SessionsOpen
}

func (r *peerR) GetMultiAddresses() MultiAddressSlice {
	if r == nil {
		return nil
	}
	return r.MultiAddresses
}

// peerL is where Load methods for each relationship are stored.
type peerL struct{}

var (
	peerAllColumns            = []string{"id", "agent_version_id", "protocols_set_id", "multi_hash", "updated_at", "created_at", "properties"}
	peerColumnsWithoutDefault = []string{"multi_hash", "updated_at", "created_at"}
	peerColumnsWithDefault    = []string{"id", "agent_version_id", "protocols_set_id", "properties"}
	peerPrimaryKeyColumns     = []string{"id"}
	peerGeneratedColumns      = []string{"id"}
)

type (
	// PeerSlice is an alias for a slice of pointers to Peer.
	// This should almost always be used instead of []Peer.
	PeerSlice []*Peer
	// PeerHook is the signature for custom Peer hook methods
	PeerHook func(context.Context, boil.ContextExecutor, *Peer) error

	peerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerType                 = reflect.TypeOf(&Peer{})
	peerMapping              = queries.MakeStructMapping(peerType)
	peerPrimaryKeyMapping, _ = queries.BindMapping(peerType, peerMapping, peerPrimaryKeyColumns)
	peerInsertCacheMut       sync.RWMutex
	peerInsertCache          = make(map[string]insertCache)
	peerUpdateCacheMut       sync.RWMutex
	peerUpdateCache          = make(map[string]updateCache)
	peerUpsertCacheMut       sync.RWMutex
	peerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var peerAfterSelectHooks []PeerHook

var peerBeforeInsertHooks []PeerHook
var peerAfterInsertHooks []PeerHook

var peerBeforeUpdateHooks []PeerHook
var peerAfterUpdateHooks []PeerHook

var peerBeforeDeleteHooks []PeerHook
var peerAfterDeleteHooks []PeerHook

var peerBeforeUpsertHooks []PeerHook
var peerAfterUpsertHooks []PeerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Peer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Peer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Peer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Peer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Peer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Peer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Peer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Peer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Peer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPeerHook registers your hook function for all future operations.
func AddPeerHook(hookPoint boil.HookPoint, peerHook PeerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		peerAfterSelectHooks = append(peerAfterSelectHooks, peerHook)
	case boil.BeforeInsertHook:
		peerBeforeInsertHooks = append(peerBeforeInsertHooks, peerHook)
	case boil.AfterInsertHook:
		peerAfterInsertHooks = append(peerAfterInsertHooks, peerHook)
	case boil.BeforeUpdateHook:
		peerBeforeUpdateHooks = append(peerBeforeUpdateHooks, peerHook)
	case boil.AfterUpdateHook:
		peerAfterUpdateHooks = append(peerAfterUpdateHooks, peerHook)
	case boil.BeforeDeleteHook:
		peerBeforeDeleteHooks = append(peerBeforeDeleteHooks, peerHook)
	case boil.AfterDeleteHook:
		peerAfterDeleteHooks = append(peerAfterDeleteHooks, peerHook)
	case boil.BeforeUpsertHook:
		peerBeforeUpsertHooks = append(peerBeforeUpsertHooks, peerHook)
	case boil.AfterUpsertHook:
		peerAfterUpsertHooks = append(peerAfterUpsertHooks, peerHook)
	}
}

// One returns a single peer record from the query.
func (q peerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Peer, error) {
	o := &Peer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for peers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Peer records from the query.
func (q peerQuery) All(ctx context.Context, exec boil.ContextExecutor) (PeerSlice, error) {
	var o []*Peer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Peer slice")
	}

	if len(peerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Peer records in the query.
func (q peerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count peers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q peerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if peers exists")
	}

	return count > 0, nil
}

// AgentVersion pointed to by the foreign key.
func (o *Peer) AgentVersion(mods ...qm.QueryMod) agentVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentVersionID),
	}

	queryMods = append(queryMods, mods...)

	return AgentVersions(queryMods...)
}

// ProtocolsSet pointed to by the foreign key.
func (o *Peer) ProtocolsSet(mods ...qm.QueryMod) protocolsSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProtocolsSetID),
	}

	queryMods = append(queryMods, mods...)

	return ProtocolsSets(queryMods...)
}

// SessionsOpen pointed to by the foreign key.
func (o *Peer) SessionsOpen(mods ...qm.QueryMod) sessionsOpenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"peer_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return SessionsOpens(queryMods...)
}

// MultiAddresses retrieves all the multi_address's MultiAddresses with an executor.
func (o *Peer) MultiAddresses(mods ...qm.QueryMod) multiAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"peers_x_multi_addresses\" on \"multi_addresses\".\"id\" = \"peers_x_multi_addresses\".\"multi_address_id\""),
		qm.Where("\"peers_x_multi_addresses\".\"peer_id\"=?", o.ID),
	)

	return MultiAddresses(queryMods...)
}

// LoadAgentVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peerL) LoadAgentVersion(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		if !queries.IsNil(object.AgentVersionID) {
			args = append(args, object.AgentVersionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AgentVersionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AgentVersionID) {
				args = append(args, obj.AgentVersionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agent_versions`),
		qm.WhereIn(`agent_versions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AgentVersion")
	}

	var resultSlice []*AgentVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AgentVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agent_versions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agent_versions")
	}

	if len(agentVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AgentVersion = foreign
		if foreign.R == nil {
			foreign.R = &agentVersionR{}
		}
		foreign.R.Peers = append(foreign.R.Peers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AgentVersionID, foreign.ID) {
				local.R.AgentVersion = foreign
				if foreign.R == nil {
					foreign.R = &agentVersionR{}
				}
				foreign.R.Peers = append(foreign.R.Peers, local)
				break
			}
		}
	}

	return nil
}

// LoadProtocolsSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peerL) LoadProtocolsSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		if !queries.IsNil(object.ProtocolsSetID) {
			args = append(args, object.ProtocolsSetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProtocolsSetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProtocolsSetID) {
				args = append(args, obj.ProtocolsSetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`protocols_sets`),
		qm.WhereIn(`protocols_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProtocolsSet")
	}

	var resultSlice []*ProtocolsSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProtocolsSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for protocols_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for protocols_sets")
	}

	if len(protocolsSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProtocolsSet = foreign
		if foreign.R == nil {
			foreign.R = &protocolsSetR{}
		}
		foreign.R.Peers = append(foreign.R.Peers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProtocolsSetID, foreign.ID) {
				local.R.ProtocolsSet = foreign
				if foreign.R == nil {
					foreign.R = &protocolsSetR{}
				}
				foreign.R.Peers = append(foreign.R.Peers, local)
				break
			}
		}
	}

	return nil
}

// LoadSessionsOpen allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (peerL) LoadSessionsOpen(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sessions_open`),
		qm.WhereIn(`sessions_open.peer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SessionsOpen")
	}

	var resultSlice []*SessionsOpen
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SessionsOpen")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sessions_open")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sessions_open")
	}

	if len(sessionsOpenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SessionsOpen = foreign
		if foreign.R == nil {
			foreign.R = &sessionsOpenR{}
		}
		foreign.R.Peer = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.PeerID {
				local.R.SessionsOpen = foreign
				if foreign.R == nil {
					foreign.R = &sessionsOpenR{}
				}
				foreign.R.Peer = local
				break
			}
		}
	}

	return nil
}

// LoadMultiAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadMultiAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"multi_addresses\".\"id\", \"multi_addresses\".\"asn\", \"multi_addresses\".\"is_cloud\", \"multi_addresses\".\"is_relay\", \"multi_addresses\".\"is_public\", \"multi_addresses\".\"addr\", \"multi_addresses\".\"has_many_addrs\", \"multi_addresses\".\"resolved\", \"multi_addresses\".\"country\", \"multi_addresses\".\"continent\", \"multi_addresses\".\"maddr\", \"multi_addresses\".\"updated_at\", \"multi_addresses\".\"created_at\", \"a\".\"peer_id\""),
		qm.From("\"multi_addresses\""),
		qm.InnerJoin("\"peers_x_multi_addresses\" as \"a\" on \"multi_addresses\".\"id\" = \"a\".\"multi_address_id\""),
		qm.WhereIn("\"a\".\"peer_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load multi_addresses")
	}

	var resultSlice []*MultiAddress

	var localJoinCols []int
	for results.Next() {
		one := new(MultiAddress)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Asn, &one.IsCloud, &one.IsRelay, &one.IsPublic, &one.Addr, &one.HasManyAddrs, &one.Resolved, &one.Country, &one.Continent, &one.Maddr, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for multi_addresses")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice multi_addresses")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(multiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MultiAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &multiAddressR{}
			}
			foreign.R.Peers = append(foreign.R.Peers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.MultiAddresses = append(local.R.MultiAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.Peers = append(foreign.R.Peers, local)
				break
			}
		}
	}

	return nil
}

// SetAgentVersion of the peer to the related item.
// Sets o.R.AgentVersion to related.
// Adds o to related.R.Peers.
func (o *Peer) SetAgentVersion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AgentVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_version_id"}),
		strmangle.WhereClause("\"", "\"", 2, peerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AgentVersionID, related.ID)
	if o.R == nil {
		o.R = &peerR{
			AgentVersion: related,
		}
	} else {
		o.R.AgentVersion = related
	}

	if related.R == nil {
		related.R = &agentVersionR{
			Peers: PeerSlice{o},
		}
	} else {
		related.R.Peers = append(related.R.Peers, o)
	}

	return nil
}

// RemoveAgentVersion relationship.
// Sets o.R.AgentVersion to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Peer) RemoveAgentVersion(ctx context.Context, exec boil.ContextExecutor, related *AgentVersion) error {
	var err error

	queries.SetScanner(&o.AgentVersionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("agent_version_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AgentVersion = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Peers {
		if queries.Equal(o.AgentVersionID, ri.AgentVersionID) {
			continue
		}

		ln := len(related.R.Peers)
		if ln > 1 && i < ln-1 {
			related.R.Peers[i] = related.R.Peers[ln-1]
		}
		related.R.Peers = related.R.Peers[:ln-1]
		break
	}
	return nil
}

// SetProtocolsSet of the peer to the related item.
// Sets o.R.ProtocolsSet to related.
// Adds o to related.R.Peers.
func (o *Peer) SetProtocolsSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProtocolsSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"protocols_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, peerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProtocolsSetID, related.ID)
	if o.R == nil {
		o.R = &peerR{
			ProtocolsSet: related,
		}
	} else {
		o.R.ProtocolsSet = related
	}

	if related.R == nil {
		related.R = &protocolsSetR{
			Peers: PeerSlice{o},
		}
	} else {
		related.R.Peers = append(related.R.Peers, o)
	}

	return nil
}

// RemoveProtocolsSet relationship.
// Sets o.R.ProtocolsSet to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Peer) RemoveProtocolsSet(ctx context.Context, exec boil.ContextExecutor, related *ProtocolsSet) error {
	var err error

	queries.SetScanner(&o.ProtocolsSetID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("protocols_set_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProtocolsSet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Peers {
		if queries.Equal(o.ProtocolsSetID, ri.ProtocolsSetID) {
			continue
		}

		ln := len(related.R.Peers)
		if ln > 1 && i < ln-1 {
			related.R.Peers[i] = related.R.Peers[ln-1]
		}
		related.R.Peers = related.R.Peers[:ln-1]
		break
	}
	return nil
}

// SetSessionsOpen of the peer to the related item.
// Sets o.R.SessionsOpen to related.
// Adds o to related.R.Peer.
func (o *Peer) SetSessionsOpen(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SessionsOpen) error {
	var err error

	if insert {
		related.PeerID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"sessions_open\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
			strmangle.WhereClause("\"", "\"", 2, sessionsOpenPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID, related.State, related.LastVisitedAt}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.PeerID = o.ID
	}

	if o.R == nil {
		o.R = &peerR{
			SessionsOpen: related,
		}
	} else {
		o.R.SessionsOpen = related
	}

	if related.R == nil {
		related.R = &sessionsOpenR{
			Peer: o,
		}
	} else {
		related.R.Peer = o
	}
	return nil
}

// AddMultiAddresses adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.MultiAddresses.
// Sets related.R.Peers appropriately.
func (o *Peer) AddMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"peers_x_multi_addresses\" (\"peer_id\", \"multi_address_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &peerR{
			MultiAddresses: related,
		}
	} else {
		o.R.MultiAddresses = append(o.R.MultiAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &multiAddressR{
				Peers: PeerSlice{o},
			}
		} else {
			rel.R.Peers = append(rel.R.Peers, o)
		}
	}
	return nil
}

// SetMultiAddresses removes all previously related items of the
// peer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Peers's MultiAddresses accordingly.
// Replaces o.R.MultiAddresses with related.
// Sets related.R.Peers's MultiAddresses accordingly.
func (o *Peer) SetMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	query := "delete from \"peers_x_multi_addresses\" where \"peer_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMultiAddressesFromPeersSlice(o, related)
	if o.R != nil {
		o.R.MultiAddresses = nil
	}

	return o.AddMultiAddresses(ctx, exec, insert, related...)
}

// RemoveMultiAddresses relationships from objects passed in.
// Removes related items from R.MultiAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Peers.
func (o *Peer) RemoveMultiAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*MultiAddress) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"peers_x_multi_addresses\" where \"peer_id\" = $1 and \"multi_address_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMultiAddressesFromPeersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MultiAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.MultiAddresses)
			if ln > 1 && i < ln-1 {
				o.R.MultiAddresses[i] = o.R.MultiAddresses[ln-1]
			}
			o.R.MultiAddresses = o.R.MultiAddresses[:ln-1]
			break
		}
	}

	return nil
}

func removeMultiAddressesFromPeersSlice(o *Peer, related []*MultiAddress) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Peers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Peers)
			if ln > 1 && i < ln-1 {
				rel.R.Peers[i] = rel.R.Peers[ln-1]
			}
			rel.R.Peers = rel.R.Peers[:ln-1]
			break
		}
	}
}

// Peers retrieves all the records using an executor.
func Peers(mods ...qm.QueryMod) peerQuery {
	mods = append(mods, qm.From("\"peers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"peers\".*"})
	}

	return peerQuery{q}
}

// FindPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Peer, error) {
	peerObj := &Peer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"peers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, peerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from peers")
	}

	if err = peerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return peerObj, err
	}

	return peerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Peer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	peerInsertCacheMut.RLock()
	cache, cached := peerInsertCache[key]
	peerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			peerAllColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, peerGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerType, peerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"peers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"peers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into peers")
	}

	if !cached {
		peerInsertCacheMut.Lock()
		peerInsertCache[key] = cache
		peerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Peer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Peer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	peerUpdateCacheMut.RLock()
	cache, cached := peerUpdateCache[key]
	peerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			peerAllColumns,
			peerPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, peerGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update peers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"peers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, peerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, append(wl, peerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update peers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for peers")
	}

	if !cached {
		peerUpdateCacheMut.Lock()
		peerUpdateCache[key] = cache
		peerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q peerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for peers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, peerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in peer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all peer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Peer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerUpsertCacheMut.RLock()
	cache, cached := peerUpsertCache[key]
	peerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			peerAllColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			peerAllColumns,
			peerPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, peerGeneratedColumns)
		update = strmangle.SetComplement(update, peerGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert peers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(peerPrimaryKeyColumns))
			copy(conflict, peerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"peers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerType, peerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert peers")
	}

	if !cached {
		peerUpsertCacheMut.Lock()
		peerUpsertCache[key] = cache
		peerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Peer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Peer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Peer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerPrimaryKeyMapping)
	sql := "DELETE FROM \"peers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for peers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q peerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no peerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(peerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peers")
	}

	if len(peerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Peer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPeer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"peers\".* FROM \"peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PeerSlice")
	}

	*o = slice

	return nil
}

// PeerExists checks if the Peer row exists.
func PeerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"peers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if peers exists")
	}

	return exists, nil
}

// Exists checks if the Peer row exists.
func (o *Peer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PeerExists(ctx, exec, o.ID)
}
