// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Protocol is an object representing the database table.
type Protocol struct { // A unique id that identifies a agent version.
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Timestamp of when this protocol was seen the last time.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// The full protocol string.
	Protocol string `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`

	R *protocolR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L protocolL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProtocolColumns = struct {
	ID        string
	CreatedAt string
	Protocol  string
}{
	ID:        "id",
	CreatedAt: "created_at",
	Protocol:  "protocol",
}

var ProtocolTableColumns = struct {
	ID        string
	CreatedAt string
	Protocol  string
}{
	ID:        "protocols.id",
	CreatedAt: "protocols.created_at",
	Protocol:  "protocols.protocol",
}

// Generated where

var ProtocolWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	Protocol  whereHelperstring
}{
	ID:        whereHelperint{field: "\"protocols\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"protocols\".\"created_at\""},
	Protocol:  whereHelperstring{field: "\"protocols\".\"protocol\""},
}

// ProtocolRels is where relationship names are stored.
var ProtocolRels = struct {
	CrawlProperties string
}{
	CrawlProperties: "CrawlProperties",
}

// protocolR is where relationships are stored.
type protocolR struct {
	CrawlProperties CrawlPropertySlice `boil:"CrawlProperties" json:"CrawlProperties" toml:"CrawlProperties" yaml:"CrawlProperties"`
}

// NewStruct creates a new relationship struct
func (*protocolR) NewStruct() *protocolR {
	return &protocolR{}
}

func (r *protocolR) GetCrawlProperties() CrawlPropertySlice {
	if r == nil {
		return nil
	}
	return r.CrawlProperties
}

// protocolL is where Load methods for each relationship are stored.
type protocolL struct{}

var (
	protocolAllColumns            = []string{"id", "created_at", "protocol"}
	protocolColumnsWithoutDefault = []string{"created_at", "protocol"}
	protocolColumnsWithDefault    = []string{"id"}
	protocolPrimaryKeyColumns     = []string{"id"}
	protocolGeneratedColumns      = []string{"id"}
)

type (
	// ProtocolSlice is an alias for a slice of pointers to Protocol.
	// This should almost always be used instead of []Protocol.
	ProtocolSlice []*Protocol
	// ProtocolHook is the signature for custom Protocol hook methods
	ProtocolHook func(context.Context, boil.ContextExecutor, *Protocol) error

	protocolQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	protocolType                 = reflect.TypeOf(&Protocol{})
	protocolMapping              = queries.MakeStructMapping(protocolType)
	protocolPrimaryKeyMapping, _ = queries.BindMapping(protocolType, protocolMapping, protocolPrimaryKeyColumns)
	protocolInsertCacheMut       sync.RWMutex
	protocolInsertCache          = make(map[string]insertCache)
	protocolUpdateCacheMut       sync.RWMutex
	protocolUpdateCache          = make(map[string]updateCache)
	protocolUpsertCacheMut       sync.RWMutex
	protocolUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var protocolAfterSelectHooks []ProtocolHook

var protocolBeforeInsertHooks []ProtocolHook
var protocolAfterInsertHooks []ProtocolHook

var protocolBeforeUpdateHooks []ProtocolHook
var protocolAfterUpdateHooks []ProtocolHook

var protocolBeforeDeleteHooks []ProtocolHook
var protocolAfterDeleteHooks []ProtocolHook

var protocolBeforeUpsertHooks []ProtocolHook
var protocolAfterUpsertHooks []ProtocolHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Protocol) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Protocol) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Protocol) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Protocol) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Protocol) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Protocol) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Protocol) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Protocol) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Protocol) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range protocolAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProtocolHook registers your hook function for all future operations.
func AddProtocolHook(hookPoint boil.HookPoint, protocolHook ProtocolHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		protocolAfterSelectHooks = append(protocolAfterSelectHooks, protocolHook)
	case boil.BeforeInsertHook:
		protocolBeforeInsertHooks = append(protocolBeforeInsertHooks, protocolHook)
	case boil.AfterInsertHook:
		protocolAfterInsertHooks = append(protocolAfterInsertHooks, protocolHook)
	case boil.BeforeUpdateHook:
		protocolBeforeUpdateHooks = append(protocolBeforeUpdateHooks, protocolHook)
	case boil.AfterUpdateHook:
		protocolAfterUpdateHooks = append(protocolAfterUpdateHooks, protocolHook)
	case boil.BeforeDeleteHook:
		protocolBeforeDeleteHooks = append(protocolBeforeDeleteHooks, protocolHook)
	case boil.AfterDeleteHook:
		protocolAfterDeleteHooks = append(protocolAfterDeleteHooks, protocolHook)
	case boil.BeforeUpsertHook:
		protocolBeforeUpsertHooks = append(protocolBeforeUpsertHooks, protocolHook)
	case boil.AfterUpsertHook:
		protocolAfterUpsertHooks = append(protocolAfterUpsertHooks, protocolHook)
	}
}

// One returns a single protocol record from the query.
func (q protocolQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Protocol, error) {
	o := &Protocol{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for protocols")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Protocol records from the query.
func (q protocolQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProtocolSlice, error) {
	var o []*Protocol

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Protocol slice")
	}

	if len(protocolAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Protocol records in the query.
func (q protocolQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count protocols rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q protocolQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if protocols exists")
	}

	return count > 0, nil
}

// CrawlProperties retrieves all the crawl_property's CrawlProperties with an executor.
func (o *Protocol) CrawlProperties(mods ...qm.QueryMod) crawlPropertyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"crawl_properties\".\"protocol_id\"=?", o.ID),
	)

	return CrawlProperties(queryMods...)
}

// LoadCrawlProperties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (protocolL) LoadCrawlProperties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProtocol interface{}, mods queries.Applicator) error {
	var slice []*Protocol
	var object *Protocol

	if singular {
		var ok bool
		object, ok = maybeProtocol.(*Protocol)
		if !ok {
			object = new(Protocol)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProtocol)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProtocol))
			}
		}
	} else {
		s, ok := maybeProtocol.(*[]*Protocol)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProtocol)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProtocol))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &protocolR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &protocolR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crawl_properties`),
		qm.WhereIn(`crawl_properties.protocol_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load crawl_properties")
	}

	var resultSlice []*CrawlProperty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice crawl_properties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on crawl_properties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crawl_properties")
	}

	if len(crawlPropertyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CrawlProperties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &crawlPropertyR{}
			}
			foreign.R.Protocol = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProtocolID) {
				local.R.CrawlProperties = append(local.R.CrawlProperties, foreign)
				if foreign.R == nil {
					foreign.R = &crawlPropertyR{}
				}
				foreign.R.Protocol = local
				break
			}
		}
	}

	return nil
}

// AddCrawlProperties adds the given related objects to the existing relationships
// of the protocol, optionally inserting them as new records.
// Appends related to o.R.CrawlProperties.
// Sets related.R.Protocol appropriately.
func (o *Protocol) AddCrawlProperties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CrawlProperty) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProtocolID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"crawl_properties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"protocol_id"}),
				strmangle.WhereClause("\"", "\"", 2, crawlPropertyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProtocolID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &protocolR{
			CrawlProperties: related,
		}
	} else {
		o.R.CrawlProperties = append(o.R.CrawlProperties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &crawlPropertyR{
				Protocol: o,
			}
		} else {
			rel.R.Protocol = o
		}
	}
	return nil
}

// SetCrawlProperties removes all previously related items of the
// protocol replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Protocol's CrawlProperties accordingly.
// Replaces o.R.CrawlProperties with related.
// Sets related.R.Protocol's CrawlProperties accordingly.
func (o *Protocol) SetCrawlProperties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CrawlProperty) error {
	query := "update \"crawl_properties\" set \"protocol_id\" = null where \"protocol_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CrawlProperties {
			queries.SetScanner(&rel.ProtocolID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Protocol = nil
		}
		o.R.CrawlProperties = nil
	}

	return o.AddCrawlProperties(ctx, exec, insert, related...)
}

// RemoveCrawlProperties relationships from objects passed in.
// Removes related items from R.CrawlProperties (uses pointer comparison, removal does not keep order)
// Sets related.R.Protocol.
func (o *Protocol) RemoveCrawlProperties(ctx context.Context, exec boil.ContextExecutor, related ...*CrawlProperty) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProtocolID, nil)
		if rel.R != nil {
			rel.R.Protocol = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("protocol_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CrawlProperties {
			if rel != ri {
				continue
			}

			ln := len(o.R.CrawlProperties)
			if ln > 1 && i < ln-1 {
				o.R.CrawlProperties[i] = o.R.CrawlProperties[ln-1]
			}
			o.R.CrawlProperties = o.R.CrawlProperties[:ln-1]
			break
		}
	}

	return nil
}

// Protocols retrieves all the records using an executor.
func Protocols(mods ...qm.QueryMod) protocolQuery {
	mods = append(mods, qm.From("\"protocols\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"protocols\".*"})
	}

	return protocolQuery{q}
}

// FindProtocol retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProtocol(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Protocol, error) {
	protocolObj := &Protocol{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"protocols\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, protocolObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from protocols")
	}

	if err = protocolObj.doAfterSelectHooks(ctx, exec); err != nil {
		return protocolObj, err
	}

	return protocolObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Protocol) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protocols provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protocolColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	protocolInsertCacheMut.RLock()
	cache, cached := protocolInsertCache[key]
	protocolInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			protocolAllColumns,
			protocolColumnsWithDefault,
			protocolColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, protocolGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(protocolType, protocolMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(protocolType, protocolMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"protocols\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"protocols\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into protocols")
	}

	if !cached {
		protocolInsertCacheMut.Lock()
		protocolInsertCache[key] = cache
		protocolInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Protocol.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Protocol) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	protocolUpdateCacheMut.RLock()
	cache, cached := protocolUpdateCache[key]
	protocolUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			protocolAllColumns,
			protocolPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, protocolGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update protocols, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"protocols\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, protocolPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(protocolType, protocolMapping, append(wl, protocolPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update protocols row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for protocols")
	}

	if !cached {
		protocolUpdateCacheMut.Lock()
		protocolUpdateCache[key] = cache
		protocolUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q protocolQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for protocols")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for protocols")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProtocolSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"protocols\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, protocolPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in protocol slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all protocol")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Protocol) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no protocols provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(protocolColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	protocolUpsertCacheMut.RLock()
	cache, cached := protocolUpsertCache[key]
	protocolUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			protocolAllColumns,
			protocolColumnsWithDefault,
			protocolColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			protocolAllColumns,
			protocolPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, protocolGeneratedColumns)
		update = strmangle.SetComplement(update, protocolGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert protocols, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(protocolPrimaryKeyColumns))
			copy(conflict, protocolPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"protocols\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(protocolType, protocolMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(protocolType, protocolMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert protocols")
	}

	if !cached {
		protocolUpsertCacheMut.Lock()
		protocolUpsertCache[key] = cache
		protocolUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Protocol record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Protocol) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Protocol provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), protocolPrimaryKeyMapping)
	sql := "DELETE FROM \"protocols\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from protocols")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for protocols")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q protocolQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no protocolQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protocols")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protocols")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProtocolSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(protocolBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"protocols\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protocolPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from protocol slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for protocols")
	}

	if len(protocolAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Protocol) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProtocol(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProtocolSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProtocolSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), protocolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"protocols\".* FROM \"protocols\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, protocolPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProtocolSlice")
	}

	*o = slice

	return nil
}

// ProtocolExists checks if the Protocol row exists.
func ProtocolExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"protocols\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if protocols exists")
	}

	return exists, nil
}

// Exists checks if the Protocol row exists.
func (o *Protocol) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProtocolExists(ctx, exec, o.ID)
}
