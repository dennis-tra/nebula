// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPegasysConnections(t *testing.T) {
	t.Parallel()

	query := PegasysConnections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPegasysConnectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysConnectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PegasysConnections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysConnectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PegasysConnectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPegasysConnectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PegasysConnectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PegasysConnection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PegasysConnectionExists to return true, but got false.")
	}
}

func testPegasysConnectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pegasysConnectionFound, err := FindPegasysConnection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pegasysConnectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPegasysConnectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PegasysConnections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPegasysConnectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PegasysConnections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPegasysConnectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pegasysConnectionOne := &PegasysConnection{}
	pegasysConnectionTwo := &PegasysConnection{}
	if err = randomize.Struct(seed, pegasysConnectionOne, pegasysConnectionDBTypes, false, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}
	if err = randomize.Struct(seed, pegasysConnectionTwo, pegasysConnectionDBTypes, false, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pegasysConnectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pegasysConnectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PegasysConnections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPegasysConnectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pegasysConnectionOne := &PegasysConnection{}
	pegasysConnectionTwo := &PegasysConnection{}
	if err = randomize.Struct(seed, pegasysConnectionOne, pegasysConnectionDBTypes, false, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}
	if err = randomize.Struct(seed, pegasysConnectionTwo, pegasysConnectionDBTypes, false, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pegasysConnectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pegasysConnectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pegasysConnectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func pegasysConnectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PegasysConnection) error {
	*o = PegasysConnection{}
	return nil
}

func testPegasysConnectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PegasysConnection{}
	o := &PegasysConnection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PegasysConnection object: %s", err)
	}

	AddPegasysConnectionHook(boil.BeforeInsertHook, pegasysConnectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionBeforeInsertHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.AfterInsertHook, pegasysConnectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionAfterInsertHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.AfterSelectHook, pegasysConnectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionAfterSelectHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.BeforeUpdateHook, pegasysConnectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionBeforeUpdateHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.AfterUpdateHook, pegasysConnectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionAfterUpdateHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.BeforeDeleteHook, pegasysConnectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionBeforeDeleteHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.AfterDeleteHook, pegasysConnectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionAfterDeleteHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.BeforeUpsertHook, pegasysConnectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionBeforeUpsertHooks = []PegasysConnectionHook{}

	AddPegasysConnectionHook(boil.AfterUpsertHook, pegasysConnectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pegasysConnectionAfterUpsertHooks = []PegasysConnectionHook{}
}

func testPegasysConnectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPegasysConnectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pegasysConnectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPegasysConnectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPegasysConnectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PegasysConnectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPegasysConnectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PegasysConnections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pegasysConnectionDBTypes = map[string]string{`ID`: `integer`, `PeerID`: `character varying`, `DialAttempt`: `timestamp with time zone`, `Latency`: `interval`, `IsSucceed`: `boolean`, `Error`: `character varying`}
	_                        = bytes.MinRead
)

func testPegasysConnectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pegasysConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pegasysConnectionAllColumns) == len(pegasysConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPegasysConnectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pegasysConnectionAllColumns) == len(pegasysConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PegasysConnection{}
	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pegasysConnectionDBTypes, true, pegasysConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pegasysConnectionAllColumns, pegasysConnectionPrimaryKeyColumns) {
		fields = pegasysConnectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			pegasysConnectionAllColumns,
			pegasysConnectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PegasysConnectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPegasysConnectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(pegasysConnectionAllColumns) == len(pegasysConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PegasysConnection{}
	if err = randomize.Struct(seed, &o, pegasysConnectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PegasysConnection: %s", err)
	}

	count, err := PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pegasysConnectionDBTypes, false, pegasysConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PegasysConnection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PegasysConnection: %s", err)
	}

	count, err = PegasysConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
