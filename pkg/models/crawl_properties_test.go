// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCrawlProperties(t *testing.T) {
	t.Parallel()

	query := CrawlProperties()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCrawlPropertiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCrawlPropertiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CrawlProperties().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCrawlPropertiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CrawlPropertySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCrawlPropertiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CrawlPropertyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CrawlProperty exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CrawlPropertyExists to return true, but got false.")
	}
}

func testCrawlPropertiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	crawlPropertyFound, err := FindCrawlProperty(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if crawlPropertyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCrawlPropertiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CrawlProperties().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCrawlPropertiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CrawlProperties().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCrawlPropertiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	crawlPropertyOne := &CrawlProperty{}
	crawlPropertyTwo := &CrawlProperty{}
	if err = randomize.Struct(seed, crawlPropertyOne, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}
	if err = randomize.Struct(seed, crawlPropertyTwo, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = crawlPropertyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = crawlPropertyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CrawlProperties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCrawlPropertiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	crawlPropertyOne := &CrawlProperty{}
	crawlPropertyTwo := &CrawlProperty{}
	if err = randomize.Struct(seed, crawlPropertyOne, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}
	if err = randomize.Struct(seed, crawlPropertyTwo, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = crawlPropertyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = crawlPropertyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func crawlPropertyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func crawlPropertyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CrawlProperty) error {
	*o = CrawlProperty{}
	return nil
}

func testCrawlPropertiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CrawlProperty{}
	o := &CrawlProperty{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CrawlProperty object: %s", err)
	}

	AddCrawlPropertyHook(boil.BeforeInsertHook, crawlPropertyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	crawlPropertyBeforeInsertHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.AfterInsertHook, crawlPropertyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	crawlPropertyAfterInsertHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.AfterSelectHook, crawlPropertyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	crawlPropertyAfterSelectHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.BeforeUpdateHook, crawlPropertyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	crawlPropertyBeforeUpdateHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.AfterUpdateHook, crawlPropertyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	crawlPropertyAfterUpdateHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.BeforeDeleteHook, crawlPropertyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	crawlPropertyBeforeDeleteHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.AfterDeleteHook, crawlPropertyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	crawlPropertyAfterDeleteHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.BeforeUpsertHook, crawlPropertyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	crawlPropertyBeforeUpsertHooks = []CrawlPropertyHook{}

	AddCrawlPropertyHook(boil.AfterUpsertHook, crawlPropertyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	crawlPropertyAfterUpsertHooks = []CrawlPropertyHook{}
}

func testCrawlPropertiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCrawlPropertiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(crawlPropertyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCrawlPropertyToOneAgentVersionUsingAgentVersion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CrawlProperty
	var foreign AgentVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AgentVersionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AgentVersion().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CrawlPropertySlice{&local}
	if err = local.L.LoadAgentVersion(ctx, tx, false, (*[]*CrawlProperty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AgentVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AgentVersion = nil
	if err = local.L.LoadAgentVersion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AgentVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCrawlPropertyToOneCrawlUsingCrawl(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CrawlProperty
	var foreign Crawl

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, crawlDBTypes, false, crawlColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Crawl struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CrawlID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Crawl().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CrawlPropertySlice{&local}
	if err = local.L.LoadCrawl(ctx, tx, false, (*[]*CrawlProperty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crawl == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Crawl = nil
	if err = local.L.LoadCrawl(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Crawl == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCrawlPropertyToOneProtocolUsingProtocol(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CrawlProperty
	var foreign Protocol

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, protocolDBTypes, false, protocolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Protocol struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProtocolID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Protocol().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CrawlPropertySlice{&local}
	if err = local.L.LoadProtocol(ctx, tx, false, (*[]*CrawlProperty)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Protocol == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Protocol = nil
	if err = local.L.LoadProtocol(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Protocol == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCrawlPropertyToOneSetOpAgentVersionUsingAgentVersion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CrawlProperty
	var b, c AgentVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AgentVersion{&b, &c} {
		err = a.SetAgentVersion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AgentVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CrawlProperties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AgentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.AgentVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AgentVersionID))
		reflect.Indirect(reflect.ValueOf(&a.AgentVersionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AgentVersionID, x.ID) {
			t.Error("foreign key was wrong value", a.AgentVersionID, x.ID)
		}
	}
}

func testCrawlPropertyToOneRemoveOpAgentVersionUsingAgentVersion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CrawlProperty
	var b AgentVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAgentVersion(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAgentVersion(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AgentVersion().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AgentVersion != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AgentVersionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CrawlProperties) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCrawlPropertyToOneSetOpCrawlUsingCrawl(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CrawlProperty
	var b, c Crawl

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, crawlDBTypes, false, strmangle.SetComplement(crawlPrimaryKeyColumns, crawlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, crawlDBTypes, false, strmangle.SetComplement(crawlPrimaryKeyColumns, crawlColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Crawl{&b, &c} {
		err = a.SetCrawl(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Crawl != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CrawlProperties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CrawlID != x.ID {
			t.Error("foreign key was wrong value", a.CrawlID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CrawlID))
		reflect.Indirect(reflect.ValueOf(&a.CrawlID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CrawlID != x.ID {
			t.Error("foreign key was wrong value", a.CrawlID, x.ID)
		}
	}
}
func testCrawlPropertyToOneSetOpProtocolUsingProtocol(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CrawlProperty
	var b, c Protocol

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, protocolDBTypes, false, strmangle.SetComplement(protocolPrimaryKeyColumns, protocolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, protocolDBTypes, false, strmangle.SetComplement(protocolPrimaryKeyColumns, protocolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Protocol{&b, &c} {
		err = a.SetProtocol(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Protocol != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CrawlProperties[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProtocolID, x.ID) {
			t.Error("foreign key was wrong value", a.ProtocolID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProtocolID))
		reflect.Indirect(reflect.ValueOf(&a.ProtocolID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProtocolID, x.ID) {
			t.Error("foreign key was wrong value", a.ProtocolID, x.ID)
		}
	}
}

func testCrawlPropertyToOneRemoveOpProtocolUsingProtocol(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CrawlProperty
	var b Protocol

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, protocolDBTypes, false, strmangle.SetComplement(protocolPrimaryKeyColumns, protocolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProtocol(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProtocol(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Protocol().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Protocol != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProtocolID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CrawlProperties) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCrawlPropertiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCrawlPropertiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CrawlPropertySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCrawlPropertiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CrawlProperties().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	crawlPropertyDBTypes = map[string]string{`ID`: `integer`, `CrawlID`: `integer`, `ProtocolID`: `integer`, `AgentVersionID`: `integer`, `Error`: `enum.dial_error('unknown','io_timeout','connection_refused','protocol_not_supported','peer_id_mismatch','no_route_to_host','network_unreachable','no_good_addresses','context_deadline_exceeded','no_public_ip','max_dial_attempts_exceeded','maddr_reset','stream_reset','host_is_down','negotiate_security_protocol_no_trailing_new_line')`, `Count`: `integer`}
	_                    = bytes.MinRead
)

func testCrawlPropertiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(crawlPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(crawlPropertyAllColumns) == len(crawlPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCrawlPropertiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(crawlPropertyAllColumns) == len(crawlPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CrawlProperty{}
	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, crawlPropertyDBTypes, true, crawlPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(crawlPropertyAllColumns, crawlPropertyPrimaryKeyColumns) {
		fields = crawlPropertyAllColumns
	} else {
		fields = strmangle.SetComplement(
			crawlPropertyAllColumns,
			crawlPropertyPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, crawlPropertyGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CrawlPropertySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCrawlPropertiesUpsert(t *testing.T) {
	t.Parallel()

	if len(crawlPropertyAllColumns) == len(crawlPropertyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CrawlProperty{}
	if err = randomize.Struct(seed, &o, crawlPropertyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CrawlProperty: %s", err)
	}

	count, err := CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, crawlPropertyDBTypes, false, crawlPropertyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CrawlProperty struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CrawlProperty: %s", err)
	}

	count, err = CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
