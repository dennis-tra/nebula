// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIPAddresses(t *testing.T) {
	t.Parallel()

	query := IPAddresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIPAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IPAddresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IPAddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IPAddressExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if IPAddress exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IPAddressExists to return true, but got false.")
	}
}

func testIPAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ipAddressFound, err := FindIPAddress(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ipAddressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIPAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IPAddresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIPAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IPAddresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIPAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ipAddressOne := &IPAddress{}
	ipAddressTwo := &IPAddress{}
	if err = randomize.Struct(seed, ipAddressOne, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, ipAddressTwo, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ipAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ipAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IPAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIPAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ipAddressOne := &IPAddress{}
	ipAddressTwo := &IPAddress{}
	if err = randomize.Struct(seed, ipAddressOne, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, ipAddressTwo, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ipAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ipAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ipAddressBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func ipAddressAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IPAddress) error {
	*o = IPAddress{}
	return nil
}

func testIPAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IPAddress{}
	o := &IPAddress{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ipAddressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IPAddress object: %s", err)
	}

	AddIPAddressHook(boil.BeforeInsertHook, ipAddressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ipAddressBeforeInsertHooks = []IPAddressHook{}

	AddIPAddressHook(boil.AfterInsertHook, ipAddressAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ipAddressAfterInsertHooks = []IPAddressHook{}

	AddIPAddressHook(boil.AfterSelectHook, ipAddressAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ipAddressAfterSelectHooks = []IPAddressHook{}

	AddIPAddressHook(boil.BeforeUpdateHook, ipAddressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ipAddressBeforeUpdateHooks = []IPAddressHook{}

	AddIPAddressHook(boil.AfterUpdateHook, ipAddressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ipAddressAfterUpdateHooks = []IPAddressHook{}

	AddIPAddressHook(boil.BeforeDeleteHook, ipAddressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ipAddressBeforeDeleteHooks = []IPAddressHook{}

	AddIPAddressHook(boil.AfterDeleteHook, ipAddressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ipAddressAfterDeleteHooks = []IPAddressHook{}

	AddIPAddressHook(boil.BeforeUpsertHook, ipAddressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ipAddressBeforeUpsertHooks = []IPAddressHook{}

	AddIPAddressHook(boil.AfterUpsertHook, ipAddressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ipAddressAfterUpsertHooks = []IPAddressHook{}
}

func testIPAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIPAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ipAddressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIPAddressToOneMultiAddressUsingMultiAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IPAddress
	var foreign MultiAddress

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ipAddressDBTypes, false, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, multiAddressDBTypes, false, multiAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MultiAddress struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MultiAddressID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MultiAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IPAddressSlice{&local}
	if err = local.L.LoadMultiAddress(ctx, tx, false, (*[]*IPAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MultiAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MultiAddress = nil
	if err = local.L.LoadMultiAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MultiAddress == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIPAddressToOneSetOpMultiAddressUsingMultiAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IPAddress
	var b, c MultiAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ipAddressDBTypes, false, strmangle.SetComplement(ipAddressPrimaryKeyColumns, ipAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, multiAddressDBTypes, false, strmangle.SetComplement(multiAddressPrimaryKeyColumns, multiAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MultiAddress{&b, &c} {
		err = a.SetMultiAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MultiAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IPAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MultiAddressID != x.ID {
			t.Error("foreign key was wrong value", a.MultiAddressID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MultiAddressID))
		reflect.Indirect(reflect.ValueOf(&a.MultiAddressID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MultiAddressID != x.ID {
			t.Error("foreign key was wrong value", a.MultiAddressID, x.ID)
		}
	}
}

func testIPAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIPAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IPAddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIPAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IPAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ipAddressDBTypes = map[string]string{`ID`: `integer`, `MultiAddressID`: `integer`, `Asn`: `integer`, `IsCloud`: `integer`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `Country`: `character`, `Continent`: `character`, `Address`: `inet`}
	_                = bytes.MinRead
)

func testIPAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ipAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ipAddressAllColumns) == len(ipAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIPAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ipAddressAllColumns) == len(ipAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IPAddress{}
	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ipAddressDBTypes, true, ipAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ipAddressAllColumns, ipAddressPrimaryKeyColumns) {
		fields = ipAddressAllColumns
	} else {
		fields = strmangle.SetComplement(
			ipAddressAllColumns,
			ipAddressPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, ipAddressGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IPAddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIPAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(ipAddressAllColumns) == len(ipAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IPAddress{}
	if err = randomize.Struct(seed, &o, ipAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IPAddress: %s", err)
	}

	count, err := IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ipAddressDBTypes, false, ipAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPAddress struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IPAddress: %s", err)
	}

	count, err = IPAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
