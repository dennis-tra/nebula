// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for DialError
const (
	DialErrorUnknown                                    string = "unknown"
	DialErrorIoTimeout                                  string = "io_timeout"
	DialErrorConnectionRefused                          string = "connection_refused"
	DialErrorProtocolNotSupported                       string = "protocol_not_supported"
	DialErrorPeerIDMismatch                             string = "peer_id_mismatch"
	DialErrorNoRouteToHost                              string = "no_route_to_host"
	DialErrorNetworkUnreachable                         string = "network_unreachable"
	DialErrorNoGoodAddresses                            string = "no_good_addresses"
	DialErrorContextDeadlineExceeded                    string = "context_deadline_exceeded"
	DialErrorNoPublicIP                                 string = "no_public_ip"
	DialErrorMaxDialAttemptsExceeded                    string = "max_dial_attempts_exceeded"
	DialErrorMaddrReset                                 string = "maddr_reset"
	DialErrorStreamReset                                string = "stream_reset"
	DialErrorHostIsDown                                 string = "host_is_down"
	DialErrorNegotiateSecurityProtocolNoTrailingNewLine string = "negotiate_security_protocol_no_trailing_new_line"
)

func AllDialError() []string {
	return []string{
		DialErrorUnknown,
		DialErrorIoTimeout,
		DialErrorConnectionRefused,
		DialErrorProtocolNotSupported,
		DialErrorPeerIDMismatch,
		DialErrorNoRouteToHost,
		DialErrorNetworkUnreachable,
		DialErrorNoGoodAddresses,
		DialErrorContextDeadlineExceeded,
		DialErrorNoPublicIP,
		DialErrorMaxDialAttemptsExceeded,
		DialErrorMaddrReset,
		DialErrorStreamReset,
		DialErrorHostIsDown,
		DialErrorNegotiateSecurityProtocolNoTrailingNewLine,
	}
}

// Enum values for CrawlState
const (
	CrawlStateStarted   string = "started"
	CrawlStateCancelled string = "cancelled"
	CrawlStateFailed    string = "failed"
	CrawlStateSucceeded string = "succeeded"
)

func AllCrawlState() []string {
	return []string{
		CrawlStateStarted,
		CrawlStateCancelled,
		CrawlStateFailed,
		CrawlStateSucceeded,
	}
}

// Enum values for SessionState
const (
	SessionStateOpen    string = "open"
	SessionStatePending string = "pending"
	SessionStateClosed  string = "closed"
)

func AllSessionState() []string {
	return []string{
		SessionStateOpen,
		SessionStatePending,
		SessionStateClosed,
	}
}

// Enum values for VisitType
const (
	VisitTypeCrawl string = "crawl"
	VisitTypeDial  string = "dial"
)

func AllVisitType() []string {
	return []string{
		VisitTypeCrawl,
		VisitTypeDial,
	}
}
