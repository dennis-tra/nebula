// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAgentVersions(t *testing.T) {
	t.Parallel()

	query := AgentVersions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAgentVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAgentVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AgentVersions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAgentVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AgentVersionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAgentVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AgentVersionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AgentVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AgentVersionExists to return true, but got false.")
	}
}

func testAgentVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	agentVersionFound, err := FindAgentVersion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if agentVersionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAgentVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AgentVersions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAgentVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AgentVersions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAgentVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	agentVersionOne := &AgentVersion{}
	agentVersionTwo := &AgentVersion{}
	if err = randomize.Struct(seed, agentVersionOne, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, agentVersionTwo, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = agentVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = agentVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AgentVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAgentVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	agentVersionOne := &AgentVersion{}
	agentVersionTwo := &AgentVersion{}
	if err = randomize.Struct(seed, agentVersionOne, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, agentVersionTwo, agentVersionDBTypes, false, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = agentVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = agentVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func agentVersionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func agentVersionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AgentVersion) error {
	*o = AgentVersion{}
	return nil
}

func testAgentVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AgentVersion{}
	o := &AgentVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, agentVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AgentVersion object: %s", err)
	}

	AddAgentVersionHook(boil.BeforeInsertHook, agentVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	agentVersionBeforeInsertHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.AfterInsertHook, agentVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	agentVersionAfterInsertHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.AfterSelectHook, agentVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	agentVersionAfterSelectHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.BeforeUpdateHook, agentVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	agentVersionBeforeUpdateHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.AfterUpdateHook, agentVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	agentVersionAfterUpdateHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.BeforeDeleteHook, agentVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	agentVersionBeforeDeleteHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.AfterDeleteHook, agentVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	agentVersionAfterDeleteHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.BeforeUpsertHook, agentVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	agentVersionBeforeUpsertHooks = []AgentVersionHook{}

	AddAgentVersionHook(boil.AfterUpsertHook, agentVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	agentVersionAfterUpsertHooks = []AgentVersionHook{}
}

func testAgentVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAgentVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(agentVersionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAgentVersionToManyCrawlProperties(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c CrawlProperty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, crawlPropertyDBTypes, false, crawlPropertyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AgentVersionID, a.ID)
	queries.Assign(&c.AgentVersionID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CrawlProperties().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AgentVersionID, b.AgentVersionID) {
			bFound = true
		}
		if queries.Equal(v.AgentVersionID, c.AgentVersionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AgentVersionSlice{&a}
	if err = a.L.LoadCrawlProperties(ctx, tx, false, (*[]*AgentVersion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CrawlProperties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CrawlProperties = nil
	if err = a.L.LoadCrawlProperties(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CrawlProperties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAgentVersionToManyPeers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AgentVersionID, a.ID)
	queries.Assign(&c.AgentVersionID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Peers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AgentVersionID, b.AgentVersionID) {
			bFound = true
		}
		if queries.Equal(v.AgentVersionID, c.AgentVersionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AgentVersionSlice{&a}
	if err = a.L.LoadPeers(ctx, tx, false, (*[]*AgentVersion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Peers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Peers = nil
	if err = a.L.LoadPeers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Peers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAgentVersionToManyAddOpCrawlProperties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e CrawlProperty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CrawlProperty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CrawlProperty{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCrawlProperties(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AgentVersionID) {
			t.Error("foreign key was wrong value", a.ID, first.AgentVersionID)
		}
		if !queries.Equal(a.ID, second.AgentVersionID) {
			t.Error("foreign key was wrong value", a.ID, second.AgentVersionID)
		}

		if first.R.AgentVersion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AgentVersion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CrawlProperties[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CrawlProperties[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CrawlProperties().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAgentVersionToManySetOpCrawlProperties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e CrawlProperty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CrawlProperty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCrawlProperties(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCrawlProperties(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AgentVersionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AgentVersionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AgentVersionID) {
		t.Error("foreign key was wrong value", a.ID, d.AgentVersionID)
	}
	if !queries.Equal(a.ID, e.AgentVersionID) {
		t.Error("foreign key was wrong value", a.ID, e.AgentVersionID)
	}

	if b.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AgentVersion != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AgentVersion != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CrawlProperties[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CrawlProperties[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAgentVersionToManyRemoveOpCrawlProperties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e CrawlProperty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CrawlProperty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, crawlPropertyDBTypes, false, strmangle.SetComplement(crawlPropertyPrimaryKeyColumns, crawlPropertyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCrawlProperties(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCrawlProperties(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CrawlProperties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AgentVersionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AgentVersionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AgentVersion != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AgentVersion != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CrawlProperties) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CrawlProperties[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CrawlProperties[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAgentVersionToManyAddOpPeers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Peer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Peer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPeers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AgentVersionID) {
			t.Error("foreign key was wrong value", a.ID, first.AgentVersionID)
		}
		if !queries.Equal(a.ID, second.AgentVersionID) {
			t.Error("foreign key was wrong value", a.ID, second.AgentVersionID)
		}

		if first.R.AgentVersion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AgentVersion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Peers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Peers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Peers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAgentVersionToManySetOpPeers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Peer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPeers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Peers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPeers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Peers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AgentVersionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AgentVersionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AgentVersionID) {
		t.Error("foreign key was wrong value", a.ID, d.AgentVersionID)
	}
	if !queries.Equal(a.ID, e.AgentVersionID) {
		t.Error("foreign key was wrong value", a.ID, e.AgentVersionID)
	}

	if b.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AgentVersion != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AgentVersion != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Peers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Peers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAgentVersionToManyRemoveOpPeers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AgentVersion
	var b, c, d, e Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, agentVersionDBTypes, false, strmangle.SetComplement(agentVersionPrimaryKeyColumns, agentVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Peer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPeers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Peers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePeers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Peers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AgentVersionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AgentVersionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AgentVersion != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AgentVersion != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AgentVersion != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Peers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Peers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Peers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAgentVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAgentVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AgentVersionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAgentVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AgentVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	agentVersionDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `AgentVersion`: `text`}
	_                   = bytes.MinRead
)

func testAgentVersionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(agentVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(agentVersionAllColumns) == len(agentVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAgentVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(agentVersionAllColumns) == len(agentVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AgentVersion{}
	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, agentVersionDBTypes, true, agentVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(agentVersionAllColumns, agentVersionPrimaryKeyColumns) {
		fields = agentVersionAllColumns
	} else {
		fields = strmangle.SetComplement(
			agentVersionAllColumns,
			agentVersionPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, agentVersionGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AgentVersionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAgentVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(agentVersionAllColumns) == len(agentVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AgentVersion{}
	if err = randomize.Struct(seed, &o, agentVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AgentVersion: %s", err)
	}

	count, err := AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, agentVersionDBTypes, false, agentVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AgentVersion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AgentVersion: %s", err)
	}

	count, err = AgentVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
