// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSessionsClosed202210S(t *testing.T) {
	t.Parallel()

	query := SessionsClosed202210S()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSessionsClosed202210SDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosed202210SQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SessionsClosed202210S().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosed202210SSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SessionsClosed202210Slice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsClosed202210SExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SessionsClosed202210Exists(ctx, tx, o.ID, o.State, o.LastFailedVisit)
	if err != nil {
		t.Errorf("Unable to check if SessionsClosed202210 exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SessionsClosed202210Exists to return true, but got false.")
	}
}

func testSessionsClosed202210SFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sessionsClosed202210Found, err := FindSessionsClosed202210(ctx, tx, o.ID, o.State, o.LastFailedVisit)
	if err != nil {
		t.Error(err)
	}

	if sessionsClosed202210Found == nil {
		t.Error("want a record, got nil")
	}
}

func testSessionsClosed202210SBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SessionsClosed202210S().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSessionsClosed202210SOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SessionsClosed202210S().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSessionsClosed202210SAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sessionsClosed202210One := &SessionsClosed202210{}
	sessionsClosed202210Two := &SessionsClosed202210{}
	if err = randomize.Struct(seed, sessionsClosed202210One, sessionsClosed202210DBTypes, false, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionsClosed202210Two, sessionsClosed202210DBTypes, false, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sessionsClosed202210One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sessionsClosed202210Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SessionsClosed202210S().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSessionsClosed202210SCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sessionsClosed202210One := &SessionsClosed202210{}
	sessionsClosed202210Two := &SessionsClosed202210{}
	if err = randomize.Struct(seed, sessionsClosed202210One, sessionsClosed202210DBTypes, false, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionsClosed202210Two, sessionsClosed202210DBTypes, false, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sessionsClosed202210One.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sessionsClosed202210Two.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sessionsClosed202210BeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210AfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210AfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210BeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210AfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210BeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210AfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210BeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func sessionsClosed202210AfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SessionsClosed202210) error {
	*o = SessionsClosed202210{}
	return nil
}

func testSessionsClosed202210SHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SessionsClosed202210{}
	o := &SessionsClosed202210{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, false); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 object: %s", err)
	}

	AddSessionsClosed202210Hook(boil.BeforeInsertHook, sessionsClosed202210BeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210BeforeInsertHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.AfterInsertHook, sessionsClosed202210AfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210AfterInsertHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.AfterSelectHook, sessionsClosed202210AfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210AfterSelectHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.BeforeUpdateHook, sessionsClosed202210BeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210BeforeUpdateHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.AfterUpdateHook, sessionsClosed202210AfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210AfterUpdateHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.BeforeDeleteHook, sessionsClosed202210BeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210BeforeDeleteHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.AfterDeleteHook, sessionsClosed202210AfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210AfterDeleteHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.BeforeUpsertHook, sessionsClosed202210BeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210BeforeUpsertHooks = []SessionsClosed202210Hook{}

	AddSessionsClosed202210Hook(boil.AfterUpsertHook, sessionsClosed202210AfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sessionsClosed202210AfterUpsertHooks = []SessionsClosed202210Hook{}
}

func testSessionsClosed202210SInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionsClosed202210SInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sessionsClosed202210ColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionsClosed202210ToOnePeerUsingPeer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SessionsClosed202210
	var foreign Peer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sessionsClosed202210DBTypes, false, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, peerDBTypes, false, peerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Peer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PeerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Peer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SessionsClosed202210Slice{&local}
	if err = local.L.LoadPeer(ctx, tx, false, (*[]*SessionsClosed202210)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Peer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Peer = nil
	if err = local.L.LoadPeer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Peer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSessionsClosed202210ToOneSetOpPeerUsingPeer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SessionsClosed202210
	var b, c Peer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sessionsClosed202210DBTypes, false, strmangle.SetComplement(sessionsClosed202210PrimaryKeyColumns, sessionsClosed202210ColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peerDBTypes, false, strmangle.SetComplement(peerPrimaryKeyColumns, peerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Peer{&b, &c} {
		err = a.SetPeer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Peer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SessionsClosed202210S[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PeerID != x.ID {
			t.Error("foreign key was wrong value", a.PeerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PeerID))
		reflect.Indirect(reflect.ValueOf(&a.PeerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PeerID != x.ID {
			t.Error("foreign key was wrong value", a.PeerID, x.ID)
		}
	}
}

func testSessionsClosed202210SReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSessionsClosed202210SReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SessionsClosed202210Slice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSessionsClosed202210SSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SessionsClosed202210S().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sessionsClosed202210DBTypes = map[string]string{`ID`: `integer`, `PeerID`: `integer`, `FirstSuccessfulVisit`: `timestamp with time zone`, `LastSuccessfulVisit`: `timestamp with time zone`, `NextVisitAttemptAt`: `timestamp with time zone`, `FirstFailedVisit`: `timestamp with time zone`, `LastFailedVisit`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `MinDuration`: `interval`, `MaxDuration`: `interval`, `SuccessfulVisitsCount`: `integer`, `State`: `enum.session_state('open','pending','closed')`, `FailedVisitsCount`: `smallint`, `RecoveredCount`: `integer`, `FinishReason`: `enum.dial_error('unknown','io_timeout','connection_refused','protocol_not_supported','peer_id_mismatch','no_route_to_host','network_unreachable','no_good_addresses','context_deadline_exceeded','no_public_ip','max_dial_attempts_exceeded','maddr_reset','stream_reset','host_is_down','negotiate_security_protocol_no_trailing_new_line')`}
	_                           = bytes.MinRead
)

func testSessionsClosed202210SUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sessionsClosed202210PrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sessionsClosed202210AllColumns) == len(sessionsClosed202210PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSessionsClosed202210SSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sessionsClosed202210AllColumns) == len(sessionsClosed202210PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SessionsClosed202210{}
	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210ColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sessionsClosed202210DBTypes, true, sessionsClosed202210PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sessionsClosed202210AllColumns, sessionsClosed202210PrimaryKeyColumns) {
		fields = sessionsClosed202210AllColumns
	} else {
		fields = strmangle.SetComplement(
			sessionsClosed202210AllColumns,
			sessionsClosed202210PrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SessionsClosed202210Slice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSessionsClosed202210SUpsert(t *testing.T) {
	t.Parallel()

	if len(sessionsClosed202210AllColumns) == len(sessionsClosed202210PrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SessionsClosed202210{}
	if err = randomize.Struct(seed, &o, sessionsClosed202210DBTypes, true); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SessionsClosed202210: %s", err)
	}

	count, err := SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sessionsClosed202210DBTypes, false, sessionsClosed202210PrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SessionsClosed202210 struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SessionsClosed202210: %s", err)
	}

	count, err = SessionsClosed202210S().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
