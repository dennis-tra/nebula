// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nebula/v1/nebula.proto

package nebulav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dennis-tra/nebula-crawler/proto/nebula/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NebulaServiceName is the fully-qualified name of the NebulaService service.
	NebulaServiceName = "nebula.v1.NebulaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NebulaServiceGetPeerProcedure is the fully-qualified name of the NebulaService's GetPeer RPC.
	NebulaServiceGetPeerProcedure = "/nebula.v1.NebulaService/GetPeer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nebulaServiceServiceDescriptor       = v1.File_nebula_v1_nebula_proto.Services().ByName("NebulaService")
	nebulaServiceGetPeerMethodDescriptor = nebulaServiceServiceDescriptor.Methods().ByName("GetPeer")
)

// NebulaServiceClient is a client for the nebula.v1.NebulaService service.
type NebulaServiceClient interface {
	GetPeer(context.Context, *connect.Request[v1.GetPeerRequest]) (*connect.Response[v1.GetPeerResponse], error)
}

// NewNebulaServiceClient constructs a client for the nebula.v1.NebulaService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNebulaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NebulaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nebulaServiceClient{
		getPeer: connect.NewClient[v1.GetPeerRequest, v1.GetPeerResponse](
			httpClient,
			baseURL+NebulaServiceGetPeerProcedure,
			connect.WithSchema(nebulaServiceGetPeerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nebulaServiceClient implements NebulaServiceClient.
type nebulaServiceClient struct {
	getPeer *connect.Client[v1.GetPeerRequest, v1.GetPeerResponse]
}

// GetPeer calls nebula.v1.NebulaService.GetPeer.
func (c *nebulaServiceClient) GetPeer(ctx context.Context, req *connect.Request[v1.GetPeerRequest]) (*connect.Response[v1.GetPeerResponse], error) {
	return c.getPeer.CallUnary(ctx, req)
}

// NebulaServiceHandler is an implementation of the nebula.v1.NebulaService service.
type NebulaServiceHandler interface {
	GetPeer(context.Context, *connect.Request[v1.GetPeerRequest]) (*connect.Response[v1.GetPeerResponse], error)
}

// NewNebulaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNebulaServiceHandler(svc NebulaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nebulaServiceGetPeerHandler := connect.NewUnaryHandler(
		NebulaServiceGetPeerProcedure,
		svc.GetPeer,
		connect.WithSchema(nebulaServiceGetPeerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nebula.v1.NebulaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NebulaServiceGetPeerProcedure:
			nebulaServiceGetPeerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNebulaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNebulaServiceHandler struct{}

func (UnimplementedNebulaServiceHandler) GetPeer(context.Context, *connect.Request[v1.GetPeerRequest]) (*connect.Response[v1.GetPeerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nebula.v1.NebulaService.GetPeer is not implemented"))
}
