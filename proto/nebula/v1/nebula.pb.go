// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: nebula/v1/nebula.proto

package nebulav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultiAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiAddress string  `protobuf:"bytes,1,opt,name=multi_address,json=multiAddress,proto3" json:"multi_address,omitempty"`
	Asn          *int32  `protobuf:"varint,2,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	IsCloud      *int32  `protobuf:"varint,3,opt,name=is_cloud,json=isCloud,proto3,oneof" json:"is_cloud,omitempty"`
	Country      *string `protobuf:"bytes,4,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Continent    *string `protobuf:"bytes,5,opt,name=continent,proto3,oneof" json:"continent,omitempty"`
	Ip           *string `protobuf:"bytes,6,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}

func (x *MultiAddress) Reset() {
	*x = MultiAddress{}
	mi := &file_nebula_v1_nebula_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAddress) ProtoMessage() {}

func (x *MultiAddress) ProtoReflect() protoreflect.Message {
	mi := &file_nebula_v1_nebula_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAddress.ProtoReflect.Descriptor instead.
func (*MultiAddress) Descriptor() ([]byte, []int) {
	return file_nebula_v1_nebula_proto_rawDescGZIP(), []int{0}
}

func (x *MultiAddress) GetMultiAddress() string {
	if x != nil {
		return x.MultiAddress
	}
	return ""
}

func (x *MultiAddress) GetAsn() int32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *MultiAddress) GetIsCloud() int32 {
	if x != nil && x.IsCloud != nil {
		return *x.IsCloud
	}
	return 0
}

func (x *MultiAddress) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *MultiAddress) GetContinent() string {
	if x != nil && x.Continent != nil {
		return *x.Continent
	}
	return ""
}

func (x *MultiAddress) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type GetPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiHash string `protobuf:"bytes,1,opt,name=multi_hash,json=multiHash,proto3" json:"multi_hash,omitempty"`
}

func (x *GetPeerRequest) Reset() {
	*x = GetPeerRequest{}
	mi := &file_nebula_v1_nebula_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerRequest) ProtoMessage() {}

func (x *GetPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebula_v1_nebula_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerRequest.ProtoReflect.Descriptor instead.
func (*GetPeerRequest) Descriptor() ([]byte, []int) {
	return file_nebula_v1_nebula_proto_rawDescGZIP(), []int{1}
}

func (x *GetPeerRequest) GetMultiHash() string {
	if x != nil {
		return x.MultiHash
	}
	return ""
}

type GetPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiHash      string          `protobuf:"bytes,1,opt,name=multi_hash,json=multiHash,proto3" json:"multi_hash,omitempty"`
	AgentVersion   *string         `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion,proto3,oneof" json:"agent_version,omitempty"`
	Protocols      []string        `protobuf:"bytes,3,rep,name=protocols,proto3" json:"protocols,omitempty"`
	MultiAddresses []*MultiAddress `protobuf:"bytes,4,rep,name=multi_addresses,json=multiAddresses,proto3" json:"multi_addresses,omitempty"`
}

func (x *GetPeerResponse) Reset() {
	*x = GetPeerResponse{}
	mi := &file_nebula_v1_nebula_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerResponse) ProtoMessage() {}

func (x *GetPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nebula_v1_nebula_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerResponse.ProtoReflect.Descriptor instead.
func (*GetPeerResponse) Descriptor() ([]byte, []int) {
	return file_nebula_v1_nebula_proto_rawDescGZIP(), []int{2}
}

func (x *GetPeerResponse) GetMultiHash() string {
	if x != nil {
		return x.MultiHash
	}
	return ""
}

func (x *GetPeerResponse) GetAgentVersion() string {
	if x != nil && x.AgentVersion != nil {
		return *x.AgentVersion
	}
	return ""
}

func (x *GetPeerResponse) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *GetPeerResponse) GetMultiAddresses() []*MultiAddress {
	if x != nil {
		return x.MultiAddresses
	}
	return nil
}

var File_nebula_v1_nebula_proto protoreflect.FileDescriptor

var file_nebula_v1_nebula_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x62, 0x75,
	0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61,
	0x2e, 0x76, 0x31, 0x22, 0xf7, 0x01, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x73, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x73, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x22, 0x2f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x61, 0x73, 0x68, 0x22, 0xcc,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x53, 0x0a,
	0x0d, 0x4e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x62, 0x75,
	0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0xa0, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x62, 0x75, 0x6c,
	0x61, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x65, 0x6e, 0x6e, 0x69, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x2f, 0x6e, 0x65, 0x62, 0x75, 0x6c,
	0x61, 0x2d, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x65, 0x62, 0x75, 0x6c, 0x61,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x4e, 0x65, 0x62, 0x75, 0x6c,
	0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x4e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x15, 0x4e, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x4e, 0x65, 0x62, 0x75, 0x6c,
	0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nebula_v1_nebula_proto_rawDescOnce sync.Once
	file_nebula_v1_nebula_proto_rawDescData = file_nebula_v1_nebula_proto_rawDesc
)

func file_nebula_v1_nebula_proto_rawDescGZIP() []byte {
	file_nebula_v1_nebula_proto_rawDescOnce.Do(func() {
		file_nebula_v1_nebula_proto_rawDescData = protoimpl.X.CompressGZIP(file_nebula_v1_nebula_proto_rawDescData)
	})
	return file_nebula_v1_nebula_proto_rawDescData
}

var file_nebula_v1_nebula_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nebula_v1_nebula_proto_goTypes = []any{
	(*MultiAddress)(nil),    // 0: nebula.v1.MultiAddress
	(*GetPeerRequest)(nil),  // 1: nebula.v1.GetPeerRequest
	(*GetPeerResponse)(nil), // 2: nebula.v1.GetPeerResponse
}
var file_nebula_v1_nebula_proto_depIdxs = []int32{
	0, // 0: nebula.v1.GetPeerResponse.multi_addresses:type_name -> nebula.v1.MultiAddress
	1, // 1: nebula.v1.NebulaService.GetPeer:input_type -> nebula.v1.GetPeerRequest
	2, // 2: nebula.v1.NebulaService.GetPeer:output_type -> nebula.v1.GetPeerResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_nebula_v1_nebula_proto_init() }
func file_nebula_v1_nebula_proto_init() {
	if File_nebula_v1_nebula_proto != nil {
		return
	}
	file_nebula_v1_nebula_proto_msgTypes[0].OneofWrappers = []any{}
	file_nebula_v1_nebula_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nebula_v1_nebula_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nebula_v1_nebula_proto_goTypes,
		DependencyIndexes: file_nebula_v1_nebula_proto_depIdxs,
		MessageInfos:      file_nebula_v1_nebula_proto_msgTypes,
	}.Build()
	File_nebula_v1_nebula_proto = out.File
	file_nebula_v1_nebula_proto_rawDesc = nil
	file_nebula_v1_nebula_proto_goTypes = nil
	file_nebula_v1_nebula_proto_depIdxs = nil
}
