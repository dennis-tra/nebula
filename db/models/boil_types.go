// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for NetError
const (
	NetErrorUnknown                              string = "unknown"
	NetErrorIoTimeout                            string = "io_timeout"
	NetErrorNoRecentNetworkActivity              string = "no_recent_network_activity"
	NetErrorConnectionRefused                    string = "connection_refused"
	NetErrorProtocolNotSupported                 string = "protocol_not_supported"
	NetErrorPeerIDMismatch                       string = "peer_id_mismatch"
	NetErrorNoRouteToHost                        string = "no_route_to_host"
	NetErrorNetworkUnreachable                   string = "network_unreachable"
	NetErrorNoGoodAddresses                      string = "no_good_addresses"
	NetErrorContextDeadlineExceeded              string = "context_deadline_exceeded"
	NetErrorNoIPAddress                          string = "no_ip_address"
	NetErrorMaxDialAttemptsExceeded              string = "max_dial_attempts_exceeded"
	NetErrorMaddrReset                           string = "maddr_reset"
	NetErrorStreamReset                          string = "stream_reset"
	NetErrorHostIsDown                           string = "host_is_down"
	NetErrorNegotiateSecurityProtocol            string = "negotiate_security_protocol"
	NetErrorNegotiateStreamMultiplexer           string = "negotiate_stream_multiplexer"
	NetErrorResourceLimitExceeded                string = "resource_limit_exceeded"
	NetErrorWriteOnStream                        string = "write_on_stream"
	NetErrorConnectionResetByPeer                string = "connection_reset_by_peer"
	NetErrorCantAssignRequestedAddress           string = "cant_assign_requested_address"
	NetErrorConnectionGated                      string = "connection_gated"
	NetErrorCantConnectOverRelay                 string = "cant_connect_over_relay"
	NetErrorDevp2pHandshakeEOF                   string = "devp2p_handshake_eof"
	NetErrorDevp2pDisconnectRequested            string = "devp2p_disconnect_requested"
	NetErrorDevp2pNetworkError                   string = "devp2p_network_error"
	NetErrorDevp2pBreachOfProtocol               string = "devp2p_breach_of_protocol"
	NetErrorDevp2pUselessPeer                    string = "devp2p_useless_peer"
	NetErrorDevp2pTooManyPeers                   string = "devp2p_too_many_peers"
	NetErrorDevp2pAlreadyConnected               string = "devp2p_already_connected"
	NetErrorDevp2pIncompatibleP2PProtocolVersion string = "devp2p_incompatible_p2p_protocol_version"
	NetErrorDevp2pInvalidNodeIdentity            string = "devp2p_invalid_node_identity"
	NetErrorDevp2pClientQuitting                 string = "devp2p_client_quitting"
	NetErrorDevp2pUnexpectedIdentity             string = "devp2p_unexpected_identity"
	NetErrorDevp2pConnectedToSelf                string = "devp2p_connected_to_self"
	NetErrorDevp2pReadTimeout                    string = "devp2p_read_timeout"
	NetErrorDevp2pSubprotocolError               string = "devp2p_subprotocol_error"
	NetErrorDevp2pEthprotocolError               string = "devp2p_ethprotocol_error"
	NetErrorDevp2pMalformedDisconnectMessage     string = "devp2p_malformed_disconnect_message"
)

func AllNetError() []string {
	return []string{
		NetErrorUnknown,
		NetErrorIoTimeout,
		NetErrorNoRecentNetworkActivity,
		NetErrorConnectionRefused,
		NetErrorProtocolNotSupported,
		NetErrorPeerIDMismatch,
		NetErrorNoRouteToHost,
		NetErrorNetworkUnreachable,
		NetErrorNoGoodAddresses,
		NetErrorContextDeadlineExceeded,
		NetErrorNoIPAddress,
		NetErrorMaxDialAttemptsExceeded,
		NetErrorMaddrReset,
		NetErrorStreamReset,
		NetErrorHostIsDown,
		NetErrorNegotiateSecurityProtocol,
		NetErrorNegotiateStreamMultiplexer,
		NetErrorResourceLimitExceeded,
		NetErrorWriteOnStream,
		NetErrorConnectionResetByPeer,
		NetErrorCantAssignRequestedAddress,
		NetErrorConnectionGated,
		NetErrorCantConnectOverRelay,
		NetErrorDevp2pHandshakeEOF,
		NetErrorDevp2pDisconnectRequested,
		NetErrorDevp2pNetworkError,
		NetErrorDevp2pBreachOfProtocol,
		NetErrorDevp2pUselessPeer,
		NetErrorDevp2pTooManyPeers,
		NetErrorDevp2pAlreadyConnected,
		NetErrorDevp2pIncompatibleP2PProtocolVersion,
		NetErrorDevp2pInvalidNodeIdentity,
		NetErrorDevp2pClientQuitting,
		NetErrorDevp2pUnexpectedIdentity,
		NetErrorDevp2pConnectedToSelf,
		NetErrorDevp2pReadTimeout,
		NetErrorDevp2pSubprotocolError,
		NetErrorDevp2pEthprotocolError,
		NetErrorDevp2pMalformedDisconnectMessage,
	}
}

// Enum values for CrawlState
const (
	CrawlStateStarted   string = "started"
	CrawlStateCancelled string = "cancelled"
	CrawlStateFailed    string = "failed"
	CrawlStateSucceeded string = "succeeded"
)

func AllCrawlState() []string {
	return []string{
		CrawlStateStarted,
		CrawlStateCancelled,
		CrawlStateFailed,
		CrawlStateSucceeded,
	}
}

// Enum values for SessionState
const (
	SessionStateOpen    string = "open"
	SessionStatePending string = "pending"
	SessionStateClosed  string = "closed"
)

func AllSessionState() []string {
	return []string{
		SessionStateOpen,
		SessionStatePending,
		SessionStateClosed,
	}
}

// Enum values for VisitType
const (
	VisitTypeCrawl string = "crawl"
	VisitTypeDial  string = "dial"
)

func AllVisitType() []string {
	return []string{
		VisitTypeCrawl,
		VisitTypeDial,
	}
}
