// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IPAddress is an object representing the database table.
type IPAddress struct { // An internal unique id that identifies this ip address.
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// The multi address that this ip address belongs to.
	MultiAddressID int `boil:"multi_address_id" json:"multi_address_id" toml:"multi_address_id" yaml:"multi_address_id"`
	// The autonomous system number that this ip address belongs to.
	Asn null.Int `boil:"asn" json:"asn,omitempty" toml:"asn" yaml:"asn,omitempty"`
	// If NULL this address could not be associated with a cloud provider. If not NULL the integer corresponds to the UdgerDB datacenter ID.
	IsCloud null.Int `boil:"is_cloud" json:"is_cloud,omitempty" toml:"is_cloud" yaml:"is_cloud,omitempty"`
	// Timestamp of when this IP address was updated.
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Timestamp of when this IP address was created.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// The country that this address belongs to in the form of a two to three letter country code
	Country null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	// The continent that this address belongs to in the form of a two letter code.
	Continent null.String `boil:"continent" json:"continent,omitempty" toml:"continent" yaml:"continent,omitempty"`
	// The IP address derived from the reference multi address.
	Address string `boil:"address" json:"address" toml:"address" yaml:"address"`

	R *ipAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ipAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IPAddressColumns = struct {
	ID             string
	MultiAddressID string
	Asn            string
	IsCloud        string
	UpdatedAt      string
	CreatedAt      string
	Country        string
	Continent      string
	Address        string
}{
	ID:             "id",
	MultiAddressID: "multi_address_id",
	Asn:            "asn",
	IsCloud:        "is_cloud",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
	Country:        "country",
	Continent:      "continent",
	Address:        "address",
}

var IPAddressTableColumns = struct {
	ID             string
	MultiAddressID string
	Asn            string
	IsCloud        string
	UpdatedAt      string
	CreatedAt      string
	Country        string
	Continent      string
	Address        string
}{
	ID:             "ip_addresses.id",
	MultiAddressID: "ip_addresses.multi_address_id",
	Asn:            "ip_addresses.asn",
	IsCloud:        "ip_addresses.is_cloud",
	UpdatedAt:      "ip_addresses.updated_at",
	CreatedAt:      "ip_addresses.created_at",
	Country:        "ip_addresses.country",
	Continent:      "ip_addresses.continent",
	Address:        "ip_addresses.address",
}

// Generated where

var IPAddressWhere = struct {
	ID             whereHelperint
	MultiAddressID whereHelperint
	Asn            whereHelpernull_Int
	IsCloud        whereHelpernull_Int
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	Country        whereHelpernull_String
	Continent      whereHelpernull_String
	Address        whereHelperstring
}{
	ID:             whereHelperint{field: "\"ip_addresses\".\"id\""},
	MultiAddressID: whereHelperint{field: "\"ip_addresses\".\"multi_address_id\""},
	Asn:            whereHelpernull_Int{field: "\"ip_addresses\".\"asn\""},
	IsCloud:        whereHelpernull_Int{field: "\"ip_addresses\".\"is_cloud\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"ip_addresses\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"ip_addresses\".\"created_at\""},
	Country:        whereHelpernull_String{field: "\"ip_addresses\".\"country\""},
	Continent:      whereHelpernull_String{field: "\"ip_addresses\".\"continent\""},
	Address:        whereHelperstring{field: "\"ip_addresses\".\"address\""},
}

// IPAddressRels is where relationship names are stored.
var IPAddressRels = struct {
	MultiAddress string
}{
	MultiAddress: "MultiAddress",
}

// ipAddressR is where relationships are stored.
type ipAddressR struct {
	MultiAddress *MultiAddress `boil:"MultiAddress" json:"MultiAddress" toml:"MultiAddress" yaml:"MultiAddress"`
}

// NewStruct creates a new relationship struct
func (*ipAddressR) NewStruct() *ipAddressR {
	return &ipAddressR{}
}

func (r *ipAddressR) GetMultiAddress() *MultiAddress {
	if r == nil {
		return nil
	}
	return r.MultiAddress
}

// ipAddressL is where Load methods for each relationship are stored.
type ipAddressL struct{}

var (
	ipAddressAllColumns            = []string{"id", "multi_address_id", "asn", "is_cloud", "updated_at", "created_at", "country", "continent", "address"}
	ipAddressColumnsWithoutDefault = []string{"multi_address_id", "updated_at", "created_at", "address"}
	ipAddressColumnsWithDefault    = []string{"id", "asn", "is_cloud", "country", "continent"}
	ipAddressPrimaryKeyColumns     = []string{"id"}
	ipAddressGeneratedColumns      = []string{"id"}
)

type (
	// IPAddressSlice is an alias for a slice of pointers to IPAddress.
	// This should almost always be used instead of []IPAddress.
	IPAddressSlice []*IPAddress
	// IPAddressHook is the signature for custom IPAddress hook methods
	IPAddressHook func(context.Context, boil.ContextExecutor, *IPAddress) error

	ipAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ipAddressType                 = reflect.TypeOf(&IPAddress{})
	ipAddressMapping              = queries.MakeStructMapping(ipAddressType)
	ipAddressPrimaryKeyMapping, _ = queries.BindMapping(ipAddressType, ipAddressMapping, ipAddressPrimaryKeyColumns)
	ipAddressInsertCacheMut       sync.RWMutex
	ipAddressInsertCache          = make(map[string]insertCache)
	ipAddressUpdateCacheMut       sync.RWMutex
	ipAddressUpdateCache          = make(map[string]updateCache)
	ipAddressUpsertCacheMut       sync.RWMutex
	ipAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ipAddressAfterSelectHooks []IPAddressHook

var ipAddressBeforeInsertHooks []IPAddressHook
var ipAddressAfterInsertHooks []IPAddressHook

var ipAddressBeforeUpdateHooks []IPAddressHook
var ipAddressAfterUpdateHooks []IPAddressHook

var ipAddressBeforeDeleteHooks []IPAddressHook
var ipAddressAfterDeleteHooks []IPAddressHook

var ipAddressBeforeUpsertHooks []IPAddressHook
var ipAddressAfterUpsertHooks []IPAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IPAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IPAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IPAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IPAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IPAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IPAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IPAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IPAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IPAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ipAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIPAddressHook registers your hook function for all future operations.
func AddIPAddressHook(hookPoint boil.HookPoint, ipAddressHook IPAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ipAddressAfterSelectHooks = append(ipAddressAfterSelectHooks, ipAddressHook)
	case boil.BeforeInsertHook:
		ipAddressBeforeInsertHooks = append(ipAddressBeforeInsertHooks, ipAddressHook)
	case boil.AfterInsertHook:
		ipAddressAfterInsertHooks = append(ipAddressAfterInsertHooks, ipAddressHook)
	case boil.BeforeUpdateHook:
		ipAddressBeforeUpdateHooks = append(ipAddressBeforeUpdateHooks, ipAddressHook)
	case boil.AfterUpdateHook:
		ipAddressAfterUpdateHooks = append(ipAddressAfterUpdateHooks, ipAddressHook)
	case boil.BeforeDeleteHook:
		ipAddressBeforeDeleteHooks = append(ipAddressBeforeDeleteHooks, ipAddressHook)
	case boil.AfterDeleteHook:
		ipAddressAfterDeleteHooks = append(ipAddressAfterDeleteHooks, ipAddressHook)
	case boil.BeforeUpsertHook:
		ipAddressBeforeUpsertHooks = append(ipAddressBeforeUpsertHooks, ipAddressHook)
	case boil.AfterUpsertHook:
		ipAddressAfterUpsertHooks = append(ipAddressAfterUpsertHooks, ipAddressHook)
	}
}

// One returns a single ipAddress record from the query.
func (q ipAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IPAddress, error) {
	o := &IPAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ip_addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IPAddress records from the query.
func (q ipAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (IPAddressSlice, error) {
	var o []*IPAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IPAddress slice")
	}

	if len(ipAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IPAddress records in the query.
func (q ipAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ip_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ipAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ip_addresses exists")
	}

	return count > 0, nil
}

// MultiAddress pointed to by the foreign key.
func (o *IPAddress) MultiAddress(mods ...qm.QueryMod) multiAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiAddressID),
	}

	queryMods = append(queryMods, mods...)

	return MultiAddresses(queryMods...)
}

// LoadMultiAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ipAddressL) LoadMultiAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIPAddress interface{}, mods queries.Applicator) error {
	var slice []*IPAddress
	var object *IPAddress

	if singular {
		var ok bool
		object, ok = maybeIPAddress.(*IPAddress)
		if !ok {
			object = new(IPAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIPAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIPAddress))
			}
		}
	} else {
		s, ok := maybeIPAddress.(*[]*IPAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIPAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIPAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ipAddressR{}
		}
		args = append(args, object.MultiAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ipAddressR{}
			}

			for _, a := range args {
				if a == obj.MultiAddressID {
					continue Outer
				}
			}

			args = append(args, obj.MultiAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses`),
		qm.WhereIn(`multi_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddress")
	}

	var resultSlice []*MultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(multiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultiAddress = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressR{}
		}
		foreign.R.IPAddresses = append(foreign.R.IPAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiAddressID == foreign.ID {
				local.R.MultiAddress = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.IPAddresses = append(foreign.R.IPAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetMultiAddress of the ipAddress to the related item.
// Sets o.R.MultiAddress to related.
// Adds o to related.R.IPAddresses.
func (o *IPAddress) SetMultiAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ip_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, ipAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiAddressID = related.ID
	if o.R == nil {
		o.R = &ipAddressR{
			MultiAddress: related,
		}
	} else {
		o.R.MultiAddress = related
	}

	if related.R == nil {
		related.R = &multiAddressR{
			IPAddresses: IPAddressSlice{o},
		}
	} else {
		related.R.IPAddresses = append(related.R.IPAddresses, o)
	}

	return nil
}

// IPAddresses retrieves all the records using an executor.
func IPAddresses(mods ...qm.QueryMod) ipAddressQuery {
	mods = append(mods, qm.From("\"ip_addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ip_addresses\".*"})
	}

	return ipAddressQuery{q}
}

// FindIPAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIPAddress(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*IPAddress, error) {
	ipAddressObj := &IPAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ip_addresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ipAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ip_addresses")
	}

	if err = ipAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ipAddressObj, err
	}

	return ipAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IPAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ip_addresses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ipAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ipAddressInsertCacheMut.RLock()
	cache, cached := ipAddressInsertCache[key]
	ipAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ipAddressAllColumns,
			ipAddressColumnsWithDefault,
			ipAddressColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ipAddressGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ipAddressType, ipAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ipAddressType, ipAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ip_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ip_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ip_addresses")
	}

	if !cached {
		ipAddressInsertCacheMut.Lock()
		ipAddressInsertCache[key] = cache
		ipAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IPAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IPAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ipAddressUpdateCacheMut.RLock()
	cache, cached := ipAddressUpdateCache[key]
	ipAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ipAddressAllColumns,
			ipAddressPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ipAddressGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ip_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ip_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ipAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ipAddressType, ipAddressMapping, append(wl, ipAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ip_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ip_addresses")
	}

	if !cached {
		ipAddressUpdateCacheMut.Lock()
		ipAddressUpdateCache[key] = cache
		ipAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ipAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ip_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IPAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ipAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ip_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ipAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ipAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ipAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IPAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ip_addresses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ipAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ipAddressUpsertCacheMut.RLock()
	cache, cached := ipAddressUpsertCache[key]
	ipAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ipAddressAllColumns,
			ipAddressColumnsWithDefault,
			ipAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ipAddressAllColumns,
			ipAddressPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, ipAddressGeneratedColumns)
		update = strmangle.SetComplement(update, ipAddressGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ip_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ipAddressPrimaryKeyColumns))
			copy(conflict, ipAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ip_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ipAddressType, ipAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ipAddressType, ipAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ip_addresses")
	}

	if !cached {
		ipAddressUpsertCacheMut.Lock()
		ipAddressUpsertCache[key] = cache
		ipAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IPAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IPAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IPAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ipAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"ip_addresses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ip_addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ipAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ipAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ip_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ip_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IPAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ipAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ipAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ip_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ipAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ipAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ip_addresses")
	}

	if len(ipAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IPAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIPAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IPAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IPAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ipAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ip_addresses\".* FROM \"ip_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ipAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IPAddressSlice")
	}

	*o = slice

	return nil
}

// IPAddressExists checks if the IPAddress row exists.
func IPAddressExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ip_addresses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ip_addresses exists")
	}

	return exists, nil
}

// Exists checks if the IPAddress row exists.
func (o *IPAddress) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IPAddressExists(ctx, exec, o.ID)
}
